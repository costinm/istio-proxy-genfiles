// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/filter/fault.proto

#ifndef PROTOBUF_api_2ffilter_2ffault_2eproto__INCLUDED
#define PROTOBUF_api_2ffilter_2ffault_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/duration.pb.h>
#include "validate/validate.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_api_2ffilter_2ffault_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsFaultDelayImpl();
void InitDefaultsFaultDelay();
inline void InitDefaults() {
  InitDefaultsFaultDelay();
}
}  // namespace protobuf_api_2ffilter_2ffault_2eproto
namespace envoy {
namespace api {
namespace v2 {
namespace filter {
class FaultDelay;
class FaultDelayDefaultTypeInternal;
extern FaultDelayDefaultTypeInternal _FaultDelay_default_instance_;
}  // namespace filter
}  // namespace v2
}  // namespace api
}  // namespace envoy
namespace envoy {
namespace api {
namespace v2 {
namespace filter {

enum FaultDelay_FaultDelayType {
  FaultDelay_FaultDelayType_FIXED = 0,
  FaultDelay_FaultDelayType_FaultDelay_FaultDelayType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  FaultDelay_FaultDelayType_FaultDelay_FaultDelayType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool FaultDelay_FaultDelayType_IsValid(int value);
const FaultDelay_FaultDelayType FaultDelay_FaultDelayType_FaultDelayType_MIN = FaultDelay_FaultDelayType_FIXED;
const FaultDelay_FaultDelayType FaultDelay_FaultDelayType_FaultDelayType_MAX = FaultDelay_FaultDelayType_FIXED;
const int FaultDelay_FaultDelayType_FaultDelayType_ARRAYSIZE = FaultDelay_FaultDelayType_FaultDelayType_MAX + 1;

const ::google::protobuf::EnumDescriptor* FaultDelay_FaultDelayType_descriptor();
inline const ::std::string& FaultDelay_FaultDelayType_Name(FaultDelay_FaultDelayType value) {
  return ::google::protobuf::internal::NameOfEnum(
    FaultDelay_FaultDelayType_descriptor(), value);
}
inline bool FaultDelay_FaultDelayType_Parse(
    const ::std::string& name, FaultDelay_FaultDelayType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FaultDelay_FaultDelayType>(
    FaultDelay_FaultDelayType_descriptor(), name, value);
}
// ===================================================================

class FaultDelay : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.filter.FaultDelay) */ {
 public:
  FaultDelay();
  virtual ~FaultDelay();

  FaultDelay(const FaultDelay& from);

  inline FaultDelay& operator=(const FaultDelay& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FaultDelay(FaultDelay&& from) noexcept
    : FaultDelay() {
    *this = ::std::move(from);
  }

  inline FaultDelay& operator=(FaultDelay&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FaultDelay& default_instance();

  enum FaultDelayTypeCase {
    kFixedDelay = 3,
    FAULT_DELAY_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FaultDelay* internal_default_instance() {
    return reinterpret_cast<const FaultDelay*>(
               &_FaultDelay_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(FaultDelay* other);
  friend void swap(FaultDelay& a, FaultDelay& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FaultDelay* New() const PROTOBUF_FINAL { return New(NULL); }

  FaultDelay* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FaultDelay& from);
  void MergeFrom(const FaultDelay& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FaultDelay* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef FaultDelay_FaultDelayType FaultDelayType;
  static const FaultDelayType FIXED =
    FaultDelay_FaultDelayType_FIXED;
  static inline bool FaultDelayType_IsValid(int value) {
    return FaultDelay_FaultDelayType_IsValid(value);
  }
  static const FaultDelayType FaultDelayType_MIN =
    FaultDelay_FaultDelayType_FaultDelayType_MIN;
  static const FaultDelayType FaultDelayType_MAX =
    FaultDelay_FaultDelayType_FaultDelayType_MAX;
  static const int FaultDelayType_ARRAYSIZE =
    FaultDelay_FaultDelayType_FaultDelayType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FaultDelayType_descriptor() {
    return FaultDelay_FaultDelayType_descriptor();
  }
  static inline const ::std::string& FaultDelayType_Name(FaultDelayType value) {
    return FaultDelay_FaultDelayType_Name(value);
  }
  static inline bool FaultDelayType_Parse(const ::std::string& name,
      FaultDelayType* value) {
    return FaultDelay_FaultDelayType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .envoy.api.v2.filter.FaultDelay.FaultDelayType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::envoy::api::v2::filter::FaultDelay_FaultDelayType type() const;
  void set_type(::envoy::api::v2::filter::FaultDelay_FaultDelayType value);

  // uint32 percent = 2 [(.validate.rules) = {
  void clear_percent();
  static const int kPercentFieldNumber = 2;
  ::google::protobuf::uint32 percent() const;
  void set_percent(::google::protobuf::uint32 value);

  // .google.protobuf.Duration fixed_delay = 3 [(.validate.rules) = {
  bool has_fixed_delay() const;
  void clear_fixed_delay();
  static const int kFixedDelayFieldNumber = 3;
  const ::google::protobuf::Duration& fixed_delay() const;
  ::google::protobuf::Duration* release_fixed_delay();
  ::google::protobuf::Duration* mutable_fixed_delay();
  void set_allocated_fixed_delay(::google::protobuf::Duration* fixed_delay);

  FaultDelayTypeCase fault_delay_type_case() const;
  // @@protoc_insertion_point(class_scope:envoy.api.v2.filter.FaultDelay)
 private:
  void set_has_fixed_delay();

  inline bool has_fault_delay_type() const;
  void clear_fault_delay_type();
  inline void clear_has_fault_delay_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int type_;
  ::google::protobuf::uint32 percent_;
  union FaultDelayTypeUnion {
    FaultDelayTypeUnion() {}
    ::google::protobuf::Duration* fixed_delay_;
  } fault_delay_type_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_api_2ffilter_2ffault_2eproto::TableStruct;
  friend void ::protobuf_api_2ffilter_2ffault_2eproto::InitDefaultsFaultDelayImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FaultDelay

// .envoy.api.v2.filter.FaultDelay.FaultDelayType type = 1;
inline void FaultDelay::clear_type() {
  type_ = 0;
}
inline ::envoy::api::v2::filter::FaultDelay_FaultDelayType FaultDelay::type() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.FaultDelay.type)
  return static_cast< ::envoy::api::v2::filter::FaultDelay_FaultDelayType >(type_);
}
inline void FaultDelay::set_type(::envoy::api::v2::filter::FaultDelay_FaultDelayType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.FaultDelay.type)
}

// uint32 percent = 2 [(.validate.rules) = {
inline void FaultDelay::clear_percent() {
  percent_ = 0u;
}
inline ::google::protobuf::uint32 FaultDelay::percent() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.FaultDelay.percent)
  return percent_;
}
inline void FaultDelay::set_percent(::google::protobuf::uint32 value) {
  
  percent_ = value;
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.FaultDelay.percent)
}

// .google.protobuf.Duration fixed_delay = 3 [(.validate.rules) = {
inline bool FaultDelay::has_fixed_delay() const {
  return fault_delay_type_case() == kFixedDelay;
}
inline void FaultDelay::set_has_fixed_delay() {
  _oneof_case_[0] = kFixedDelay;
}
inline ::google::protobuf::Duration* FaultDelay::release_fixed_delay() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.FaultDelay.fixed_delay)
  if (has_fixed_delay()) {
    clear_has_fault_delay_type();
      ::google::protobuf::Duration* temp = fault_delay_type_.fixed_delay_;
    fault_delay_type_.fixed_delay_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::protobuf::Duration& FaultDelay::fixed_delay() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.FaultDelay.fixed_delay)
  return has_fixed_delay()
      ? *fault_delay_type_.fixed_delay_
      : *reinterpret_cast< ::google::protobuf::Duration*>(&::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* FaultDelay::mutable_fixed_delay() {
  if (!has_fixed_delay()) {
    clear_fault_delay_type();
    set_has_fixed_delay();
    fault_delay_type_.fixed_delay_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.FaultDelay.fixed_delay)
  return fault_delay_type_.fixed_delay_;
}

inline bool FaultDelay::has_fault_delay_type() const {
  return fault_delay_type_case() != FAULT_DELAY_TYPE_NOT_SET;
}
inline void FaultDelay::clear_has_fault_delay_type() {
  _oneof_case_[0] = FAULT_DELAY_TYPE_NOT_SET;
}
inline FaultDelay::FaultDelayTypeCase FaultDelay::fault_delay_type_case() const {
  return FaultDelay::FaultDelayTypeCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace filter
}  // namespace v2
}  // namespace api
}  // namespace envoy

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::envoy::api::v2::filter::FaultDelay_FaultDelayType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::envoy::api::v2::filter::FaultDelay_FaultDelayType>() {
  return ::envoy::api::v2::filter::FaultDelay_FaultDelayType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_api_2ffilter_2ffault_2eproto__INCLUDED
