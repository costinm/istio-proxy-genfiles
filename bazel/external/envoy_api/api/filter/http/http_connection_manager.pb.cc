// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/filter/http/http_connection_manager.proto

#include "api/filter/http/http_connection_manager.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
namespace envoy {
namespace api {
namespace v2 {
namespace filter {
namespace http {
class RdsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rds>
      _instance;
} _Rds_default_instance_;
class HttpFilter_DeprecatedV1DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HttpFilter_DeprecatedV1>
      _instance;
} _HttpFilter_DeprecatedV1_default_instance_;
class HttpFilterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HttpFilter>
      _instance;
} _HttpFilter_default_instance_;
class HttpConnectionManager_TracingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HttpConnectionManager_Tracing>
      _instance;
} _HttpConnectionManager_Tracing_default_instance_;
class HttpConnectionManager_SetCurrentClientCertDetailsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HttpConnectionManager_SetCurrentClientCertDetails>
      _instance;
} _HttpConnectionManager_SetCurrentClientCertDetails_default_instance_;
class HttpConnectionManagerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HttpConnectionManager>
      _instance;
  const ::envoy::api::v2::filter::http::Rds* rds_;
  const ::envoy::api::v2::RouteConfiguration* route_config_;
} _HttpConnectionManager_default_instance_;
}  // namespace http
}  // namespace filter
}  // namespace v2
}  // namespace api
}  // namespace envoy
namespace protobuf_api_2ffilter_2fhttp_2fhttp_5fconnection_5fmanager_2eproto {
void InitDefaultsRdsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  protobuf_api_2fbase_2eproto::InitDefaultsConfigSource();
  {
    void* ptr = &::envoy::api::v2::filter::http::_Rds_default_instance_;
    new (ptr) ::envoy::api::v2::filter::http::Rds();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::filter::http::Rds::InitAsDefaultInstance();
}

void InitDefaultsRds() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRdsImpl);
}

void InitDefaultsHttpFilter_DeprecatedV1Impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  {
    void* ptr = &::envoy::api::v2::filter::http::_HttpFilter_DeprecatedV1_default_instance_;
    new (ptr) ::envoy::api::v2::filter::http::HttpFilter_DeprecatedV1();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::filter::http::HttpFilter_DeprecatedV1::InitAsDefaultInstance();
}

void InitDefaultsHttpFilter_DeprecatedV1() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHttpFilter_DeprecatedV1Impl);
}

void InitDefaultsHttpFilterImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  protobuf_google_2fprotobuf_2fstruct_2eproto::InitDefaultsListValue();
  protobuf_api_2ffilter_2fhttp_2fhttp_5fconnection_5fmanager_2eproto::InitDefaultsHttpFilter_DeprecatedV1();
  {
    void* ptr = &::envoy::api::v2::filter::http::_HttpFilter_default_instance_;
    new (ptr) ::envoy::api::v2::filter::http::HttpFilter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::filter::http::HttpFilter::InitAsDefaultInstance();
}

void InitDefaultsHttpFilter() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHttpFilterImpl);
}

void InitDefaultsHttpConnectionManager_TracingImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  {
    void* ptr = &::envoy::api::v2::filter::http::_HttpConnectionManager_Tracing_default_instance_;
    new (ptr) ::envoy::api::v2::filter::http::HttpConnectionManager_Tracing();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::filter::http::HttpConnectionManager_Tracing::InitAsDefaultInstance();
}

void InitDefaultsHttpConnectionManager_Tracing() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHttpConnectionManager_TracingImpl);
}

void InitDefaultsHttpConnectionManager_SetCurrentClientCertDetailsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  protobuf_google_2fprotobuf_2fwrappers_2eproto::InitDefaultsBoolValue();
  {
    void* ptr = &::envoy::api::v2::filter::http::_HttpConnectionManager_SetCurrentClientCertDetails_default_instance_;
    new (ptr) ::envoy::api::v2::filter::http::HttpConnectionManager_SetCurrentClientCertDetails();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::filter::http::HttpConnectionManager_SetCurrentClientCertDetails::InitAsDefaultInstance();
}

void InitDefaultsHttpConnectionManager_SetCurrentClientCertDetails() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHttpConnectionManager_SetCurrentClientCertDetailsImpl);
}

void InitDefaultsHttpConnectionManagerImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  protobuf_api_2ffilter_2fhttp_2fhttp_5fconnection_5fmanager_2eproto::InitDefaultsRds();
  protobuf_api_2frds_2eproto::InitDefaultsRouteConfiguration();
  protobuf_api_2ffilter_2fhttp_2fhttp_5fconnection_5fmanager_2eproto::InitDefaultsHttpFilter();
  protobuf_google_2fprotobuf_2fwrappers_2eproto::InitDefaultsBoolValue();
  protobuf_api_2ffilter_2fhttp_2fhttp_5fconnection_5fmanager_2eproto::InitDefaultsHttpConnectionManager_Tracing();
  protobuf_api_2fprotocol_2eproto::InitDefaultsHttp1ProtocolOptions();
  protobuf_api_2fprotocol_2eproto::InitDefaultsHttp2ProtocolOptions();
  protobuf_google_2fprotobuf_2fduration_2eproto::InitDefaultsDuration();
  protobuf_api_2ffilter_2faccesslog_2eproto::InitDefaultsAccessLog();
  protobuf_api_2ffilter_2fhttp_2fhttp_5fconnection_5fmanager_2eproto::InitDefaultsHttpConnectionManager_SetCurrentClientCertDetails();
  {
    void* ptr = &::envoy::api::v2::filter::http::_HttpConnectionManager_default_instance_;
    new (ptr) ::envoy::api::v2::filter::http::HttpConnectionManager();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::filter::http::HttpConnectionManager::InitAsDefaultInstance();
}

void InitDefaultsHttpConnectionManager() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHttpConnectionManagerImpl);
}

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::http::Rds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::http::Rds, config_source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::http::Rds, route_config_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::http::HttpFilter_DeprecatedV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::http::HttpFilter_DeprecatedV1, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::http::HttpFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::http::HttpFilter, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::http::HttpFilter, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::http::HttpFilter, deprecated_v1_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::http::HttpConnectionManager_Tracing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::http::HttpConnectionManager_Tracing, operation_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::http::HttpConnectionManager_Tracing, request_headers_for_tags_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::http::HttpConnectionManager_SetCurrentClientCertDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::http::HttpConnectionManager_SetCurrentClientCertDetails, subject_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::http::HttpConnectionManager_SetCurrentClientCertDetails, san_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::http::HttpConnectionManager, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::http::HttpConnectionManager, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::http::HttpConnectionManager, codec_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::http::HttpConnectionManager, stat_prefix_),
  offsetof(::envoy::api::v2::filter::http::HttpConnectionManagerDefaultTypeInternal, rds_),
  offsetof(::envoy::api::v2::filter::http::HttpConnectionManagerDefaultTypeInternal, route_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::http::HttpConnectionManager, http_filters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::http::HttpConnectionManager, add_user_agent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::http::HttpConnectionManager, tracing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::http::HttpConnectionManager, http_protocol_options_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::http::HttpConnectionManager, http2_protocol_options_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::http::HttpConnectionManager, server_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::http::HttpConnectionManager, idle_timeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::http::HttpConnectionManager, drain_timeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::http::HttpConnectionManager, access_log_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::http::HttpConnectionManager, use_remote_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::http::HttpConnectionManager, generate_request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::http::HttpConnectionManager, forward_client_cert_details_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::http::HttpConnectionManager, set_current_client_cert_details_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::http::HttpConnectionManager, route_specifier_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::envoy::api::v2::filter::http::Rds)},
  { 7, -1, sizeof(::envoy::api::v2::filter::http::HttpFilter_DeprecatedV1)},
  { 13, -1, sizeof(::envoy::api::v2::filter::http::HttpFilter)},
  { 21, -1, sizeof(::envoy::api::v2::filter::http::HttpConnectionManager_Tracing)},
  { 28, -1, sizeof(::envoy::api::v2::filter::http::HttpConnectionManager_SetCurrentClientCertDetails)},
  { 35, -1, sizeof(::envoy::api::v2::filter::http::HttpConnectionManager)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::filter::http::_Rds_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::filter::http::_HttpFilter_DeprecatedV1_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::filter::http::_HttpFilter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::filter::http::_HttpConnectionManager_Tracing_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::filter::http::_HttpConnectionManager_SetCurrentClientCertDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::filter::http::_HttpConnectionManager_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "api/filter/http/http_connection_manager.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n-api/filter/http/http_connection_manage"
      "r.proto\022\030envoy.api.v2.filter.http\032\016api/b"
      "ase.proto\032\022api/protocol.proto\032\rapi/rds.p"
      "roto\032\032api/filter/accesslog.proto\032\036google"
      "/protobuf/duration.proto\032\034google/protobu"
      "f/struct.proto\032\036google/protobuf/wrappers"
      ".proto\"S\n\003Rds\0221\n\rconfig_source\030\001 \001(\0132\032.e"
      "nvoy.api.v2.ConfigSource\022\031\n\021route_config"
      "_name\030\002 \001(\t\"\253\001\n\nHttpFilter\022\014\n\004name\030\001 \001(\t"
      "\022\'\n\006config\030\002 \001(\0132\027.google.protobuf.Struc"
      "t\022H\n\rdeprecated_v1\030\003 \001(\01321.envoy.api.v2."
      "filter.http.HttpFilter.DeprecatedV1\032\034\n\014D"
      "eprecatedV1\022\014\n\004type\030\001 \001(\t\"\215\014\n\025HttpConnec"
      "tionManager\022M\n\ncodec_type\030\001 \001(\01629.envoy."
      "api.v2.filter.http.HttpConnectionManager"
      ".CodecType\022\023\n\013stat_prefix\030\002 \001(\t\022,\n\003rds\030\003"
      " \001(\0132\035.envoy.api.v2.filter.http.RdsH\000\0228\n"
      "\014route_config\030\004 \001(\0132 .envoy.api.v2.Route"
      "ConfigurationH\000\022:\n\014http_filters\030\005 \003(\0132$."
      "envoy.api.v2.filter.http.HttpFilter\0222\n\016a"
      "dd_user_agent\030\006 \001(\0132\032.google.protobuf.Bo"
      "olValue\022H\n\007tracing\030\007 \001(\01327.envoy.api.v2."
      "filter.http.HttpConnectionManager.Tracin"
      "g\022A\n\025http_protocol_options\030\010 \001(\0132\".envoy"
      ".api.v2.Http1ProtocolOptions\022B\n\026http2_pr"
      "otocol_options\030\t \001(\0132\".envoy.api.v2.Http"
      "2ProtocolOptions\022\023\n\013server_name\030\n \001(\t\022/\n"
      "\014idle_timeout\030\013 \001(\0132\031.google.protobuf.Du"
      "ration\0220\n\rdrain_timeout\030\014 \001(\0132\031.google.p"
      "rotobuf.Duration\0222\n\naccess_log\030\r \003(\0132\036.e"
      "nvoy.api.v2.filter.AccessLog\0226\n\022use_remo"
      "te_address\030\016 \001(\0132\032.google.protobuf.BoolV"
      "alue\0227\n\023generate_request_id\030\017 \001(\0132\032.goog"
      "le.protobuf.BoolValue\022m\n\033forward_client_"
      "cert_details\030\020 \001(\0162H.envoy.api.v2.filter"
      ".http.HttpConnectionManager.ForwardClien"
      "tCertDetails\022t\n\037set_current_client_cert_"
      "details\030\021 \001(\0132K.envoy.api.v2.filter.http"
      ".HttpConnectionManager.SetCurrentClientC"
      "ertDetails\032\264\001\n\007Tracing\022]\n\016operation_name"
      "\030\001 \001(\0162E.envoy.api.v2.filter.http.HttpCo"
      "nnectionManager.Tracing.OperationName\022 \n"
      "\030request_headers_for_tags\030\002 \003(\t\"(\n\rOpera"
      "tionName\022\013\n\007INGRESS\020\000\022\n\n\006EGRESS\020\001\032s\n\033Set"
      "CurrentClientCertDetails\022+\n\007subject\030\001 \001("
      "\0132\032.google.protobuf.BoolValue\022\'\n\003san\030\002 \001"
      "(\0132\032.google.protobuf.BoolValue\"+\n\tCodecT"
      "ype\022\010\n\004AUTO\020\000\022\t\n\005HTTP1\020\001\022\t\n\005HTTP2\020\002\"y\n\030F"
      "orwardClientCertDetails\022\014\n\010SANITIZE\020\000\022\020\n"
      "\014FORWARD_ONLY\020\001\022\022\n\016APPEND_FORWARD\020\002\022\020\n\014S"
      "ANITIZE_SET\020\003\022\027\n\023ALWAYS_FORWARD_ONLY\020\004B\021"
      "\n\017route_specifierB\006Z\004httpb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2073);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "api/filter/http/http_connection_manager.proto", &protobuf_RegisterTypes);
  ::protobuf_api_2fbase_2eproto::AddDescriptors();
  ::protobuf_api_2fprotocol_2eproto::AddDescriptors();
  ::protobuf_api_2frds_2eproto::AddDescriptors();
  ::protobuf_api_2ffilter_2faccesslog_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2fduration_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2fstruct_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2fwrappers_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_api_2ffilter_2fhttp_2fhttp_5fconnection_5fmanager_2eproto
namespace envoy {
namespace api {
namespace v2 {
namespace filter {
namespace http {
const ::google::protobuf::EnumDescriptor* HttpConnectionManager_Tracing_OperationName_descriptor() {
  protobuf_api_2ffilter_2fhttp_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_2fhttp_5fconnection_5fmanager_2eproto::file_level_enum_descriptors[0];
}
bool HttpConnectionManager_Tracing_OperationName_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const HttpConnectionManager_Tracing_OperationName HttpConnectionManager_Tracing::INGRESS;
const HttpConnectionManager_Tracing_OperationName HttpConnectionManager_Tracing::EGRESS;
const HttpConnectionManager_Tracing_OperationName HttpConnectionManager_Tracing::OperationName_MIN;
const HttpConnectionManager_Tracing_OperationName HttpConnectionManager_Tracing::OperationName_MAX;
const int HttpConnectionManager_Tracing::OperationName_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* HttpConnectionManager_CodecType_descriptor() {
  protobuf_api_2ffilter_2fhttp_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_2fhttp_5fconnection_5fmanager_2eproto::file_level_enum_descriptors[1];
}
bool HttpConnectionManager_CodecType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const HttpConnectionManager_CodecType HttpConnectionManager::AUTO;
const HttpConnectionManager_CodecType HttpConnectionManager::HTTP1;
const HttpConnectionManager_CodecType HttpConnectionManager::HTTP2;
const HttpConnectionManager_CodecType HttpConnectionManager::CodecType_MIN;
const HttpConnectionManager_CodecType HttpConnectionManager::CodecType_MAX;
const int HttpConnectionManager::CodecType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* HttpConnectionManager_ForwardClientCertDetails_descriptor() {
  protobuf_api_2ffilter_2fhttp_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_2fhttp_5fconnection_5fmanager_2eproto::file_level_enum_descriptors[2];
}
bool HttpConnectionManager_ForwardClientCertDetails_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const HttpConnectionManager_ForwardClientCertDetails HttpConnectionManager::SANITIZE;
const HttpConnectionManager_ForwardClientCertDetails HttpConnectionManager::FORWARD_ONLY;
const HttpConnectionManager_ForwardClientCertDetails HttpConnectionManager::APPEND_FORWARD;
const HttpConnectionManager_ForwardClientCertDetails HttpConnectionManager::SANITIZE_SET;
const HttpConnectionManager_ForwardClientCertDetails HttpConnectionManager::ALWAYS_FORWARD_ONLY;
const HttpConnectionManager_ForwardClientCertDetails HttpConnectionManager::ForwardClientCertDetails_MIN;
const HttpConnectionManager_ForwardClientCertDetails HttpConnectionManager::ForwardClientCertDetails_MAX;
const int HttpConnectionManager::ForwardClientCertDetails_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Rds::InitAsDefaultInstance() {
  ::envoy::api::v2::filter::http::_Rds_default_instance_._instance.get_mutable()->config_source_ = const_cast< ::envoy::api::v2::ConfigSource*>(
      ::envoy::api::v2::ConfigSource::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rds::kConfigSourceFieldNumber;
const int Rds::kRouteConfigNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rds::Rds()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2ffilter_2fhttp_2fhttp_5fconnection_5fmanager_2eproto::InitDefaultsRds();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.http.Rds)
}
Rds::Rds(const Rds& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  route_config_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.route_config_name().size() > 0) {
    route_config_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.route_config_name_);
  }
  if (from.has_config_source()) {
    config_source_ = new ::envoy::api::v2::ConfigSource(*from.config_source_);
  } else {
    config_source_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.http.Rds)
}

void Rds::SharedCtor() {
  route_config_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  config_source_ = NULL;
  _cached_size_ = 0;
}

Rds::~Rds() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.http.Rds)
  SharedDtor();
}

void Rds::SharedDtor() {
  route_config_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete config_source_;
}

void Rds::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rds::descriptor() {
  ::protobuf_api_2ffilter_2fhttp_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2fhttp_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Rds& Rds::default_instance() {
  ::protobuf_api_2ffilter_2fhttp_2fhttp_5fconnection_5fmanager_2eproto::InitDefaultsRds();
  return *internal_default_instance();
}

Rds* Rds::New(::google::protobuf::Arena* arena) const {
  Rds* n = new Rds;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Rds::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.http.Rds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  route_config_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && config_source_ != NULL) {
    delete config_source_;
  }
  config_source_ = NULL;
  _internal_metadata_.Clear();
}

bool Rds::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.http.Rds)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.ConfigSource config_source = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config_source()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string route_config_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_route_config_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->route_config_name().data(), static_cast<int>(this->route_config_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.filter.http.Rds.route_config_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.http.Rds)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.http.Rds)
  return false;
#undef DO_
}

void Rds::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.http.Rds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.ConfigSource config_source = 1;
  if (this->has_config_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->config_source_, output);
  }

  // string route_config_name = 2;
  if (this->route_config_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->route_config_name().data(), static_cast<int>(this->route_config_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.http.Rds.route_config_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->route_config_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.http.Rds)
}

::google::protobuf::uint8* Rds::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.http.Rds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.ConfigSource config_source = 1;
  if (this->has_config_source()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->config_source_, deterministic, target);
  }

  // string route_config_name = 2;
  if (this->route_config_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->route_config_name().data(), static_cast<int>(this->route_config_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.http.Rds.route_config_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->route_config_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.http.Rds)
  return target;
}

size_t Rds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.http.Rds)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string route_config_name = 2;
  if (this->route_config_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->route_config_name());
  }

  // .envoy.api.v2.ConfigSource config_source = 1;
  if (this->has_config_source()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->config_source_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rds::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.http.Rds)
  GOOGLE_DCHECK_NE(&from, this);
  const Rds* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Rds>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.http.Rds)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.http.Rds)
    MergeFrom(*source);
  }
}

void Rds::MergeFrom(const Rds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.http.Rds)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.route_config_name().size() > 0) {

    route_config_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.route_config_name_);
  }
  if (from.has_config_source()) {
    mutable_config_source()->::envoy::api::v2::ConfigSource::MergeFrom(from.config_source());
  }
}

void Rds::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.http.Rds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rds::CopyFrom(const Rds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.http.Rds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rds::IsInitialized() const {
  return true;
}

void Rds::Swap(Rds* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rds::InternalSwap(Rds* other) {
  using std::swap;
  route_config_name_.Swap(&other->route_config_name_);
  swap(config_source_, other->config_source_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Rds::GetMetadata() const {
  protobuf_api_2ffilter_2fhttp_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2fhttp_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HttpFilter_DeprecatedV1::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HttpFilter_DeprecatedV1::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HttpFilter_DeprecatedV1::HttpFilter_DeprecatedV1()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2ffilter_2fhttp_2fhttp_5fconnection_5fmanager_2eproto::InitDefaultsHttpFilter_DeprecatedV1();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.http.HttpFilter.DeprecatedV1)
}
HttpFilter_DeprecatedV1::HttpFilter_DeprecatedV1(const HttpFilter_DeprecatedV1& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.http.HttpFilter.DeprecatedV1)
}

void HttpFilter_DeprecatedV1::SharedCtor() {
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

HttpFilter_DeprecatedV1::~HttpFilter_DeprecatedV1() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.http.HttpFilter.DeprecatedV1)
  SharedDtor();
}

void HttpFilter_DeprecatedV1::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HttpFilter_DeprecatedV1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HttpFilter_DeprecatedV1::descriptor() {
  ::protobuf_api_2ffilter_2fhttp_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2fhttp_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HttpFilter_DeprecatedV1& HttpFilter_DeprecatedV1::default_instance() {
  ::protobuf_api_2ffilter_2fhttp_2fhttp_5fconnection_5fmanager_2eproto::InitDefaultsHttpFilter_DeprecatedV1();
  return *internal_default_instance();
}

HttpFilter_DeprecatedV1* HttpFilter_DeprecatedV1::New(::google::protobuf::Arena* arena) const {
  HttpFilter_DeprecatedV1* n = new HttpFilter_DeprecatedV1;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HttpFilter_DeprecatedV1::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.http.HttpFilter.DeprecatedV1)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool HttpFilter_DeprecatedV1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.http.HttpFilter.DeprecatedV1)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.filter.http.HttpFilter.DeprecatedV1.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.http.HttpFilter.DeprecatedV1)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.http.HttpFilter.DeprecatedV1)
  return false;
#undef DO_
}

void HttpFilter_DeprecatedV1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.http.HttpFilter.DeprecatedV1)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.http.HttpFilter.DeprecatedV1.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.http.HttpFilter.DeprecatedV1)
}

::google::protobuf::uint8* HttpFilter_DeprecatedV1::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.http.HttpFilter.DeprecatedV1)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.http.HttpFilter.DeprecatedV1.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.http.HttpFilter.DeprecatedV1)
  return target;
}

size_t HttpFilter_DeprecatedV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.http.HttpFilter.DeprecatedV1)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HttpFilter_DeprecatedV1::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.http.HttpFilter.DeprecatedV1)
  GOOGLE_DCHECK_NE(&from, this);
  const HttpFilter_DeprecatedV1* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HttpFilter_DeprecatedV1>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.http.HttpFilter.DeprecatedV1)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.http.HttpFilter.DeprecatedV1)
    MergeFrom(*source);
  }
}

void HttpFilter_DeprecatedV1::MergeFrom(const HttpFilter_DeprecatedV1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.http.HttpFilter.DeprecatedV1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
}

void HttpFilter_DeprecatedV1::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.http.HttpFilter.DeprecatedV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HttpFilter_DeprecatedV1::CopyFrom(const HttpFilter_DeprecatedV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.http.HttpFilter.DeprecatedV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HttpFilter_DeprecatedV1::IsInitialized() const {
  return true;
}

void HttpFilter_DeprecatedV1::Swap(HttpFilter_DeprecatedV1* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HttpFilter_DeprecatedV1::InternalSwap(HttpFilter_DeprecatedV1* other) {
  using std::swap;
  type_.Swap(&other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HttpFilter_DeprecatedV1::GetMetadata() const {
  protobuf_api_2ffilter_2fhttp_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2fhttp_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HttpFilter::InitAsDefaultInstance() {
  ::envoy::api::v2::filter::http::_HttpFilter_default_instance_._instance.get_mutable()->config_ = const_cast< ::google::protobuf::Struct*>(
      ::google::protobuf::Struct::internal_default_instance());
  ::envoy::api::v2::filter::http::_HttpFilter_default_instance_._instance.get_mutable()->deprecated_v1_ = const_cast< ::envoy::api::v2::filter::http::HttpFilter_DeprecatedV1*>(
      ::envoy::api::v2::filter::http::HttpFilter_DeprecatedV1::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HttpFilter::kNameFieldNumber;
const int HttpFilter::kConfigFieldNumber;
const int HttpFilter::kDeprecatedV1FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HttpFilter::HttpFilter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2ffilter_2fhttp_2fhttp_5fconnection_5fmanager_2eproto::InitDefaultsHttpFilter();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.http.HttpFilter)
}
HttpFilter::HttpFilter(const HttpFilter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_config()) {
    config_ = new ::google::protobuf::Struct(*from.config_);
  } else {
    config_ = NULL;
  }
  if (from.has_deprecated_v1()) {
    deprecated_v1_ = new ::envoy::api::v2::filter::http::HttpFilter_DeprecatedV1(*from.deprecated_v1_);
  } else {
    deprecated_v1_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.http.HttpFilter)
}

void HttpFilter::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&deprecated_v1_) -
      reinterpret_cast<char*>(&config_)) + sizeof(deprecated_v1_));
  _cached_size_ = 0;
}

HttpFilter::~HttpFilter() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.http.HttpFilter)
  SharedDtor();
}

void HttpFilter::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete deprecated_v1_;
}

void HttpFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HttpFilter::descriptor() {
  ::protobuf_api_2ffilter_2fhttp_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2fhttp_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HttpFilter& HttpFilter::default_instance() {
  ::protobuf_api_2ffilter_2fhttp_2fhttp_5fconnection_5fmanager_2eproto::InitDefaultsHttpFilter();
  return *internal_default_instance();
}

HttpFilter* HttpFilter::New(::google::protobuf::Arena* arena) const {
  HttpFilter* n = new HttpFilter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HttpFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.http.HttpFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  if (GetArenaNoVirtual() == NULL && deprecated_v1_ != NULL) {
    delete deprecated_v1_;
  }
  deprecated_v1_ = NULL;
  _internal_metadata_.Clear();
}

bool HttpFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.http.HttpFilter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.filter.http.HttpFilter.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Struct config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.filter.http.HttpFilter.DeprecatedV1 deprecated_v1 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deprecated_v1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.http.HttpFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.http.HttpFilter)
  return false;
#undef DO_
}

void HttpFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.http.HttpFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.http.HttpFilter.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .google.protobuf.Struct config = 2;
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->config_, output);
  }

  // .envoy.api.v2.filter.http.HttpFilter.DeprecatedV1 deprecated_v1 = 3;
  if (this->has_deprecated_v1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->deprecated_v1_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.http.HttpFilter)
}

::google::protobuf::uint8* HttpFilter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.http.HttpFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.http.HttpFilter.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .google.protobuf.Struct config = 2;
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->config_, deterministic, target);
  }

  // .envoy.api.v2.filter.http.HttpFilter.DeprecatedV1 deprecated_v1 = 3;
  if (this->has_deprecated_v1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->deprecated_v1_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.http.HttpFilter)
  return target;
}

size_t HttpFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.http.HttpFilter)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .google.protobuf.Struct config = 2;
  if (this->has_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->config_);
  }

  // .envoy.api.v2.filter.http.HttpFilter.DeprecatedV1 deprecated_v1 = 3;
  if (this->has_deprecated_v1()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->deprecated_v1_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HttpFilter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.http.HttpFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const HttpFilter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HttpFilter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.http.HttpFilter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.http.HttpFilter)
    MergeFrom(*source);
  }
}

void HttpFilter::MergeFrom(const HttpFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.http.HttpFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_config()) {
    mutable_config()->::google::protobuf::Struct::MergeFrom(from.config());
  }
  if (from.has_deprecated_v1()) {
    mutable_deprecated_v1()->::envoy::api::v2::filter::http::HttpFilter_DeprecatedV1::MergeFrom(from.deprecated_v1());
  }
}

void HttpFilter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.http.HttpFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HttpFilter::CopyFrom(const HttpFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.http.HttpFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HttpFilter::IsInitialized() const {
  return true;
}

void HttpFilter::Swap(HttpFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HttpFilter::InternalSwap(HttpFilter* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(config_, other->config_);
  swap(deprecated_v1_, other->deprecated_v1_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HttpFilter::GetMetadata() const {
  protobuf_api_2ffilter_2fhttp_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2fhttp_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HttpConnectionManager_Tracing::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HttpConnectionManager_Tracing::kOperationNameFieldNumber;
const int HttpConnectionManager_Tracing::kRequestHeadersForTagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HttpConnectionManager_Tracing::HttpConnectionManager_Tracing()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2ffilter_2fhttp_2fhttp_5fconnection_5fmanager_2eproto::InitDefaultsHttpConnectionManager_Tracing();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.http.HttpConnectionManager.Tracing)
}
HttpConnectionManager_Tracing::HttpConnectionManager_Tracing(const HttpConnectionManager_Tracing& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      request_headers_for_tags_(from.request_headers_for_tags_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  operation_name_ = from.operation_name_;
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.http.HttpConnectionManager.Tracing)
}

void HttpConnectionManager_Tracing::SharedCtor() {
  operation_name_ = 0;
  _cached_size_ = 0;
}

HttpConnectionManager_Tracing::~HttpConnectionManager_Tracing() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.http.HttpConnectionManager.Tracing)
  SharedDtor();
}

void HttpConnectionManager_Tracing::SharedDtor() {
}

void HttpConnectionManager_Tracing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HttpConnectionManager_Tracing::descriptor() {
  ::protobuf_api_2ffilter_2fhttp_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2fhttp_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HttpConnectionManager_Tracing& HttpConnectionManager_Tracing::default_instance() {
  ::protobuf_api_2ffilter_2fhttp_2fhttp_5fconnection_5fmanager_2eproto::InitDefaultsHttpConnectionManager_Tracing();
  return *internal_default_instance();
}

HttpConnectionManager_Tracing* HttpConnectionManager_Tracing::New(::google::protobuf::Arena* arena) const {
  HttpConnectionManager_Tracing* n = new HttpConnectionManager_Tracing;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HttpConnectionManager_Tracing::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.http.HttpConnectionManager.Tracing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_headers_for_tags_.Clear();
  operation_name_ = 0;
  _internal_metadata_.Clear();
}

bool HttpConnectionManager_Tracing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.http.HttpConnectionManager.Tracing)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.filter.http.HttpConnectionManager.Tracing.OperationName operation_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_operation_name(static_cast< ::envoy::api::v2::filter::http::HttpConnectionManager_Tracing_OperationName >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string request_headers_for_tags = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_request_headers_for_tags()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_headers_for_tags(this->request_headers_for_tags_size() - 1).data(),
            static_cast<int>(this->request_headers_for_tags(this->request_headers_for_tags_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.filter.http.HttpConnectionManager.Tracing.request_headers_for_tags"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.http.HttpConnectionManager.Tracing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.http.HttpConnectionManager.Tracing)
  return false;
#undef DO_
}

void HttpConnectionManager_Tracing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.http.HttpConnectionManager.Tracing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.filter.http.HttpConnectionManager.Tracing.OperationName operation_name = 1;
  if (this->operation_name() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->operation_name(), output);
  }

  // repeated string request_headers_for_tags = 2;
  for (int i = 0, n = this->request_headers_for_tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_headers_for_tags(i).data(), static_cast<int>(this->request_headers_for_tags(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.http.HttpConnectionManager.Tracing.request_headers_for_tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->request_headers_for_tags(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.http.HttpConnectionManager.Tracing)
}

::google::protobuf::uint8* HttpConnectionManager_Tracing::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.http.HttpConnectionManager.Tracing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.filter.http.HttpConnectionManager.Tracing.OperationName operation_name = 1;
  if (this->operation_name() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->operation_name(), target);
  }

  // repeated string request_headers_for_tags = 2;
  for (int i = 0, n = this->request_headers_for_tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_headers_for_tags(i).data(), static_cast<int>(this->request_headers_for_tags(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.http.HttpConnectionManager.Tracing.request_headers_for_tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->request_headers_for_tags(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.http.HttpConnectionManager.Tracing)
  return target;
}

size_t HttpConnectionManager_Tracing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.http.HttpConnectionManager.Tracing)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string request_headers_for_tags = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->request_headers_for_tags_size());
  for (int i = 0, n = this->request_headers_for_tags_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->request_headers_for_tags(i));
  }

  // .envoy.api.v2.filter.http.HttpConnectionManager.Tracing.OperationName operation_name = 1;
  if (this->operation_name() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->operation_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HttpConnectionManager_Tracing::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.http.HttpConnectionManager.Tracing)
  GOOGLE_DCHECK_NE(&from, this);
  const HttpConnectionManager_Tracing* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HttpConnectionManager_Tracing>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.http.HttpConnectionManager.Tracing)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.http.HttpConnectionManager.Tracing)
    MergeFrom(*source);
  }
}

void HttpConnectionManager_Tracing::MergeFrom(const HttpConnectionManager_Tracing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.http.HttpConnectionManager.Tracing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  request_headers_for_tags_.MergeFrom(from.request_headers_for_tags_);
  if (from.operation_name() != 0) {
    set_operation_name(from.operation_name());
  }
}

void HttpConnectionManager_Tracing::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.http.HttpConnectionManager.Tracing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HttpConnectionManager_Tracing::CopyFrom(const HttpConnectionManager_Tracing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.http.HttpConnectionManager.Tracing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HttpConnectionManager_Tracing::IsInitialized() const {
  return true;
}

void HttpConnectionManager_Tracing::Swap(HttpConnectionManager_Tracing* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HttpConnectionManager_Tracing::InternalSwap(HttpConnectionManager_Tracing* other) {
  using std::swap;
  request_headers_for_tags_.InternalSwap(&other->request_headers_for_tags_);
  swap(operation_name_, other->operation_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HttpConnectionManager_Tracing::GetMetadata() const {
  protobuf_api_2ffilter_2fhttp_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2fhttp_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HttpConnectionManager_SetCurrentClientCertDetails::InitAsDefaultInstance() {
  ::envoy::api::v2::filter::http::_HttpConnectionManager_SetCurrentClientCertDetails_default_instance_._instance.get_mutable()->subject_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
  ::envoy::api::v2::filter::http::_HttpConnectionManager_SetCurrentClientCertDetails_default_instance_._instance.get_mutable()->san_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HttpConnectionManager_SetCurrentClientCertDetails::kSubjectFieldNumber;
const int HttpConnectionManager_SetCurrentClientCertDetails::kSanFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HttpConnectionManager_SetCurrentClientCertDetails::HttpConnectionManager_SetCurrentClientCertDetails()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2ffilter_2fhttp_2fhttp_5fconnection_5fmanager_2eproto::InitDefaultsHttpConnectionManager_SetCurrentClientCertDetails();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.http.HttpConnectionManager.SetCurrentClientCertDetails)
}
HttpConnectionManager_SetCurrentClientCertDetails::HttpConnectionManager_SetCurrentClientCertDetails(const HttpConnectionManager_SetCurrentClientCertDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_subject()) {
    subject_ = new ::google::protobuf::BoolValue(*from.subject_);
  } else {
    subject_ = NULL;
  }
  if (from.has_san()) {
    san_ = new ::google::protobuf::BoolValue(*from.san_);
  } else {
    san_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.http.HttpConnectionManager.SetCurrentClientCertDetails)
}

void HttpConnectionManager_SetCurrentClientCertDetails::SharedCtor() {
  ::memset(&subject_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&san_) -
      reinterpret_cast<char*>(&subject_)) + sizeof(san_));
  _cached_size_ = 0;
}

HttpConnectionManager_SetCurrentClientCertDetails::~HttpConnectionManager_SetCurrentClientCertDetails() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.http.HttpConnectionManager.SetCurrentClientCertDetails)
  SharedDtor();
}

void HttpConnectionManager_SetCurrentClientCertDetails::SharedDtor() {
  if (this != internal_default_instance()) delete subject_;
  if (this != internal_default_instance()) delete san_;
}

void HttpConnectionManager_SetCurrentClientCertDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HttpConnectionManager_SetCurrentClientCertDetails::descriptor() {
  ::protobuf_api_2ffilter_2fhttp_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2fhttp_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HttpConnectionManager_SetCurrentClientCertDetails& HttpConnectionManager_SetCurrentClientCertDetails::default_instance() {
  ::protobuf_api_2ffilter_2fhttp_2fhttp_5fconnection_5fmanager_2eproto::InitDefaultsHttpConnectionManager_SetCurrentClientCertDetails();
  return *internal_default_instance();
}

HttpConnectionManager_SetCurrentClientCertDetails* HttpConnectionManager_SetCurrentClientCertDetails::New(::google::protobuf::Arena* arena) const {
  HttpConnectionManager_SetCurrentClientCertDetails* n = new HttpConnectionManager_SetCurrentClientCertDetails;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HttpConnectionManager_SetCurrentClientCertDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.http.HttpConnectionManager.SetCurrentClientCertDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && subject_ != NULL) {
    delete subject_;
  }
  subject_ = NULL;
  if (GetArenaNoVirtual() == NULL && san_ != NULL) {
    delete san_;
  }
  san_ = NULL;
  _internal_metadata_.Clear();
}

bool HttpConnectionManager_SetCurrentClientCertDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.http.HttpConnectionManager.SetCurrentClientCertDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.BoolValue subject = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_subject()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue san = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_san()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.http.HttpConnectionManager.SetCurrentClientCertDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.http.HttpConnectionManager.SetCurrentClientCertDetails)
  return false;
#undef DO_
}

void HttpConnectionManager_SetCurrentClientCertDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.http.HttpConnectionManager.SetCurrentClientCertDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.BoolValue subject = 1;
  if (this->has_subject()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->subject_, output);
  }

  // .google.protobuf.BoolValue san = 2;
  if (this->has_san()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->san_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.http.HttpConnectionManager.SetCurrentClientCertDetails)
}

::google::protobuf::uint8* HttpConnectionManager_SetCurrentClientCertDetails::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.http.HttpConnectionManager.SetCurrentClientCertDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.BoolValue subject = 1;
  if (this->has_subject()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->subject_, deterministic, target);
  }

  // .google.protobuf.BoolValue san = 2;
  if (this->has_san()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->san_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.http.HttpConnectionManager.SetCurrentClientCertDetails)
  return target;
}

size_t HttpConnectionManager_SetCurrentClientCertDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.http.HttpConnectionManager.SetCurrentClientCertDetails)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.protobuf.BoolValue subject = 1;
  if (this->has_subject()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->subject_);
  }

  // .google.protobuf.BoolValue san = 2;
  if (this->has_san()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->san_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HttpConnectionManager_SetCurrentClientCertDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.http.HttpConnectionManager.SetCurrentClientCertDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const HttpConnectionManager_SetCurrentClientCertDetails* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HttpConnectionManager_SetCurrentClientCertDetails>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.http.HttpConnectionManager.SetCurrentClientCertDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.http.HttpConnectionManager.SetCurrentClientCertDetails)
    MergeFrom(*source);
  }
}

void HttpConnectionManager_SetCurrentClientCertDetails::MergeFrom(const HttpConnectionManager_SetCurrentClientCertDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.http.HttpConnectionManager.SetCurrentClientCertDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_subject()) {
    mutable_subject()->::google::protobuf::BoolValue::MergeFrom(from.subject());
  }
  if (from.has_san()) {
    mutable_san()->::google::protobuf::BoolValue::MergeFrom(from.san());
  }
}

void HttpConnectionManager_SetCurrentClientCertDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.http.HttpConnectionManager.SetCurrentClientCertDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HttpConnectionManager_SetCurrentClientCertDetails::CopyFrom(const HttpConnectionManager_SetCurrentClientCertDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.http.HttpConnectionManager.SetCurrentClientCertDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HttpConnectionManager_SetCurrentClientCertDetails::IsInitialized() const {
  return true;
}

void HttpConnectionManager_SetCurrentClientCertDetails::Swap(HttpConnectionManager_SetCurrentClientCertDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HttpConnectionManager_SetCurrentClientCertDetails::InternalSwap(HttpConnectionManager_SetCurrentClientCertDetails* other) {
  using std::swap;
  swap(subject_, other->subject_);
  swap(san_, other->san_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HttpConnectionManager_SetCurrentClientCertDetails::GetMetadata() const {
  protobuf_api_2ffilter_2fhttp_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2fhttp_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HttpConnectionManager::InitAsDefaultInstance() {
  ::envoy::api::v2::filter::http::_HttpConnectionManager_default_instance_.rds_ = const_cast< ::envoy::api::v2::filter::http::Rds*>(
      ::envoy::api::v2::filter::http::Rds::internal_default_instance());
  ::envoy::api::v2::filter::http::_HttpConnectionManager_default_instance_.route_config_ = const_cast< ::envoy::api::v2::RouteConfiguration*>(
      ::envoy::api::v2::RouteConfiguration::internal_default_instance());
  ::envoy::api::v2::filter::http::_HttpConnectionManager_default_instance_._instance.get_mutable()->add_user_agent_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
  ::envoy::api::v2::filter::http::_HttpConnectionManager_default_instance_._instance.get_mutable()->tracing_ = const_cast< ::envoy::api::v2::filter::http::HttpConnectionManager_Tracing*>(
      ::envoy::api::v2::filter::http::HttpConnectionManager_Tracing::internal_default_instance());
  ::envoy::api::v2::filter::http::_HttpConnectionManager_default_instance_._instance.get_mutable()->http_protocol_options_ = const_cast< ::envoy::api::v2::Http1ProtocolOptions*>(
      ::envoy::api::v2::Http1ProtocolOptions::internal_default_instance());
  ::envoy::api::v2::filter::http::_HttpConnectionManager_default_instance_._instance.get_mutable()->http2_protocol_options_ = const_cast< ::envoy::api::v2::Http2ProtocolOptions*>(
      ::envoy::api::v2::Http2ProtocolOptions::internal_default_instance());
  ::envoy::api::v2::filter::http::_HttpConnectionManager_default_instance_._instance.get_mutable()->idle_timeout_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  ::envoy::api::v2::filter::http::_HttpConnectionManager_default_instance_._instance.get_mutable()->drain_timeout_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  ::envoy::api::v2::filter::http::_HttpConnectionManager_default_instance_._instance.get_mutable()->use_remote_address_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
  ::envoy::api::v2::filter::http::_HttpConnectionManager_default_instance_._instance.get_mutable()->generate_request_id_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
  ::envoy::api::v2::filter::http::_HttpConnectionManager_default_instance_._instance.get_mutable()->set_current_client_cert_details_ = const_cast< ::envoy::api::v2::filter::http::HttpConnectionManager_SetCurrentClientCertDetails*>(
      ::envoy::api::v2::filter::http::HttpConnectionManager_SetCurrentClientCertDetails::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HttpConnectionManager::kCodecTypeFieldNumber;
const int HttpConnectionManager::kStatPrefixFieldNumber;
const int HttpConnectionManager::kRdsFieldNumber;
const int HttpConnectionManager::kRouteConfigFieldNumber;
const int HttpConnectionManager::kHttpFiltersFieldNumber;
const int HttpConnectionManager::kAddUserAgentFieldNumber;
const int HttpConnectionManager::kTracingFieldNumber;
const int HttpConnectionManager::kHttpProtocolOptionsFieldNumber;
const int HttpConnectionManager::kHttp2ProtocolOptionsFieldNumber;
const int HttpConnectionManager::kServerNameFieldNumber;
const int HttpConnectionManager::kIdleTimeoutFieldNumber;
const int HttpConnectionManager::kDrainTimeoutFieldNumber;
const int HttpConnectionManager::kAccessLogFieldNumber;
const int HttpConnectionManager::kUseRemoteAddressFieldNumber;
const int HttpConnectionManager::kGenerateRequestIdFieldNumber;
const int HttpConnectionManager::kForwardClientCertDetailsFieldNumber;
const int HttpConnectionManager::kSetCurrentClientCertDetailsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HttpConnectionManager::HttpConnectionManager()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2ffilter_2fhttp_2fhttp_5fconnection_5fmanager_2eproto::InitDefaultsHttpConnectionManager();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.http.HttpConnectionManager)
}
HttpConnectionManager::HttpConnectionManager(const HttpConnectionManager& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      http_filters_(from.http_filters_),
      access_log_(from.access_log_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stat_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stat_prefix().size() > 0) {
    stat_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stat_prefix_);
  }
  server_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.server_name().size() > 0) {
    server_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_name_);
  }
  if (from.has_add_user_agent()) {
    add_user_agent_ = new ::google::protobuf::BoolValue(*from.add_user_agent_);
  } else {
    add_user_agent_ = NULL;
  }
  if (from.has_tracing()) {
    tracing_ = new ::envoy::api::v2::filter::http::HttpConnectionManager_Tracing(*from.tracing_);
  } else {
    tracing_ = NULL;
  }
  if (from.has_http_protocol_options()) {
    http_protocol_options_ = new ::envoy::api::v2::Http1ProtocolOptions(*from.http_protocol_options_);
  } else {
    http_protocol_options_ = NULL;
  }
  if (from.has_http2_protocol_options()) {
    http2_protocol_options_ = new ::envoy::api::v2::Http2ProtocolOptions(*from.http2_protocol_options_);
  } else {
    http2_protocol_options_ = NULL;
  }
  if (from.has_idle_timeout()) {
    idle_timeout_ = new ::google::protobuf::Duration(*from.idle_timeout_);
  } else {
    idle_timeout_ = NULL;
  }
  if (from.has_drain_timeout()) {
    drain_timeout_ = new ::google::protobuf::Duration(*from.drain_timeout_);
  } else {
    drain_timeout_ = NULL;
  }
  if (from.has_use_remote_address()) {
    use_remote_address_ = new ::google::protobuf::BoolValue(*from.use_remote_address_);
  } else {
    use_remote_address_ = NULL;
  }
  if (from.has_generate_request_id()) {
    generate_request_id_ = new ::google::protobuf::BoolValue(*from.generate_request_id_);
  } else {
    generate_request_id_ = NULL;
  }
  if (from.has_set_current_client_cert_details()) {
    set_current_client_cert_details_ = new ::envoy::api::v2::filter::http::HttpConnectionManager_SetCurrentClientCertDetails(*from.set_current_client_cert_details_);
  } else {
    set_current_client_cert_details_ = NULL;
  }
  ::memcpy(&codec_type_, &from.codec_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&forward_client_cert_details_) -
    reinterpret_cast<char*>(&codec_type_)) + sizeof(forward_client_cert_details_));
  clear_has_route_specifier();
  switch (from.route_specifier_case()) {
    case kRds: {
      mutable_rds()->::envoy::api::v2::filter::http::Rds::MergeFrom(from.rds());
      break;
    }
    case kRouteConfig: {
      mutable_route_config()->::envoy::api::v2::RouteConfiguration::MergeFrom(from.route_config());
      break;
    }
    case ROUTE_SPECIFIER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.http.HttpConnectionManager)
}

void HttpConnectionManager::SharedCtor() {
  stat_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&add_user_agent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&forward_client_cert_details_) -
      reinterpret_cast<char*>(&add_user_agent_)) + sizeof(forward_client_cert_details_));
  clear_has_route_specifier();
  _cached_size_ = 0;
}

HttpConnectionManager::~HttpConnectionManager() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.http.HttpConnectionManager)
  SharedDtor();
}

void HttpConnectionManager::SharedDtor() {
  stat_prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete add_user_agent_;
  if (this != internal_default_instance()) delete tracing_;
  if (this != internal_default_instance()) delete http_protocol_options_;
  if (this != internal_default_instance()) delete http2_protocol_options_;
  if (this != internal_default_instance()) delete idle_timeout_;
  if (this != internal_default_instance()) delete drain_timeout_;
  if (this != internal_default_instance()) delete use_remote_address_;
  if (this != internal_default_instance()) delete generate_request_id_;
  if (this != internal_default_instance()) delete set_current_client_cert_details_;
  if (has_route_specifier()) {
    clear_route_specifier();
  }
}

void HttpConnectionManager::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HttpConnectionManager::descriptor() {
  ::protobuf_api_2ffilter_2fhttp_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2fhttp_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HttpConnectionManager& HttpConnectionManager::default_instance() {
  ::protobuf_api_2ffilter_2fhttp_2fhttp_5fconnection_5fmanager_2eproto::InitDefaultsHttpConnectionManager();
  return *internal_default_instance();
}

HttpConnectionManager* HttpConnectionManager::New(::google::protobuf::Arena* arena) const {
  HttpConnectionManager* n = new HttpConnectionManager;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HttpConnectionManager::clear_route_specifier() {
// @@protoc_insertion_point(one_of_clear_start:envoy.api.v2.filter.http.HttpConnectionManager)
  switch (route_specifier_case()) {
    case kRds: {
      delete route_specifier_.rds_;
      break;
    }
    case kRouteConfig: {
      delete route_specifier_.route_config_;
      break;
    }
    case ROUTE_SPECIFIER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ROUTE_SPECIFIER_NOT_SET;
}


void HttpConnectionManager::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.http.HttpConnectionManager)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  http_filters_.Clear();
  access_log_.Clear();
  stat_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && add_user_agent_ != NULL) {
    delete add_user_agent_;
  }
  add_user_agent_ = NULL;
  if (GetArenaNoVirtual() == NULL && tracing_ != NULL) {
    delete tracing_;
  }
  tracing_ = NULL;
  if (GetArenaNoVirtual() == NULL && http_protocol_options_ != NULL) {
    delete http_protocol_options_;
  }
  http_protocol_options_ = NULL;
  if (GetArenaNoVirtual() == NULL && http2_protocol_options_ != NULL) {
    delete http2_protocol_options_;
  }
  http2_protocol_options_ = NULL;
  if (GetArenaNoVirtual() == NULL && idle_timeout_ != NULL) {
    delete idle_timeout_;
  }
  idle_timeout_ = NULL;
  if (GetArenaNoVirtual() == NULL && drain_timeout_ != NULL) {
    delete drain_timeout_;
  }
  drain_timeout_ = NULL;
  if (GetArenaNoVirtual() == NULL && use_remote_address_ != NULL) {
    delete use_remote_address_;
  }
  use_remote_address_ = NULL;
  if (GetArenaNoVirtual() == NULL && generate_request_id_ != NULL) {
    delete generate_request_id_;
  }
  generate_request_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && set_current_client_cert_details_ != NULL) {
    delete set_current_client_cert_details_;
  }
  set_current_client_cert_details_ = NULL;
  ::memset(&codec_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&forward_client_cert_details_) -
      reinterpret_cast<char*>(&codec_type_)) + sizeof(forward_client_cert_details_));
  clear_route_specifier();
  _internal_metadata_.Clear();
}

bool HttpConnectionManager::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.http.HttpConnectionManager)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.filter.http.HttpConnectionManager.CodecType codec_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_codec_type(static_cast< ::envoy::api::v2::filter::http::HttpConnectionManager_CodecType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string stat_prefix = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stat_prefix()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stat_prefix().data(), static_cast<int>(this->stat_prefix().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.filter.http.HttpConnectionManager.stat_prefix"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.filter.http.Rds rds = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rds()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.RouteConfiguration route_config = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_route_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .envoy.api.v2.filter.http.HttpFilter http_filters = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_http_filters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue add_user_agent = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_add_user_agent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.filter.http.HttpConnectionManager.Tracing tracing = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tracing()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.Http1ProtocolOptions http_protocol_options = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_http_protocol_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.Http2ProtocolOptions http2_protocol_options = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_http2_protocol_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string server_name = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->server_name().data(), static_cast<int>(this->server_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.filter.http.HttpConnectionManager.server_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration idle_timeout = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_idle_timeout()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration drain_timeout = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_drain_timeout()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .envoy.api.v2.filter.AccessLog access_log = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_access_log()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue use_remote_address = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_use_remote_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue generate_request_id = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_generate_request_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.filter.http.HttpConnectionManager.ForwardClientCertDetails forward_client_cert_details = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_forward_client_cert_details(static_cast< ::envoy::api::v2::filter::http::HttpConnectionManager_ForwardClientCertDetails >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.filter.http.HttpConnectionManager.SetCurrentClientCertDetails set_current_client_cert_details = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_set_current_client_cert_details()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.http.HttpConnectionManager)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.http.HttpConnectionManager)
  return false;
#undef DO_
}

void HttpConnectionManager::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.http.HttpConnectionManager)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.filter.http.HttpConnectionManager.CodecType codec_type = 1;
  if (this->codec_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->codec_type(), output);
  }

  // string stat_prefix = 2;
  if (this->stat_prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stat_prefix().data(), static_cast<int>(this->stat_prefix().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.http.HttpConnectionManager.stat_prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->stat_prefix(), output);
  }

  // .envoy.api.v2.filter.http.Rds rds = 3;
  if (has_rds()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *route_specifier_.rds_, output);
  }

  // .envoy.api.v2.RouteConfiguration route_config = 4;
  if (has_route_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *route_specifier_.route_config_, output);
  }

  // repeated .envoy.api.v2.filter.http.HttpFilter http_filters = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->http_filters_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->http_filters(static_cast<int>(i)), output);
  }

  // .google.protobuf.BoolValue add_user_agent = 6;
  if (this->has_add_user_agent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->add_user_agent_, output);
  }

  // .envoy.api.v2.filter.http.HttpConnectionManager.Tracing tracing = 7;
  if (this->has_tracing()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->tracing_, output);
  }

  // .envoy.api.v2.Http1ProtocolOptions http_protocol_options = 8;
  if (this->has_http_protocol_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->http_protocol_options_, output);
  }

  // .envoy.api.v2.Http2ProtocolOptions http2_protocol_options = 9;
  if (this->has_http2_protocol_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->http2_protocol_options_, output);
  }

  // string server_name = 10;
  if (this->server_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->server_name().data(), static_cast<int>(this->server_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.http.HttpConnectionManager.server_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->server_name(), output);
  }

  // .google.protobuf.Duration idle_timeout = 11;
  if (this->has_idle_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->idle_timeout_, output);
  }

  // .google.protobuf.Duration drain_timeout = 12;
  if (this->has_drain_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->drain_timeout_, output);
  }

  // repeated .envoy.api.v2.filter.AccessLog access_log = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->access_log_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->access_log(static_cast<int>(i)), output);
  }

  // .google.protobuf.BoolValue use_remote_address = 14;
  if (this->has_use_remote_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->use_remote_address_, output);
  }

  // .google.protobuf.BoolValue generate_request_id = 15;
  if (this->has_generate_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->generate_request_id_, output);
  }

  // .envoy.api.v2.filter.http.HttpConnectionManager.ForwardClientCertDetails forward_client_cert_details = 16;
  if (this->forward_client_cert_details() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->forward_client_cert_details(), output);
  }

  // .envoy.api.v2.filter.http.HttpConnectionManager.SetCurrentClientCertDetails set_current_client_cert_details = 17;
  if (this->has_set_current_client_cert_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->set_current_client_cert_details_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.http.HttpConnectionManager)
}

::google::protobuf::uint8* HttpConnectionManager::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.http.HttpConnectionManager)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.filter.http.HttpConnectionManager.CodecType codec_type = 1;
  if (this->codec_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->codec_type(), target);
  }

  // string stat_prefix = 2;
  if (this->stat_prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stat_prefix().data(), static_cast<int>(this->stat_prefix().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.http.HttpConnectionManager.stat_prefix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->stat_prefix(), target);
  }

  // .envoy.api.v2.filter.http.Rds rds = 3;
  if (has_rds()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *route_specifier_.rds_, deterministic, target);
  }

  // .envoy.api.v2.RouteConfiguration route_config = 4;
  if (has_route_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *route_specifier_.route_config_, deterministic, target);
  }

  // repeated .envoy.api.v2.filter.http.HttpFilter http_filters = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->http_filters_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->http_filters(static_cast<int>(i)), deterministic, target);
  }

  // .google.protobuf.BoolValue add_user_agent = 6;
  if (this->has_add_user_agent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->add_user_agent_, deterministic, target);
  }

  // .envoy.api.v2.filter.http.HttpConnectionManager.Tracing tracing = 7;
  if (this->has_tracing()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->tracing_, deterministic, target);
  }

  // .envoy.api.v2.Http1ProtocolOptions http_protocol_options = 8;
  if (this->has_http_protocol_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->http_protocol_options_, deterministic, target);
  }

  // .envoy.api.v2.Http2ProtocolOptions http2_protocol_options = 9;
  if (this->has_http2_protocol_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->http2_protocol_options_, deterministic, target);
  }

  // string server_name = 10;
  if (this->server_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->server_name().data(), static_cast<int>(this->server_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.http.HttpConnectionManager.server_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->server_name(), target);
  }

  // .google.protobuf.Duration idle_timeout = 11;
  if (this->has_idle_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->idle_timeout_, deterministic, target);
  }

  // .google.protobuf.Duration drain_timeout = 12;
  if (this->has_drain_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->drain_timeout_, deterministic, target);
  }

  // repeated .envoy.api.v2.filter.AccessLog access_log = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->access_log_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, this->access_log(static_cast<int>(i)), deterministic, target);
  }

  // .google.protobuf.BoolValue use_remote_address = 14;
  if (this->has_use_remote_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->use_remote_address_, deterministic, target);
  }

  // .google.protobuf.BoolValue generate_request_id = 15;
  if (this->has_generate_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->generate_request_id_, deterministic, target);
  }

  // .envoy.api.v2.filter.http.HttpConnectionManager.ForwardClientCertDetails forward_client_cert_details = 16;
  if (this->forward_client_cert_details() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->forward_client_cert_details(), target);
  }

  // .envoy.api.v2.filter.http.HttpConnectionManager.SetCurrentClientCertDetails set_current_client_cert_details = 17;
  if (this->has_set_current_client_cert_details()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *this->set_current_client_cert_details_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.http.HttpConnectionManager)
  return target;
}

size_t HttpConnectionManager::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.http.HttpConnectionManager)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .envoy.api.v2.filter.http.HttpFilter http_filters = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->http_filters_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->http_filters(static_cast<int>(i)));
    }
  }

  // repeated .envoy.api.v2.filter.AccessLog access_log = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->access_log_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->access_log(static_cast<int>(i)));
    }
  }

  // string stat_prefix = 2;
  if (this->stat_prefix().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stat_prefix());
  }

  // string server_name = 10;
  if (this->server_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->server_name());
  }

  // .google.protobuf.BoolValue add_user_agent = 6;
  if (this->has_add_user_agent()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->add_user_agent_);
  }

  // .envoy.api.v2.filter.http.HttpConnectionManager.Tracing tracing = 7;
  if (this->has_tracing()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->tracing_);
  }

  // .envoy.api.v2.Http1ProtocolOptions http_protocol_options = 8;
  if (this->has_http_protocol_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->http_protocol_options_);
  }

  // .envoy.api.v2.Http2ProtocolOptions http2_protocol_options = 9;
  if (this->has_http2_protocol_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->http2_protocol_options_);
  }

  // .google.protobuf.Duration idle_timeout = 11;
  if (this->has_idle_timeout()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->idle_timeout_);
  }

  // .google.protobuf.Duration drain_timeout = 12;
  if (this->has_drain_timeout()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->drain_timeout_);
  }

  // .google.protobuf.BoolValue use_remote_address = 14;
  if (this->has_use_remote_address()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->use_remote_address_);
  }

  // .google.protobuf.BoolValue generate_request_id = 15;
  if (this->has_generate_request_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->generate_request_id_);
  }

  // .envoy.api.v2.filter.http.HttpConnectionManager.SetCurrentClientCertDetails set_current_client_cert_details = 17;
  if (this->has_set_current_client_cert_details()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->set_current_client_cert_details_);
  }

  // .envoy.api.v2.filter.http.HttpConnectionManager.CodecType codec_type = 1;
  if (this->codec_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->codec_type());
  }

  // .envoy.api.v2.filter.http.HttpConnectionManager.ForwardClientCertDetails forward_client_cert_details = 16;
  if (this->forward_client_cert_details() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->forward_client_cert_details());
  }

  switch (route_specifier_case()) {
    // .envoy.api.v2.filter.http.Rds rds = 3;
    case kRds: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *route_specifier_.rds_);
      break;
    }
    // .envoy.api.v2.RouteConfiguration route_config = 4;
    case kRouteConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *route_specifier_.route_config_);
      break;
    }
    case ROUTE_SPECIFIER_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HttpConnectionManager::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.http.HttpConnectionManager)
  GOOGLE_DCHECK_NE(&from, this);
  const HttpConnectionManager* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HttpConnectionManager>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.http.HttpConnectionManager)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.http.HttpConnectionManager)
    MergeFrom(*source);
  }
}

void HttpConnectionManager::MergeFrom(const HttpConnectionManager& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.http.HttpConnectionManager)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  http_filters_.MergeFrom(from.http_filters_);
  access_log_.MergeFrom(from.access_log_);
  if (from.stat_prefix().size() > 0) {

    stat_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stat_prefix_);
  }
  if (from.server_name().size() > 0) {

    server_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_name_);
  }
  if (from.has_add_user_agent()) {
    mutable_add_user_agent()->::google::protobuf::BoolValue::MergeFrom(from.add_user_agent());
  }
  if (from.has_tracing()) {
    mutable_tracing()->::envoy::api::v2::filter::http::HttpConnectionManager_Tracing::MergeFrom(from.tracing());
  }
  if (from.has_http_protocol_options()) {
    mutable_http_protocol_options()->::envoy::api::v2::Http1ProtocolOptions::MergeFrom(from.http_protocol_options());
  }
  if (from.has_http2_protocol_options()) {
    mutable_http2_protocol_options()->::envoy::api::v2::Http2ProtocolOptions::MergeFrom(from.http2_protocol_options());
  }
  if (from.has_idle_timeout()) {
    mutable_idle_timeout()->::google::protobuf::Duration::MergeFrom(from.idle_timeout());
  }
  if (from.has_drain_timeout()) {
    mutable_drain_timeout()->::google::protobuf::Duration::MergeFrom(from.drain_timeout());
  }
  if (from.has_use_remote_address()) {
    mutable_use_remote_address()->::google::protobuf::BoolValue::MergeFrom(from.use_remote_address());
  }
  if (from.has_generate_request_id()) {
    mutable_generate_request_id()->::google::protobuf::BoolValue::MergeFrom(from.generate_request_id());
  }
  if (from.has_set_current_client_cert_details()) {
    mutable_set_current_client_cert_details()->::envoy::api::v2::filter::http::HttpConnectionManager_SetCurrentClientCertDetails::MergeFrom(from.set_current_client_cert_details());
  }
  if (from.codec_type() != 0) {
    set_codec_type(from.codec_type());
  }
  if (from.forward_client_cert_details() != 0) {
    set_forward_client_cert_details(from.forward_client_cert_details());
  }
  switch (from.route_specifier_case()) {
    case kRds: {
      mutable_rds()->::envoy::api::v2::filter::http::Rds::MergeFrom(from.rds());
      break;
    }
    case kRouteConfig: {
      mutable_route_config()->::envoy::api::v2::RouteConfiguration::MergeFrom(from.route_config());
      break;
    }
    case ROUTE_SPECIFIER_NOT_SET: {
      break;
    }
  }
}

void HttpConnectionManager::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.http.HttpConnectionManager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HttpConnectionManager::CopyFrom(const HttpConnectionManager& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.http.HttpConnectionManager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HttpConnectionManager::IsInitialized() const {
  return true;
}

void HttpConnectionManager::Swap(HttpConnectionManager* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HttpConnectionManager::InternalSwap(HttpConnectionManager* other) {
  using std::swap;
  http_filters_.InternalSwap(&other->http_filters_);
  access_log_.InternalSwap(&other->access_log_);
  stat_prefix_.Swap(&other->stat_prefix_);
  server_name_.Swap(&other->server_name_);
  swap(add_user_agent_, other->add_user_agent_);
  swap(tracing_, other->tracing_);
  swap(http_protocol_options_, other->http_protocol_options_);
  swap(http2_protocol_options_, other->http2_protocol_options_);
  swap(idle_timeout_, other->idle_timeout_);
  swap(drain_timeout_, other->drain_timeout_);
  swap(use_remote_address_, other->use_remote_address_);
  swap(generate_request_id_, other->generate_request_id_);
  swap(set_current_client_cert_details_, other->set_current_client_cert_details_);
  swap(codec_type_, other->codec_type_);
  swap(forward_client_cert_details_, other->forward_client_cert_details_);
  swap(route_specifier_, other->route_specifier_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HttpConnectionManager::GetMetadata() const {
  protobuf_api_2ffilter_2fhttp_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2fhttp_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace http
}  // namespace filter
}  // namespace v2
}  // namespace api
}  // namespace envoy

// @@protoc_insertion_point(global_scope)
