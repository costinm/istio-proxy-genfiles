// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/filter/http/http_connection_manager.proto

#ifndef PROTOBUF_api_2ffilter_2fhttp_2fhttp_5fconnection_5fmanager_2eproto__INCLUDED
#define PROTOBUF_api_2ffilter_2fhttp_2fhttp_5fconnection_5fmanager_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "api/base.pb.h"
#include "api/protocol.pb.h"
#include "api/rds.pb.h"
#include "api/filter/accesslog.pb.h"
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/struct.pb.h>
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)

namespace protobuf_api_2ffilter_2fhttp_2fhttp_5fconnection_5fmanager_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsRdsImpl();
void InitDefaultsRds();
void InitDefaultsHttpFilter_DeprecatedV1Impl();
void InitDefaultsHttpFilter_DeprecatedV1();
void InitDefaultsHttpFilterImpl();
void InitDefaultsHttpFilter();
void InitDefaultsHttpConnectionManager_TracingImpl();
void InitDefaultsHttpConnectionManager_Tracing();
void InitDefaultsHttpConnectionManager_SetCurrentClientCertDetailsImpl();
void InitDefaultsHttpConnectionManager_SetCurrentClientCertDetails();
void InitDefaultsHttpConnectionManagerImpl();
void InitDefaultsHttpConnectionManager();
inline void InitDefaults() {
  InitDefaultsRds();
  InitDefaultsHttpFilter_DeprecatedV1();
  InitDefaultsHttpFilter();
  InitDefaultsHttpConnectionManager_Tracing();
  InitDefaultsHttpConnectionManager_SetCurrentClientCertDetails();
  InitDefaultsHttpConnectionManager();
}
}  // namespace protobuf_api_2ffilter_2fhttp_2fhttp_5fconnection_5fmanager_2eproto
namespace envoy {
namespace api {
namespace v2 {
namespace filter {
namespace http {
class HttpConnectionManager;
class HttpConnectionManagerDefaultTypeInternal;
extern HttpConnectionManagerDefaultTypeInternal _HttpConnectionManager_default_instance_;
class HttpConnectionManager_SetCurrentClientCertDetails;
class HttpConnectionManager_SetCurrentClientCertDetailsDefaultTypeInternal;
extern HttpConnectionManager_SetCurrentClientCertDetailsDefaultTypeInternal _HttpConnectionManager_SetCurrentClientCertDetails_default_instance_;
class HttpConnectionManager_Tracing;
class HttpConnectionManager_TracingDefaultTypeInternal;
extern HttpConnectionManager_TracingDefaultTypeInternal _HttpConnectionManager_Tracing_default_instance_;
class HttpFilter;
class HttpFilterDefaultTypeInternal;
extern HttpFilterDefaultTypeInternal _HttpFilter_default_instance_;
class HttpFilter_DeprecatedV1;
class HttpFilter_DeprecatedV1DefaultTypeInternal;
extern HttpFilter_DeprecatedV1DefaultTypeInternal _HttpFilter_DeprecatedV1_default_instance_;
class Rds;
class RdsDefaultTypeInternal;
extern RdsDefaultTypeInternal _Rds_default_instance_;
}  // namespace http
}  // namespace filter
}  // namespace v2
}  // namespace api
}  // namespace envoy
namespace envoy {
namespace api {
namespace v2 {
namespace filter {
namespace http {

enum HttpConnectionManager_Tracing_OperationName {
  HttpConnectionManager_Tracing_OperationName_INGRESS = 0,
  HttpConnectionManager_Tracing_OperationName_EGRESS = 1,
  HttpConnectionManager_Tracing_OperationName_HttpConnectionManager_Tracing_OperationName_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  HttpConnectionManager_Tracing_OperationName_HttpConnectionManager_Tracing_OperationName_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool HttpConnectionManager_Tracing_OperationName_IsValid(int value);
const HttpConnectionManager_Tracing_OperationName HttpConnectionManager_Tracing_OperationName_OperationName_MIN = HttpConnectionManager_Tracing_OperationName_INGRESS;
const HttpConnectionManager_Tracing_OperationName HttpConnectionManager_Tracing_OperationName_OperationName_MAX = HttpConnectionManager_Tracing_OperationName_EGRESS;
const int HttpConnectionManager_Tracing_OperationName_OperationName_ARRAYSIZE = HttpConnectionManager_Tracing_OperationName_OperationName_MAX + 1;

const ::google::protobuf::EnumDescriptor* HttpConnectionManager_Tracing_OperationName_descriptor();
inline const ::std::string& HttpConnectionManager_Tracing_OperationName_Name(HttpConnectionManager_Tracing_OperationName value) {
  return ::google::protobuf::internal::NameOfEnum(
    HttpConnectionManager_Tracing_OperationName_descriptor(), value);
}
inline bool HttpConnectionManager_Tracing_OperationName_Parse(
    const ::std::string& name, HttpConnectionManager_Tracing_OperationName* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HttpConnectionManager_Tracing_OperationName>(
    HttpConnectionManager_Tracing_OperationName_descriptor(), name, value);
}
enum HttpConnectionManager_CodecType {
  HttpConnectionManager_CodecType_AUTO = 0,
  HttpConnectionManager_CodecType_HTTP1 = 1,
  HttpConnectionManager_CodecType_HTTP2 = 2,
  HttpConnectionManager_CodecType_HttpConnectionManager_CodecType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  HttpConnectionManager_CodecType_HttpConnectionManager_CodecType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool HttpConnectionManager_CodecType_IsValid(int value);
const HttpConnectionManager_CodecType HttpConnectionManager_CodecType_CodecType_MIN = HttpConnectionManager_CodecType_AUTO;
const HttpConnectionManager_CodecType HttpConnectionManager_CodecType_CodecType_MAX = HttpConnectionManager_CodecType_HTTP2;
const int HttpConnectionManager_CodecType_CodecType_ARRAYSIZE = HttpConnectionManager_CodecType_CodecType_MAX + 1;

const ::google::protobuf::EnumDescriptor* HttpConnectionManager_CodecType_descriptor();
inline const ::std::string& HttpConnectionManager_CodecType_Name(HttpConnectionManager_CodecType value) {
  return ::google::protobuf::internal::NameOfEnum(
    HttpConnectionManager_CodecType_descriptor(), value);
}
inline bool HttpConnectionManager_CodecType_Parse(
    const ::std::string& name, HttpConnectionManager_CodecType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HttpConnectionManager_CodecType>(
    HttpConnectionManager_CodecType_descriptor(), name, value);
}
enum HttpConnectionManager_ForwardClientCertDetails {
  HttpConnectionManager_ForwardClientCertDetails_SANITIZE = 0,
  HttpConnectionManager_ForwardClientCertDetails_FORWARD_ONLY = 1,
  HttpConnectionManager_ForwardClientCertDetails_APPEND_FORWARD = 2,
  HttpConnectionManager_ForwardClientCertDetails_SANITIZE_SET = 3,
  HttpConnectionManager_ForwardClientCertDetails_ALWAYS_FORWARD_ONLY = 4,
  HttpConnectionManager_ForwardClientCertDetails_HttpConnectionManager_ForwardClientCertDetails_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  HttpConnectionManager_ForwardClientCertDetails_HttpConnectionManager_ForwardClientCertDetails_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool HttpConnectionManager_ForwardClientCertDetails_IsValid(int value);
const HttpConnectionManager_ForwardClientCertDetails HttpConnectionManager_ForwardClientCertDetails_ForwardClientCertDetails_MIN = HttpConnectionManager_ForwardClientCertDetails_SANITIZE;
const HttpConnectionManager_ForwardClientCertDetails HttpConnectionManager_ForwardClientCertDetails_ForwardClientCertDetails_MAX = HttpConnectionManager_ForwardClientCertDetails_ALWAYS_FORWARD_ONLY;
const int HttpConnectionManager_ForwardClientCertDetails_ForwardClientCertDetails_ARRAYSIZE = HttpConnectionManager_ForwardClientCertDetails_ForwardClientCertDetails_MAX + 1;

const ::google::protobuf::EnumDescriptor* HttpConnectionManager_ForwardClientCertDetails_descriptor();
inline const ::std::string& HttpConnectionManager_ForwardClientCertDetails_Name(HttpConnectionManager_ForwardClientCertDetails value) {
  return ::google::protobuf::internal::NameOfEnum(
    HttpConnectionManager_ForwardClientCertDetails_descriptor(), value);
}
inline bool HttpConnectionManager_ForwardClientCertDetails_Parse(
    const ::std::string& name, HttpConnectionManager_ForwardClientCertDetails* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HttpConnectionManager_ForwardClientCertDetails>(
    HttpConnectionManager_ForwardClientCertDetails_descriptor(), name, value);
}
// ===================================================================

class Rds : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.filter.http.Rds) */ {
 public:
  Rds();
  virtual ~Rds();

  Rds(const Rds& from);

  inline Rds& operator=(const Rds& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rds(Rds&& from) noexcept
    : Rds() {
    *this = ::std::move(from);
  }

  inline Rds& operator=(Rds&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Rds& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rds* internal_default_instance() {
    return reinterpret_cast<const Rds*>(
               &_Rds_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Rds* other);
  friend void swap(Rds& a, Rds& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rds* New() const PROTOBUF_FINAL { return New(NULL); }

  Rds* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Rds& from);
  void MergeFrom(const Rds& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Rds* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string route_config_name = 2;
  void clear_route_config_name();
  static const int kRouteConfigNameFieldNumber = 2;
  const ::std::string& route_config_name() const;
  void set_route_config_name(const ::std::string& value);
  #if LANG_CXX11
  void set_route_config_name(::std::string&& value);
  #endif
  void set_route_config_name(const char* value);
  void set_route_config_name(const char* value, size_t size);
  ::std::string* mutable_route_config_name();
  ::std::string* release_route_config_name();
  void set_allocated_route_config_name(::std::string* route_config_name);

  // .envoy.api.v2.ConfigSource config_source = 1;
  bool has_config_source() const;
  void clear_config_source();
  static const int kConfigSourceFieldNumber = 1;
  const ::envoy::api::v2::ConfigSource& config_source() const;
  ::envoy::api::v2::ConfigSource* release_config_source();
  ::envoy::api::v2::ConfigSource* mutable_config_source();
  void set_allocated_config_source(::envoy::api::v2::ConfigSource* config_source);

  // @@protoc_insertion_point(class_scope:envoy.api.v2.filter.http.Rds)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr route_config_name_;
  ::envoy::api::v2::ConfigSource* config_source_;
  mutable int _cached_size_;
  friend struct ::protobuf_api_2ffilter_2fhttp_2fhttp_5fconnection_5fmanager_2eproto::TableStruct;
  friend void ::protobuf_api_2ffilter_2fhttp_2fhttp_5fconnection_5fmanager_2eproto::InitDefaultsRdsImpl();
};
// -------------------------------------------------------------------

class HttpFilter_DeprecatedV1 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.filter.http.HttpFilter.DeprecatedV1) */ {
 public:
  HttpFilter_DeprecatedV1();
  virtual ~HttpFilter_DeprecatedV1();

  HttpFilter_DeprecatedV1(const HttpFilter_DeprecatedV1& from);

  inline HttpFilter_DeprecatedV1& operator=(const HttpFilter_DeprecatedV1& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HttpFilter_DeprecatedV1(HttpFilter_DeprecatedV1&& from) noexcept
    : HttpFilter_DeprecatedV1() {
    *this = ::std::move(from);
  }

  inline HttpFilter_DeprecatedV1& operator=(HttpFilter_DeprecatedV1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HttpFilter_DeprecatedV1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HttpFilter_DeprecatedV1* internal_default_instance() {
    return reinterpret_cast<const HttpFilter_DeprecatedV1*>(
               &_HttpFilter_DeprecatedV1_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(HttpFilter_DeprecatedV1* other);
  friend void swap(HttpFilter_DeprecatedV1& a, HttpFilter_DeprecatedV1& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HttpFilter_DeprecatedV1* New() const PROTOBUF_FINAL { return New(NULL); }

  HttpFilter_DeprecatedV1* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HttpFilter_DeprecatedV1& from);
  void MergeFrom(const HttpFilter_DeprecatedV1& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HttpFilter_DeprecatedV1* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // @@protoc_insertion_point(class_scope:envoy.api.v2.filter.http.HttpFilter.DeprecatedV1)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  mutable int _cached_size_;
  friend struct ::protobuf_api_2ffilter_2fhttp_2fhttp_5fconnection_5fmanager_2eproto::TableStruct;
  friend void ::protobuf_api_2ffilter_2fhttp_2fhttp_5fconnection_5fmanager_2eproto::InitDefaultsHttpFilter_DeprecatedV1Impl();
};
// -------------------------------------------------------------------

class HttpFilter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.filter.http.HttpFilter) */ {
 public:
  HttpFilter();
  virtual ~HttpFilter();

  HttpFilter(const HttpFilter& from);

  inline HttpFilter& operator=(const HttpFilter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HttpFilter(HttpFilter&& from) noexcept
    : HttpFilter() {
    *this = ::std::move(from);
  }

  inline HttpFilter& operator=(HttpFilter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HttpFilter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HttpFilter* internal_default_instance() {
    return reinterpret_cast<const HttpFilter*>(
               &_HttpFilter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(HttpFilter* other);
  friend void swap(HttpFilter& a, HttpFilter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HttpFilter* New() const PROTOBUF_FINAL { return New(NULL); }

  HttpFilter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HttpFilter& from);
  void MergeFrom(const HttpFilter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HttpFilter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef HttpFilter_DeprecatedV1 DeprecatedV1;

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .google.protobuf.Struct config = 2;
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 2;
  const ::google::protobuf::Struct& config() const;
  ::google::protobuf::Struct* release_config();
  ::google::protobuf::Struct* mutable_config();
  void set_allocated_config(::google::protobuf::Struct* config);

  // .envoy.api.v2.filter.http.HttpFilter.DeprecatedV1 deprecated_v1 = 3;
  bool has_deprecated_v1() const;
  void clear_deprecated_v1();
  static const int kDeprecatedV1FieldNumber = 3;
  const ::envoy::api::v2::filter::http::HttpFilter_DeprecatedV1& deprecated_v1() const;
  ::envoy::api::v2::filter::http::HttpFilter_DeprecatedV1* release_deprecated_v1();
  ::envoy::api::v2::filter::http::HttpFilter_DeprecatedV1* mutable_deprecated_v1();
  void set_allocated_deprecated_v1(::envoy::api::v2::filter::http::HttpFilter_DeprecatedV1* deprecated_v1);

  // @@protoc_insertion_point(class_scope:envoy.api.v2.filter.http.HttpFilter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::Struct* config_;
  ::envoy::api::v2::filter::http::HttpFilter_DeprecatedV1* deprecated_v1_;
  mutable int _cached_size_;
  friend struct ::protobuf_api_2ffilter_2fhttp_2fhttp_5fconnection_5fmanager_2eproto::TableStruct;
  friend void ::protobuf_api_2ffilter_2fhttp_2fhttp_5fconnection_5fmanager_2eproto::InitDefaultsHttpFilterImpl();
};
// -------------------------------------------------------------------

class HttpConnectionManager_Tracing : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.filter.http.HttpConnectionManager.Tracing) */ {
 public:
  HttpConnectionManager_Tracing();
  virtual ~HttpConnectionManager_Tracing();

  HttpConnectionManager_Tracing(const HttpConnectionManager_Tracing& from);

  inline HttpConnectionManager_Tracing& operator=(const HttpConnectionManager_Tracing& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HttpConnectionManager_Tracing(HttpConnectionManager_Tracing&& from) noexcept
    : HttpConnectionManager_Tracing() {
    *this = ::std::move(from);
  }

  inline HttpConnectionManager_Tracing& operator=(HttpConnectionManager_Tracing&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HttpConnectionManager_Tracing& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HttpConnectionManager_Tracing* internal_default_instance() {
    return reinterpret_cast<const HttpConnectionManager_Tracing*>(
               &_HttpConnectionManager_Tracing_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(HttpConnectionManager_Tracing* other);
  friend void swap(HttpConnectionManager_Tracing& a, HttpConnectionManager_Tracing& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HttpConnectionManager_Tracing* New() const PROTOBUF_FINAL { return New(NULL); }

  HttpConnectionManager_Tracing* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HttpConnectionManager_Tracing& from);
  void MergeFrom(const HttpConnectionManager_Tracing& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HttpConnectionManager_Tracing* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef HttpConnectionManager_Tracing_OperationName OperationName;
  static const OperationName INGRESS =
    HttpConnectionManager_Tracing_OperationName_INGRESS;
  static const OperationName EGRESS =
    HttpConnectionManager_Tracing_OperationName_EGRESS;
  static inline bool OperationName_IsValid(int value) {
    return HttpConnectionManager_Tracing_OperationName_IsValid(value);
  }
  static const OperationName OperationName_MIN =
    HttpConnectionManager_Tracing_OperationName_OperationName_MIN;
  static const OperationName OperationName_MAX =
    HttpConnectionManager_Tracing_OperationName_OperationName_MAX;
  static const int OperationName_ARRAYSIZE =
    HttpConnectionManager_Tracing_OperationName_OperationName_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OperationName_descriptor() {
    return HttpConnectionManager_Tracing_OperationName_descriptor();
  }
  static inline const ::std::string& OperationName_Name(OperationName value) {
    return HttpConnectionManager_Tracing_OperationName_Name(value);
  }
  static inline bool OperationName_Parse(const ::std::string& name,
      OperationName* value) {
    return HttpConnectionManager_Tracing_OperationName_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string request_headers_for_tags = 2;
  int request_headers_for_tags_size() const;
  void clear_request_headers_for_tags();
  static const int kRequestHeadersForTagsFieldNumber = 2;
  const ::std::string& request_headers_for_tags(int index) const;
  ::std::string* mutable_request_headers_for_tags(int index);
  void set_request_headers_for_tags(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_request_headers_for_tags(int index, ::std::string&& value);
  #endif
  void set_request_headers_for_tags(int index, const char* value);
  void set_request_headers_for_tags(int index, const char* value, size_t size);
  ::std::string* add_request_headers_for_tags();
  void add_request_headers_for_tags(const ::std::string& value);
  #if LANG_CXX11
  void add_request_headers_for_tags(::std::string&& value);
  #endif
  void add_request_headers_for_tags(const char* value);
  void add_request_headers_for_tags(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& request_headers_for_tags() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_request_headers_for_tags();

  // .envoy.api.v2.filter.http.HttpConnectionManager.Tracing.OperationName operation_name = 1;
  void clear_operation_name();
  static const int kOperationNameFieldNumber = 1;
  ::envoy::api::v2::filter::http::HttpConnectionManager_Tracing_OperationName operation_name() const;
  void set_operation_name(::envoy::api::v2::filter::http::HttpConnectionManager_Tracing_OperationName value);

  // @@protoc_insertion_point(class_scope:envoy.api.v2.filter.http.HttpConnectionManager.Tracing)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> request_headers_for_tags_;
  int operation_name_;
  mutable int _cached_size_;
  friend struct ::protobuf_api_2ffilter_2fhttp_2fhttp_5fconnection_5fmanager_2eproto::TableStruct;
  friend void ::protobuf_api_2ffilter_2fhttp_2fhttp_5fconnection_5fmanager_2eproto::InitDefaultsHttpConnectionManager_TracingImpl();
};
// -------------------------------------------------------------------

class HttpConnectionManager_SetCurrentClientCertDetails : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.filter.http.HttpConnectionManager.SetCurrentClientCertDetails) */ {
 public:
  HttpConnectionManager_SetCurrentClientCertDetails();
  virtual ~HttpConnectionManager_SetCurrentClientCertDetails();

  HttpConnectionManager_SetCurrentClientCertDetails(const HttpConnectionManager_SetCurrentClientCertDetails& from);

  inline HttpConnectionManager_SetCurrentClientCertDetails& operator=(const HttpConnectionManager_SetCurrentClientCertDetails& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HttpConnectionManager_SetCurrentClientCertDetails(HttpConnectionManager_SetCurrentClientCertDetails&& from) noexcept
    : HttpConnectionManager_SetCurrentClientCertDetails() {
    *this = ::std::move(from);
  }

  inline HttpConnectionManager_SetCurrentClientCertDetails& operator=(HttpConnectionManager_SetCurrentClientCertDetails&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HttpConnectionManager_SetCurrentClientCertDetails& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HttpConnectionManager_SetCurrentClientCertDetails* internal_default_instance() {
    return reinterpret_cast<const HttpConnectionManager_SetCurrentClientCertDetails*>(
               &_HttpConnectionManager_SetCurrentClientCertDetails_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(HttpConnectionManager_SetCurrentClientCertDetails* other);
  friend void swap(HttpConnectionManager_SetCurrentClientCertDetails& a, HttpConnectionManager_SetCurrentClientCertDetails& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HttpConnectionManager_SetCurrentClientCertDetails* New() const PROTOBUF_FINAL { return New(NULL); }

  HttpConnectionManager_SetCurrentClientCertDetails* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HttpConnectionManager_SetCurrentClientCertDetails& from);
  void MergeFrom(const HttpConnectionManager_SetCurrentClientCertDetails& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HttpConnectionManager_SetCurrentClientCertDetails* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.BoolValue subject = 1;
  bool has_subject() const;
  void clear_subject();
  static const int kSubjectFieldNumber = 1;
  const ::google::protobuf::BoolValue& subject() const;
  ::google::protobuf::BoolValue* release_subject();
  ::google::protobuf::BoolValue* mutable_subject();
  void set_allocated_subject(::google::protobuf::BoolValue* subject);

  // .google.protobuf.BoolValue san = 2;
  bool has_san() const;
  void clear_san();
  static const int kSanFieldNumber = 2;
  const ::google::protobuf::BoolValue& san() const;
  ::google::protobuf::BoolValue* release_san();
  ::google::protobuf::BoolValue* mutable_san();
  void set_allocated_san(::google::protobuf::BoolValue* san);

  // @@protoc_insertion_point(class_scope:envoy.api.v2.filter.http.HttpConnectionManager.SetCurrentClientCertDetails)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::BoolValue* subject_;
  ::google::protobuf::BoolValue* san_;
  mutable int _cached_size_;
  friend struct ::protobuf_api_2ffilter_2fhttp_2fhttp_5fconnection_5fmanager_2eproto::TableStruct;
  friend void ::protobuf_api_2ffilter_2fhttp_2fhttp_5fconnection_5fmanager_2eproto::InitDefaultsHttpConnectionManager_SetCurrentClientCertDetailsImpl();
};
// -------------------------------------------------------------------

class HttpConnectionManager : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.filter.http.HttpConnectionManager) */ {
 public:
  HttpConnectionManager();
  virtual ~HttpConnectionManager();

  HttpConnectionManager(const HttpConnectionManager& from);

  inline HttpConnectionManager& operator=(const HttpConnectionManager& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HttpConnectionManager(HttpConnectionManager&& from) noexcept
    : HttpConnectionManager() {
    *this = ::std::move(from);
  }

  inline HttpConnectionManager& operator=(HttpConnectionManager&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HttpConnectionManager& default_instance();

  enum RouteSpecifierCase {
    kRds = 3,
    kRouteConfig = 4,
    ROUTE_SPECIFIER_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HttpConnectionManager* internal_default_instance() {
    return reinterpret_cast<const HttpConnectionManager*>(
               &_HttpConnectionManager_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(HttpConnectionManager* other);
  friend void swap(HttpConnectionManager& a, HttpConnectionManager& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HttpConnectionManager* New() const PROTOBUF_FINAL { return New(NULL); }

  HttpConnectionManager* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HttpConnectionManager& from);
  void MergeFrom(const HttpConnectionManager& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HttpConnectionManager* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef HttpConnectionManager_Tracing Tracing;
  typedef HttpConnectionManager_SetCurrentClientCertDetails SetCurrentClientCertDetails;

  typedef HttpConnectionManager_CodecType CodecType;
  static const CodecType AUTO =
    HttpConnectionManager_CodecType_AUTO;
  static const CodecType HTTP1 =
    HttpConnectionManager_CodecType_HTTP1;
  static const CodecType HTTP2 =
    HttpConnectionManager_CodecType_HTTP2;
  static inline bool CodecType_IsValid(int value) {
    return HttpConnectionManager_CodecType_IsValid(value);
  }
  static const CodecType CodecType_MIN =
    HttpConnectionManager_CodecType_CodecType_MIN;
  static const CodecType CodecType_MAX =
    HttpConnectionManager_CodecType_CodecType_MAX;
  static const int CodecType_ARRAYSIZE =
    HttpConnectionManager_CodecType_CodecType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CodecType_descriptor() {
    return HttpConnectionManager_CodecType_descriptor();
  }
  static inline const ::std::string& CodecType_Name(CodecType value) {
    return HttpConnectionManager_CodecType_Name(value);
  }
  static inline bool CodecType_Parse(const ::std::string& name,
      CodecType* value) {
    return HttpConnectionManager_CodecType_Parse(name, value);
  }

  typedef HttpConnectionManager_ForwardClientCertDetails ForwardClientCertDetails;
  static const ForwardClientCertDetails SANITIZE =
    HttpConnectionManager_ForwardClientCertDetails_SANITIZE;
  static const ForwardClientCertDetails FORWARD_ONLY =
    HttpConnectionManager_ForwardClientCertDetails_FORWARD_ONLY;
  static const ForwardClientCertDetails APPEND_FORWARD =
    HttpConnectionManager_ForwardClientCertDetails_APPEND_FORWARD;
  static const ForwardClientCertDetails SANITIZE_SET =
    HttpConnectionManager_ForwardClientCertDetails_SANITIZE_SET;
  static const ForwardClientCertDetails ALWAYS_FORWARD_ONLY =
    HttpConnectionManager_ForwardClientCertDetails_ALWAYS_FORWARD_ONLY;
  static inline bool ForwardClientCertDetails_IsValid(int value) {
    return HttpConnectionManager_ForwardClientCertDetails_IsValid(value);
  }
  static const ForwardClientCertDetails ForwardClientCertDetails_MIN =
    HttpConnectionManager_ForwardClientCertDetails_ForwardClientCertDetails_MIN;
  static const ForwardClientCertDetails ForwardClientCertDetails_MAX =
    HttpConnectionManager_ForwardClientCertDetails_ForwardClientCertDetails_MAX;
  static const int ForwardClientCertDetails_ARRAYSIZE =
    HttpConnectionManager_ForwardClientCertDetails_ForwardClientCertDetails_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ForwardClientCertDetails_descriptor() {
    return HttpConnectionManager_ForwardClientCertDetails_descriptor();
  }
  static inline const ::std::string& ForwardClientCertDetails_Name(ForwardClientCertDetails value) {
    return HttpConnectionManager_ForwardClientCertDetails_Name(value);
  }
  static inline bool ForwardClientCertDetails_Parse(const ::std::string& name,
      ForwardClientCertDetails* value) {
    return HttpConnectionManager_ForwardClientCertDetails_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .envoy.api.v2.filter.http.HttpFilter http_filters = 5;
  int http_filters_size() const;
  void clear_http_filters();
  static const int kHttpFiltersFieldNumber = 5;
  const ::envoy::api::v2::filter::http::HttpFilter& http_filters(int index) const;
  ::envoy::api::v2::filter::http::HttpFilter* mutable_http_filters(int index);
  ::envoy::api::v2::filter::http::HttpFilter* add_http_filters();
  ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::filter::http::HttpFilter >*
      mutable_http_filters();
  const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::filter::http::HttpFilter >&
      http_filters() const;

  // repeated .envoy.api.v2.filter.AccessLog access_log = 13;
  int access_log_size() const;
  void clear_access_log();
  static const int kAccessLogFieldNumber = 13;
  const ::envoy::api::v2::filter::AccessLog& access_log(int index) const;
  ::envoy::api::v2::filter::AccessLog* mutable_access_log(int index);
  ::envoy::api::v2::filter::AccessLog* add_access_log();
  ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::filter::AccessLog >*
      mutable_access_log();
  const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::filter::AccessLog >&
      access_log() const;

  // string stat_prefix = 2;
  void clear_stat_prefix();
  static const int kStatPrefixFieldNumber = 2;
  const ::std::string& stat_prefix() const;
  void set_stat_prefix(const ::std::string& value);
  #if LANG_CXX11
  void set_stat_prefix(::std::string&& value);
  #endif
  void set_stat_prefix(const char* value);
  void set_stat_prefix(const char* value, size_t size);
  ::std::string* mutable_stat_prefix();
  ::std::string* release_stat_prefix();
  void set_allocated_stat_prefix(::std::string* stat_prefix);

  // string server_name = 10;
  void clear_server_name();
  static const int kServerNameFieldNumber = 10;
  const ::std::string& server_name() const;
  void set_server_name(const ::std::string& value);
  #if LANG_CXX11
  void set_server_name(::std::string&& value);
  #endif
  void set_server_name(const char* value);
  void set_server_name(const char* value, size_t size);
  ::std::string* mutable_server_name();
  ::std::string* release_server_name();
  void set_allocated_server_name(::std::string* server_name);

  // .google.protobuf.BoolValue add_user_agent = 6;
  bool has_add_user_agent() const;
  void clear_add_user_agent();
  static const int kAddUserAgentFieldNumber = 6;
  const ::google::protobuf::BoolValue& add_user_agent() const;
  ::google::protobuf::BoolValue* release_add_user_agent();
  ::google::protobuf::BoolValue* mutable_add_user_agent();
  void set_allocated_add_user_agent(::google::protobuf::BoolValue* add_user_agent);

  // .envoy.api.v2.filter.http.HttpConnectionManager.Tracing tracing = 7;
  bool has_tracing() const;
  void clear_tracing();
  static const int kTracingFieldNumber = 7;
  const ::envoy::api::v2::filter::http::HttpConnectionManager_Tracing& tracing() const;
  ::envoy::api::v2::filter::http::HttpConnectionManager_Tracing* release_tracing();
  ::envoy::api::v2::filter::http::HttpConnectionManager_Tracing* mutable_tracing();
  void set_allocated_tracing(::envoy::api::v2::filter::http::HttpConnectionManager_Tracing* tracing);

  // .envoy.api.v2.Http1ProtocolOptions http_protocol_options = 8;
  bool has_http_protocol_options() const;
  void clear_http_protocol_options();
  static const int kHttpProtocolOptionsFieldNumber = 8;
  const ::envoy::api::v2::Http1ProtocolOptions& http_protocol_options() const;
  ::envoy::api::v2::Http1ProtocolOptions* release_http_protocol_options();
  ::envoy::api::v2::Http1ProtocolOptions* mutable_http_protocol_options();
  void set_allocated_http_protocol_options(::envoy::api::v2::Http1ProtocolOptions* http_protocol_options);

  // .envoy.api.v2.Http2ProtocolOptions http2_protocol_options = 9;
  bool has_http2_protocol_options() const;
  void clear_http2_protocol_options();
  static const int kHttp2ProtocolOptionsFieldNumber = 9;
  const ::envoy::api::v2::Http2ProtocolOptions& http2_protocol_options() const;
  ::envoy::api::v2::Http2ProtocolOptions* release_http2_protocol_options();
  ::envoy::api::v2::Http2ProtocolOptions* mutable_http2_protocol_options();
  void set_allocated_http2_protocol_options(::envoy::api::v2::Http2ProtocolOptions* http2_protocol_options);

  // .google.protobuf.Duration idle_timeout = 11;
  bool has_idle_timeout() const;
  void clear_idle_timeout();
  static const int kIdleTimeoutFieldNumber = 11;
  const ::google::protobuf::Duration& idle_timeout() const;
  ::google::protobuf::Duration* release_idle_timeout();
  ::google::protobuf::Duration* mutable_idle_timeout();
  void set_allocated_idle_timeout(::google::protobuf::Duration* idle_timeout);

  // .google.protobuf.Duration drain_timeout = 12;
  bool has_drain_timeout() const;
  void clear_drain_timeout();
  static const int kDrainTimeoutFieldNumber = 12;
  const ::google::protobuf::Duration& drain_timeout() const;
  ::google::protobuf::Duration* release_drain_timeout();
  ::google::protobuf::Duration* mutable_drain_timeout();
  void set_allocated_drain_timeout(::google::protobuf::Duration* drain_timeout);

  // .google.protobuf.BoolValue use_remote_address = 14;
  bool has_use_remote_address() const;
  void clear_use_remote_address();
  static const int kUseRemoteAddressFieldNumber = 14;
  const ::google::protobuf::BoolValue& use_remote_address() const;
  ::google::protobuf::BoolValue* release_use_remote_address();
  ::google::protobuf::BoolValue* mutable_use_remote_address();
  void set_allocated_use_remote_address(::google::protobuf::BoolValue* use_remote_address);

  // .google.protobuf.BoolValue generate_request_id = 15;
  bool has_generate_request_id() const;
  void clear_generate_request_id();
  static const int kGenerateRequestIdFieldNumber = 15;
  const ::google::protobuf::BoolValue& generate_request_id() const;
  ::google::protobuf::BoolValue* release_generate_request_id();
  ::google::protobuf::BoolValue* mutable_generate_request_id();
  void set_allocated_generate_request_id(::google::protobuf::BoolValue* generate_request_id);

  // .envoy.api.v2.filter.http.HttpConnectionManager.SetCurrentClientCertDetails set_current_client_cert_details = 17;
  bool has_set_current_client_cert_details() const;
  void clear_set_current_client_cert_details();
  static const int kSetCurrentClientCertDetailsFieldNumber = 17;
  const ::envoy::api::v2::filter::http::HttpConnectionManager_SetCurrentClientCertDetails& set_current_client_cert_details() const;
  ::envoy::api::v2::filter::http::HttpConnectionManager_SetCurrentClientCertDetails* release_set_current_client_cert_details();
  ::envoy::api::v2::filter::http::HttpConnectionManager_SetCurrentClientCertDetails* mutable_set_current_client_cert_details();
  void set_allocated_set_current_client_cert_details(::envoy::api::v2::filter::http::HttpConnectionManager_SetCurrentClientCertDetails* set_current_client_cert_details);

  // .envoy.api.v2.filter.http.HttpConnectionManager.CodecType codec_type = 1;
  void clear_codec_type();
  static const int kCodecTypeFieldNumber = 1;
  ::envoy::api::v2::filter::http::HttpConnectionManager_CodecType codec_type() const;
  void set_codec_type(::envoy::api::v2::filter::http::HttpConnectionManager_CodecType value);

  // .envoy.api.v2.filter.http.HttpConnectionManager.ForwardClientCertDetails forward_client_cert_details = 16;
  void clear_forward_client_cert_details();
  static const int kForwardClientCertDetailsFieldNumber = 16;
  ::envoy::api::v2::filter::http::HttpConnectionManager_ForwardClientCertDetails forward_client_cert_details() const;
  void set_forward_client_cert_details(::envoy::api::v2::filter::http::HttpConnectionManager_ForwardClientCertDetails value);

  // .envoy.api.v2.filter.http.Rds rds = 3;
  bool has_rds() const;
  void clear_rds();
  static const int kRdsFieldNumber = 3;
  const ::envoy::api::v2::filter::http::Rds& rds() const;
  ::envoy::api::v2::filter::http::Rds* release_rds();
  ::envoy::api::v2::filter::http::Rds* mutable_rds();
  void set_allocated_rds(::envoy::api::v2::filter::http::Rds* rds);

  // .envoy.api.v2.RouteConfiguration route_config = 4;
  bool has_route_config() const;
  void clear_route_config();
  static const int kRouteConfigFieldNumber = 4;
  const ::envoy::api::v2::RouteConfiguration& route_config() const;
  ::envoy::api::v2::RouteConfiguration* release_route_config();
  ::envoy::api::v2::RouteConfiguration* mutable_route_config();
  void set_allocated_route_config(::envoy::api::v2::RouteConfiguration* route_config);

  RouteSpecifierCase route_specifier_case() const;
  // @@protoc_insertion_point(class_scope:envoy.api.v2.filter.http.HttpConnectionManager)
 private:
  void set_has_rds();
  void set_has_route_config();

  inline bool has_route_specifier() const;
  void clear_route_specifier();
  inline void clear_has_route_specifier();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::filter::http::HttpFilter > http_filters_;
  ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::filter::AccessLog > access_log_;
  ::google::protobuf::internal::ArenaStringPtr stat_prefix_;
  ::google::protobuf::internal::ArenaStringPtr server_name_;
  ::google::protobuf::BoolValue* add_user_agent_;
  ::envoy::api::v2::filter::http::HttpConnectionManager_Tracing* tracing_;
  ::envoy::api::v2::Http1ProtocolOptions* http_protocol_options_;
  ::envoy::api::v2::Http2ProtocolOptions* http2_protocol_options_;
  ::google::protobuf::Duration* idle_timeout_;
  ::google::protobuf::Duration* drain_timeout_;
  ::google::protobuf::BoolValue* use_remote_address_;
  ::google::protobuf::BoolValue* generate_request_id_;
  ::envoy::api::v2::filter::http::HttpConnectionManager_SetCurrentClientCertDetails* set_current_client_cert_details_;
  int codec_type_;
  int forward_client_cert_details_;
  union RouteSpecifierUnion {
    RouteSpecifierUnion() {}
    ::envoy::api::v2::filter::http::Rds* rds_;
    ::envoy::api::v2::RouteConfiguration* route_config_;
  } route_specifier_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_api_2ffilter_2fhttp_2fhttp_5fconnection_5fmanager_2eproto::TableStruct;
  friend void ::protobuf_api_2ffilter_2fhttp_2fhttp_5fconnection_5fmanager_2eproto::InitDefaultsHttpConnectionManagerImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Rds

// .envoy.api.v2.ConfigSource config_source = 1;
inline bool Rds::has_config_source() const {
  return this != internal_default_instance() && config_source_ != NULL;
}
inline const ::envoy::api::v2::ConfigSource& Rds::config_source() const {
  const ::envoy::api::v2::ConfigSource* p = config_source_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.http.Rds.config_source)
  return p != NULL ? *p : *reinterpret_cast<const ::envoy::api::v2::ConfigSource*>(
      &::envoy::api::v2::_ConfigSource_default_instance_);
}
inline ::envoy::api::v2::ConfigSource* Rds::release_config_source() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.http.Rds.config_source)
  
  ::envoy::api::v2::ConfigSource* temp = config_source_;
  config_source_ = NULL;
  return temp;
}
inline ::envoy::api::v2::ConfigSource* Rds::mutable_config_source() {
  
  if (config_source_ == NULL) {
    config_source_ = new ::envoy::api::v2::ConfigSource;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.http.Rds.config_source)
  return config_source_;
}
inline void Rds::set_allocated_config_source(::envoy::api::v2::ConfigSource* config_source) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(config_source_);
  }
  if (config_source) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config_source = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config_source, submessage_arena);
    }
    
  } else {
    
  }
  config_source_ = config_source;
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.http.Rds.config_source)
}

// string route_config_name = 2;
inline void Rds::clear_route_config_name() {
  route_config_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Rds::route_config_name() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.http.Rds.route_config_name)
  return route_config_name_.GetNoArena();
}
inline void Rds::set_route_config_name(const ::std::string& value) {
  
  route_config_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.http.Rds.route_config_name)
}
#if LANG_CXX11
inline void Rds::set_route_config_name(::std::string&& value) {
  
  route_config_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.filter.http.Rds.route_config_name)
}
#endif
inline void Rds::set_route_config_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  route_config_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.filter.http.Rds.route_config_name)
}
inline void Rds::set_route_config_name(const char* value, size_t size) {
  
  route_config_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.filter.http.Rds.route_config_name)
}
inline ::std::string* Rds::mutable_route_config_name() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.http.Rds.route_config_name)
  return route_config_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Rds::release_route_config_name() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.http.Rds.route_config_name)
  
  return route_config_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Rds::set_allocated_route_config_name(::std::string* route_config_name) {
  if (route_config_name != NULL) {
    
  } else {
    
  }
  route_config_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), route_config_name);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.http.Rds.route_config_name)
}

// -------------------------------------------------------------------

// HttpFilter_DeprecatedV1

// string type = 1;
inline void HttpFilter_DeprecatedV1::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HttpFilter_DeprecatedV1::type() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.http.HttpFilter.DeprecatedV1.type)
  return type_.GetNoArena();
}
inline void HttpFilter_DeprecatedV1::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.http.HttpFilter.DeprecatedV1.type)
}
#if LANG_CXX11
inline void HttpFilter_DeprecatedV1::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.filter.http.HttpFilter.DeprecatedV1.type)
}
#endif
inline void HttpFilter_DeprecatedV1::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.filter.http.HttpFilter.DeprecatedV1.type)
}
inline void HttpFilter_DeprecatedV1::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.filter.http.HttpFilter.DeprecatedV1.type)
}
inline ::std::string* HttpFilter_DeprecatedV1::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.http.HttpFilter.DeprecatedV1.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HttpFilter_DeprecatedV1::release_type() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.http.HttpFilter.DeprecatedV1.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HttpFilter_DeprecatedV1::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.http.HttpFilter.DeprecatedV1.type)
}

// -------------------------------------------------------------------

// HttpFilter

// string name = 1;
inline void HttpFilter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HttpFilter::name() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.http.HttpFilter.name)
  return name_.GetNoArena();
}
inline void HttpFilter::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.http.HttpFilter.name)
}
#if LANG_CXX11
inline void HttpFilter::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.filter.http.HttpFilter.name)
}
#endif
inline void HttpFilter::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.filter.http.HttpFilter.name)
}
inline void HttpFilter::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.filter.http.HttpFilter.name)
}
inline ::std::string* HttpFilter::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.http.HttpFilter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HttpFilter::release_name() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.http.HttpFilter.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HttpFilter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.http.HttpFilter.name)
}

// .google.protobuf.Struct config = 2;
inline bool HttpFilter::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline const ::google::protobuf::Struct& HttpFilter::config() const {
  const ::google::protobuf::Struct* p = config_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.http.HttpFilter.config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Struct*>(
      &::google::protobuf::_Struct_default_instance_);
}
inline ::google::protobuf::Struct* HttpFilter::release_config() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.http.HttpFilter.config)
  
  ::google::protobuf::Struct* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::google::protobuf::Struct* HttpFilter::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::google::protobuf::Struct;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.http.HttpFilter.config)
  return config_;
}
inline void HttpFilter::set_allocated_config(::google::protobuf::Struct* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(config_);
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(config)->GetArena();
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.http.HttpFilter.config)
}

// .envoy.api.v2.filter.http.HttpFilter.DeprecatedV1 deprecated_v1 = 3;
inline bool HttpFilter::has_deprecated_v1() const {
  return this != internal_default_instance() && deprecated_v1_ != NULL;
}
inline void HttpFilter::clear_deprecated_v1() {
  if (GetArenaNoVirtual() == NULL && deprecated_v1_ != NULL) {
    delete deprecated_v1_;
  }
  deprecated_v1_ = NULL;
}
inline const ::envoy::api::v2::filter::http::HttpFilter_DeprecatedV1& HttpFilter::deprecated_v1() const {
  const ::envoy::api::v2::filter::http::HttpFilter_DeprecatedV1* p = deprecated_v1_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.http.HttpFilter.deprecated_v1)
  return p != NULL ? *p : *reinterpret_cast<const ::envoy::api::v2::filter::http::HttpFilter_DeprecatedV1*>(
      &::envoy::api::v2::filter::http::_HttpFilter_DeprecatedV1_default_instance_);
}
inline ::envoy::api::v2::filter::http::HttpFilter_DeprecatedV1* HttpFilter::release_deprecated_v1() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.http.HttpFilter.deprecated_v1)
  
  ::envoy::api::v2::filter::http::HttpFilter_DeprecatedV1* temp = deprecated_v1_;
  deprecated_v1_ = NULL;
  return temp;
}
inline ::envoy::api::v2::filter::http::HttpFilter_DeprecatedV1* HttpFilter::mutable_deprecated_v1() {
  
  if (deprecated_v1_ == NULL) {
    deprecated_v1_ = new ::envoy::api::v2::filter::http::HttpFilter_DeprecatedV1;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.http.HttpFilter.deprecated_v1)
  return deprecated_v1_;
}
inline void HttpFilter::set_allocated_deprecated_v1(::envoy::api::v2::filter::http::HttpFilter_DeprecatedV1* deprecated_v1) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete deprecated_v1_;
  }
  if (deprecated_v1) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      deprecated_v1 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, deprecated_v1, submessage_arena);
    }
    
  } else {
    
  }
  deprecated_v1_ = deprecated_v1;
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.http.HttpFilter.deprecated_v1)
}

// -------------------------------------------------------------------

// HttpConnectionManager_Tracing

// .envoy.api.v2.filter.http.HttpConnectionManager.Tracing.OperationName operation_name = 1;
inline void HttpConnectionManager_Tracing::clear_operation_name() {
  operation_name_ = 0;
}
inline ::envoy::api::v2::filter::http::HttpConnectionManager_Tracing_OperationName HttpConnectionManager_Tracing::operation_name() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.http.HttpConnectionManager.Tracing.operation_name)
  return static_cast< ::envoy::api::v2::filter::http::HttpConnectionManager_Tracing_OperationName >(operation_name_);
}
inline void HttpConnectionManager_Tracing::set_operation_name(::envoy::api::v2::filter::http::HttpConnectionManager_Tracing_OperationName value) {
  
  operation_name_ = value;
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.http.HttpConnectionManager.Tracing.operation_name)
}

// repeated string request_headers_for_tags = 2;
inline int HttpConnectionManager_Tracing::request_headers_for_tags_size() const {
  return request_headers_for_tags_.size();
}
inline void HttpConnectionManager_Tracing::clear_request_headers_for_tags() {
  request_headers_for_tags_.Clear();
}
inline const ::std::string& HttpConnectionManager_Tracing::request_headers_for_tags(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.http.HttpConnectionManager.Tracing.request_headers_for_tags)
  return request_headers_for_tags_.Get(index);
}
inline ::std::string* HttpConnectionManager_Tracing::mutable_request_headers_for_tags(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.http.HttpConnectionManager.Tracing.request_headers_for_tags)
  return request_headers_for_tags_.Mutable(index);
}
inline void HttpConnectionManager_Tracing::set_request_headers_for_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.http.HttpConnectionManager.Tracing.request_headers_for_tags)
  request_headers_for_tags_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void HttpConnectionManager_Tracing::set_request_headers_for_tags(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.http.HttpConnectionManager.Tracing.request_headers_for_tags)
  request_headers_for_tags_.Mutable(index)->assign(std::move(value));
}
#endif
inline void HttpConnectionManager_Tracing::set_request_headers_for_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  request_headers_for_tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.filter.http.HttpConnectionManager.Tracing.request_headers_for_tags)
}
inline void HttpConnectionManager_Tracing::set_request_headers_for_tags(int index, const char* value, size_t size) {
  request_headers_for_tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.filter.http.HttpConnectionManager.Tracing.request_headers_for_tags)
}
inline ::std::string* HttpConnectionManager_Tracing::add_request_headers_for_tags() {
  // @@protoc_insertion_point(field_add_mutable:envoy.api.v2.filter.http.HttpConnectionManager.Tracing.request_headers_for_tags)
  return request_headers_for_tags_.Add();
}
inline void HttpConnectionManager_Tracing::add_request_headers_for_tags(const ::std::string& value) {
  request_headers_for_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:envoy.api.v2.filter.http.HttpConnectionManager.Tracing.request_headers_for_tags)
}
#if LANG_CXX11
inline void HttpConnectionManager_Tracing::add_request_headers_for_tags(::std::string&& value) {
  request_headers_for_tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:envoy.api.v2.filter.http.HttpConnectionManager.Tracing.request_headers_for_tags)
}
#endif
inline void HttpConnectionManager_Tracing::add_request_headers_for_tags(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  request_headers_for_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:envoy.api.v2.filter.http.HttpConnectionManager.Tracing.request_headers_for_tags)
}
inline void HttpConnectionManager_Tracing::add_request_headers_for_tags(const char* value, size_t size) {
  request_headers_for_tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:envoy.api.v2.filter.http.HttpConnectionManager.Tracing.request_headers_for_tags)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
HttpConnectionManager_Tracing::request_headers_for_tags() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.filter.http.HttpConnectionManager.Tracing.request_headers_for_tags)
  return request_headers_for_tags_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
HttpConnectionManager_Tracing::mutable_request_headers_for_tags() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.filter.http.HttpConnectionManager.Tracing.request_headers_for_tags)
  return &request_headers_for_tags_;
}

// -------------------------------------------------------------------

// HttpConnectionManager_SetCurrentClientCertDetails

// .google.protobuf.BoolValue subject = 1;
inline bool HttpConnectionManager_SetCurrentClientCertDetails::has_subject() const {
  return this != internal_default_instance() && subject_ != NULL;
}
inline const ::google::protobuf::BoolValue& HttpConnectionManager_SetCurrentClientCertDetails::subject() const {
  const ::google::protobuf::BoolValue* p = subject_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.http.HttpConnectionManager.SetCurrentClientCertDetails.subject)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::BoolValue*>(
      &::google::protobuf::_BoolValue_default_instance_);
}
inline ::google::protobuf::BoolValue* HttpConnectionManager_SetCurrentClientCertDetails::release_subject() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.http.HttpConnectionManager.SetCurrentClientCertDetails.subject)
  
  ::google::protobuf::BoolValue* temp = subject_;
  subject_ = NULL;
  return temp;
}
inline ::google::protobuf::BoolValue* HttpConnectionManager_SetCurrentClientCertDetails::mutable_subject() {
  
  if (subject_ == NULL) {
    subject_ = new ::google::protobuf::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.http.HttpConnectionManager.SetCurrentClientCertDetails.subject)
  return subject_;
}
inline void HttpConnectionManager_SetCurrentClientCertDetails::set_allocated_subject(::google::protobuf::BoolValue* subject) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(subject_);
  }
  if (subject) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(subject)->GetArena();
    if (message_arena != submessage_arena) {
      subject = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, subject, submessage_arena);
    }
    
  } else {
    
  }
  subject_ = subject;
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.http.HttpConnectionManager.SetCurrentClientCertDetails.subject)
}

// .google.protobuf.BoolValue san = 2;
inline bool HttpConnectionManager_SetCurrentClientCertDetails::has_san() const {
  return this != internal_default_instance() && san_ != NULL;
}
inline const ::google::protobuf::BoolValue& HttpConnectionManager_SetCurrentClientCertDetails::san() const {
  const ::google::protobuf::BoolValue* p = san_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.http.HttpConnectionManager.SetCurrentClientCertDetails.san)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::BoolValue*>(
      &::google::protobuf::_BoolValue_default_instance_);
}
inline ::google::protobuf::BoolValue* HttpConnectionManager_SetCurrentClientCertDetails::release_san() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.http.HttpConnectionManager.SetCurrentClientCertDetails.san)
  
  ::google::protobuf::BoolValue* temp = san_;
  san_ = NULL;
  return temp;
}
inline ::google::protobuf::BoolValue* HttpConnectionManager_SetCurrentClientCertDetails::mutable_san() {
  
  if (san_ == NULL) {
    san_ = new ::google::protobuf::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.http.HttpConnectionManager.SetCurrentClientCertDetails.san)
  return san_;
}
inline void HttpConnectionManager_SetCurrentClientCertDetails::set_allocated_san(::google::protobuf::BoolValue* san) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(san_);
  }
  if (san) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(san)->GetArena();
    if (message_arena != submessage_arena) {
      san = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, san, submessage_arena);
    }
    
  } else {
    
  }
  san_ = san;
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.http.HttpConnectionManager.SetCurrentClientCertDetails.san)
}

// -------------------------------------------------------------------

// HttpConnectionManager

// .envoy.api.v2.filter.http.HttpConnectionManager.CodecType codec_type = 1;
inline void HttpConnectionManager::clear_codec_type() {
  codec_type_ = 0;
}
inline ::envoy::api::v2::filter::http::HttpConnectionManager_CodecType HttpConnectionManager::codec_type() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.http.HttpConnectionManager.codec_type)
  return static_cast< ::envoy::api::v2::filter::http::HttpConnectionManager_CodecType >(codec_type_);
}
inline void HttpConnectionManager::set_codec_type(::envoy::api::v2::filter::http::HttpConnectionManager_CodecType value) {
  
  codec_type_ = value;
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.http.HttpConnectionManager.codec_type)
}

// string stat_prefix = 2;
inline void HttpConnectionManager::clear_stat_prefix() {
  stat_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HttpConnectionManager::stat_prefix() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.http.HttpConnectionManager.stat_prefix)
  return stat_prefix_.GetNoArena();
}
inline void HttpConnectionManager::set_stat_prefix(const ::std::string& value) {
  
  stat_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.http.HttpConnectionManager.stat_prefix)
}
#if LANG_CXX11
inline void HttpConnectionManager::set_stat_prefix(::std::string&& value) {
  
  stat_prefix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.filter.http.HttpConnectionManager.stat_prefix)
}
#endif
inline void HttpConnectionManager::set_stat_prefix(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stat_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.filter.http.HttpConnectionManager.stat_prefix)
}
inline void HttpConnectionManager::set_stat_prefix(const char* value, size_t size) {
  
  stat_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.filter.http.HttpConnectionManager.stat_prefix)
}
inline ::std::string* HttpConnectionManager::mutable_stat_prefix() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.http.HttpConnectionManager.stat_prefix)
  return stat_prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HttpConnectionManager::release_stat_prefix() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.http.HttpConnectionManager.stat_prefix)
  
  return stat_prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HttpConnectionManager::set_allocated_stat_prefix(::std::string* stat_prefix) {
  if (stat_prefix != NULL) {
    
  } else {
    
  }
  stat_prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stat_prefix);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.http.HttpConnectionManager.stat_prefix)
}

// .envoy.api.v2.filter.http.Rds rds = 3;
inline bool HttpConnectionManager::has_rds() const {
  return route_specifier_case() == kRds;
}
inline void HttpConnectionManager::set_has_rds() {
  _oneof_case_[0] = kRds;
}
inline void HttpConnectionManager::clear_rds() {
  if (has_rds()) {
    delete route_specifier_.rds_;
    clear_has_route_specifier();
  }
}
inline ::envoy::api::v2::filter::http::Rds* HttpConnectionManager::release_rds() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.http.HttpConnectionManager.rds)
  if (has_rds()) {
    clear_has_route_specifier();
      ::envoy::api::v2::filter::http::Rds* temp = route_specifier_.rds_;
    route_specifier_.rds_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::envoy::api::v2::filter::http::Rds& HttpConnectionManager::rds() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.http.HttpConnectionManager.rds)
  return has_rds()
      ? *route_specifier_.rds_
      : *reinterpret_cast< ::envoy::api::v2::filter::http::Rds*>(&::envoy::api::v2::filter::http::_Rds_default_instance_);
}
inline ::envoy::api::v2::filter::http::Rds* HttpConnectionManager::mutable_rds() {
  if (!has_rds()) {
    clear_route_specifier();
    set_has_rds();
    route_specifier_.rds_ = new ::envoy::api::v2::filter::http::Rds;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.http.HttpConnectionManager.rds)
  return route_specifier_.rds_;
}

// .envoy.api.v2.RouteConfiguration route_config = 4;
inline bool HttpConnectionManager::has_route_config() const {
  return route_specifier_case() == kRouteConfig;
}
inline void HttpConnectionManager::set_has_route_config() {
  _oneof_case_[0] = kRouteConfig;
}
inline ::envoy::api::v2::RouteConfiguration* HttpConnectionManager::release_route_config() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.http.HttpConnectionManager.route_config)
  if (has_route_config()) {
    clear_has_route_specifier();
      ::envoy::api::v2::RouteConfiguration* temp = route_specifier_.route_config_;
    route_specifier_.route_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::envoy::api::v2::RouteConfiguration& HttpConnectionManager::route_config() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.http.HttpConnectionManager.route_config)
  return has_route_config()
      ? *route_specifier_.route_config_
      : *reinterpret_cast< ::envoy::api::v2::RouteConfiguration*>(&::envoy::api::v2::_RouteConfiguration_default_instance_);
}
inline ::envoy::api::v2::RouteConfiguration* HttpConnectionManager::mutable_route_config() {
  if (!has_route_config()) {
    clear_route_specifier();
    set_has_route_config();
    route_specifier_.route_config_ = new ::envoy::api::v2::RouteConfiguration;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.http.HttpConnectionManager.route_config)
  return route_specifier_.route_config_;
}

// repeated .envoy.api.v2.filter.http.HttpFilter http_filters = 5;
inline int HttpConnectionManager::http_filters_size() const {
  return http_filters_.size();
}
inline void HttpConnectionManager::clear_http_filters() {
  http_filters_.Clear();
}
inline const ::envoy::api::v2::filter::http::HttpFilter& HttpConnectionManager::http_filters(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.http.HttpConnectionManager.http_filters)
  return http_filters_.Get(index);
}
inline ::envoy::api::v2::filter::http::HttpFilter* HttpConnectionManager::mutable_http_filters(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.http.HttpConnectionManager.http_filters)
  return http_filters_.Mutable(index);
}
inline ::envoy::api::v2::filter::http::HttpFilter* HttpConnectionManager::add_http_filters() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.filter.http.HttpConnectionManager.http_filters)
  return http_filters_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::filter::http::HttpFilter >*
HttpConnectionManager::mutable_http_filters() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.filter.http.HttpConnectionManager.http_filters)
  return &http_filters_;
}
inline const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::filter::http::HttpFilter >&
HttpConnectionManager::http_filters() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.filter.http.HttpConnectionManager.http_filters)
  return http_filters_;
}

// .google.protobuf.BoolValue add_user_agent = 6;
inline bool HttpConnectionManager::has_add_user_agent() const {
  return this != internal_default_instance() && add_user_agent_ != NULL;
}
inline const ::google::protobuf::BoolValue& HttpConnectionManager::add_user_agent() const {
  const ::google::protobuf::BoolValue* p = add_user_agent_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.http.HttpConnectionManager.add_user_agent)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::BoolValue*>(
      &::google::protobuf::_BoolValue_default_instance_);
}
inline ::google::protobuf::BoolValue* HttpConnectionManager::release_add_user_agent() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.http.HttpConnectionManager.add_user_agent)
  
  ::google::protobuf::BoolValue* temp = add_user_agent_;
  add_user_agent_ = NULL;
  return temp;
}
inline ::google::protobuf::BoolValue* HttpConnectionManager::mutable_add_user_agent() {
  
  if (add_user_agent_ == NULL) {
    add_user_agent_ = new ::google::protobuf::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.http.HttpConnectionManager.add_user_agent)
  return add_user_agent_;
}
inline void HttpConnectionManager::set_allocated_add_user_agent(::google::protobuf::BoolValue* add_user_agent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(add_user_agent_);
  }
  if (add_user_agent) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(add_user_agent)->GetArena();
    if (message_arena != submessage_arena) {
      add_user_agent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, add_user_agent, submessage_arena);
    }
    
  } else {
    
  }
  add_user_agent_ = add_user_agent;
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.http.HttpConnectionManager.add_user_agent)
}

// .envoy.api.v2.filter.http.HttpConnectionManager.Tracing tracing = 7;
inline bool HttpConnectionManager::has_tracing() const {
  return this != internal_default_instance() && tracing_ != NULL;
}
inline void HttpConnectionManager::clear_tracing() {
  if (GetArenaNoVirtual() == NULL && tracing_ != NULL) {
    delete tracing_;
  }
  tracing_ = NULL;
}
inline const ::envoy::api::v2::filter::http::HttpConnectionManager_Tracing& HttpConnectionManager::tracing() const {
  const ::envoy::api::v2::filter::http::HttpConnectionManager_Tracing* p = tracing_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.http.HttpConnectionManager.tracing)
  return p != NULL ? *p : *reinterpret_cast<const ::envoy::api::v2::filter::http::HttpConnectionManager_Tracing*>(
      &::envoy::api::v2::filter::http::_HttpConnectionManager_Tracing_default_instance_);
}
inline ::envoy::api::v2::filter::http::HttpConnectionManager_Tracing* HttpConnectionManager::release_tracing() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.http.HttpConnectionManager.tracing)
  
  ::envoy::api::v2::filter::http::HttpConnectionManager_Tracing* temp = tracing_;
  tracing_ = NULL;
  return temp;
}
inline ::envoy::api::v2::filter::http::HttpConnectionManager_Tracing* HttpConnectionManager::mutable_tracing() {
  
  if (tracing_ == NULL) {
    tracing_ = new ::envoy::api::v2::filter::http::HttpConnectionManager_Tracing;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.http.HttpConnectionManager.tracing)
  return tracing_;
}
inline void HttpConnectionManager::set_allocated_tracing(::envoy::api::v2::filter::http::HttpConnectionManager_Tracing* tracing) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tracing_;
  }
  if (tracing) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tracing = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tracing, submessage_arena);
    }
    
  } else {
    
  }
  tracing_ = tracing;
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.http.HttpConnectionManager.tracing)
}

// .envoy.api.v2.Http1ProtocolOptions http_protocol_options = 8;
inline bool HttpConnectionManager::has_http_protocol_options() const {
  return this != internal_default_instance() && http_protocol_options_ != NULL;
}
inline const ::envoy::api::v2::Http1ProtocolOptions& HttpConnectionManager::http_protocol_options() const {
  const ::envoy::api::v2::Http1ProtocolOptions* p = http_protocol_options_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.http.HttpConnectionManager.http_protocol_options)
  return p != NULL ? *p : *reinterpret_cast<const ::envoy::api::v2::Http1ProtocolOptions*>(
      &::envoy::api::v2::_Http1ProtocolOptions_default_instance_);
}
inline ::envoy::api::v2::Http1ProtocolOptions* HttpConnectionManager::release_http_protocol_options() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.http.HttpConnectionManager.http_protocol_options)
  
  ::envoy::api::v2::Http1ProtocolOptions* temp = http_protocol_options_;
  http_protocol_options_ = NULL;
  return temp;
}
inline ::envoy::api::v2::Http1ProtocolOptions* HttpConnectionManager::mutable_http_protocol_options() {
  
  if (http_protocol_options_ == NULL) {
    http_protocol_options_ = new ::envoy::api::v2::Http1ProtocolOptions;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.http.HttpConnectionManager.http_protocol_options)
  return http_protocol_options_;
}
inline void HttpConnectionManager::set_allocated_http_protocol_options(::envoy::api::v2::Http1ProtocolOptions* http_protocol_options) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(http_protocol_options_);
  }
  if (http_protocol_options) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      http_protocol_options = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, http_protocol_options, submessage_arena);
    }
    
  } else {
    
  }
  http_protocol_options_ = http_protocol_options;
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.http.HttpConnectionManager.http_protocol_options)
}

// .envoy.api.v2.Http2ProtocolOptions http2_protocol_options = 9;
inline bool HttpConnectionManager::has_http2_protocol_options() const {
  return this != internal_default_instance() && http2_protocol_options_ != NULL;
}
inline const ::envoy::api::v2::Http2ProtocolOptions& HttpConnectionManager::http2_protocol_options() const {
  const ::envoy::api::v2::Http2ProtocolOptions* p = http2_protocol_options_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.http.HttpConnectionManager.http2_protocol_options)
  return p != NULL ? *p : *reinterpret_cast<const ::envoy::api::v2::Http2ProtocolOptions*>(
      &::envoy::api::v2::_Http2ProtocolOptions_default_instance_);
}
inline ::envoy::api::v2::Http2ProtocolOptions* HttpConnectionManager::release_http2_protocol_options() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.http.HttpConnectionManager.http2_protocol_options)
  
  ::envoy::api::v2::Http2ProtocolOptions* temp = http2_protocol_options_;
  http2_protocol_options_ = NULL;
  return temp;
}
inline ::envoy::api::v2::Http2ProtocolOptions* HttpConnectionManager::mutable_http2_protocol_options() {
  
  if (http2_protocol_options_ == NULL) {
    http2_protocol_options_ = new ::envoy::api::v2::Http2ProtocolOptions;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.http.HttpConnectionManager.http2_protocol_options)
  return http2_protocol_options_;
}
inline void HttpConnectionManager::set_allocated_http2_protocol_options(::envoy::api::v2::Http2ProtocolOptions* http2_protocol_options) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(http2_protocol_options_);
  }
  if (http2_protocol_options) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      http2_protocol_options = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, http2_protocol_options, submessage_arena);
    }
    
  } else {
    
  }
  http2_protocol_options_ = http2_protocol_options;
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.http.HttpConnectionManager.http2_protocol_options)
}

// string server_name = 10;
inline void HttpConnectionManager::clear_server_name() {
  server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HttpConnectionManager::server_name() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.http.HttpConnectionManager.server_name)
  return server_name_.GetNoArena();
}
inline void HttpConnectionManager::set_server_name(const ::std::string& value) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.http.HttpConnectionManager.server_name)
}
#if LANG_CXX11
inline void HttpConnectionManager::set_server_name(::std::string&& value) {
  
  server_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.filter.http.HttpConnectionManager.server_name)
}
#endif
inline void HttpConnectionManager::set_server_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.filter.http.HttpConnectionManager.server_name)
}
inline void HttpConnectionManager::set_server_name(const char* value, size_t size) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.filter.http.HttpConnectionManager.server_name)
}
inline ::std::string* HttpConnectionManager::mutable_server_name() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.http.HttpConnectionManager.server_name)
  return server_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HttpConnectionManager::release_server_name() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.http.HttpConnectionManager.server_name)
  
  return server_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HttpConnectionManager::set_allocated_server_name(::std::string* server_name) {
  if (server_name != NULL) {
    
  } else {
    
  }
  server_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_name);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.http.HttpConnectionManager.server_name)
}

// .google.protobuf.Duration idle_timeout = 11;
inline bool HttpConnectionManager::has_idle_timeout() const {
  return this != internal_default_instance() && idle_timeout_ != NULL;
}
inline const ::google::protobuf::Duration& HttpConnectionManager::idle_timeout() const {
  const ::google::protobuf::Duration* p = idle_timeout_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.http.HttpConnectionManager.idle_timeout)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* HttpConnectionManager::release_idle_timeout() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.http.HttpConnectionManager.idle_timeout)
  
  ::google::protobuf::Duration* temp = idle_timeout_;
  idle_timeout_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* HttpConnectionManager::mutable_idle_timeout() {
  
  if (idle_timeout_ == NULL) {
    idle_timeout_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.http.HttpConnectionManager.idle_timeout)
  return idle_timeout_;
}
inline void HttpConnectionManager::set_allocated_idle_timeout(::google::protobuf::Duration* idle_timeout) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(idle_timeout_);
  }
  if (idle_timeout) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(idle_timeout)->GetArena();
    if (message_arena != submessage_arena) {
      idle_timeout = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, idle_timeout, submessage_arena);
    }
    
  } else {
    
  }
  idle_timeout_ = idle_timeout;
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.http.HttpConnectionManager.idle_timeout)
}

// .google.protobuf.Duration drain_timeout = 12;
inline bool HttpConnectionManager::has_drain_timeout() const {
  return this != internal_default_instance() && drain_timeout_ != NULL;
}
inline const ::google::protobuf::Duration& HttpConnectionManager::drain_timeout() const {
  const ::google::protobuf::Duration* p = drain_timeout_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.http.HttpConnectionManager.drain_timeout)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* HttpConnectionManager::release_drain_timeout() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.http.HttpConnectionManager.drain_timeout)
  
  ::google::protobuf::Duration* temp = drain_timeout_;
  drain_timeout_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* HttpConnectionManager::mutable_drain_timeout() {
  
  if (drain_timeout_ == NULL) {
    drain_timeout_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.http.HttpConnectionManager.drain_timeout)
  return drain_timeout_;
}
inline void HttpConnectionManager::set_allocated_drain_timeout(::google::protobuf::Duration* drain_timeout) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(drain_timeout_);
  }
  if (drain_timeout) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(drain_timeout)->GetArena();
    if (message_arena != submessage_arena) {
      drain_timeout = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, drain_timeout, submessage_arena);
    }
    
  } else {
    
  }
  drain_timeout_ = drain_timeout;
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.http.HttpConnectionManager.drain_timeout)
}

// repeated .envoy.api.v2.filter.AccessLog access_log = 13;
inline int HttpConnectionManager::access_log_size() const {
  return access_log_.size();
}
inline const ::envoy::api::v2::filter::AccessLog& HttpConnectionManager::access_log(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.http.HttpConnectionManager.access_log)
  return access_log_.Get(index);
}
inline ::envoy::api::v2::filter::AccessLog* HttpConnectionManager::mutable_access_log(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.http.HttpConnectionManager.access_log)
  return access_log_.Mutable(index);
}
inline ::envoy::api::v2::filter::AccessLog* HttpConnectionManager::add_access_log() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.filter.http.HttpConnectionManager.access_log)
  return access_log_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::filter::AccessLog >*
HttpConnectionManager::mutable_access_log() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.filter.http.HttpConnectionManager.access_log)
  return &access_log_;
}
inline const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::filter::AccessLog >&
HttpConnectionManager::access_log() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.filter.http.HttpConnectionManager.access_log)
  return access_log_;
}

// .google.protobuf.BoolValue use_remote_address = 14;
inline bool HttpConnectionManager::has_use_remote_address() const {
  return this != internal_default_instance() && use_remote_address_ != NULL;
}
inline const ::google::protobuf::BoolValue& HttpConnectionManager::use_remote_address() const {
  const ::google::protobuf::BoolValue* p = use_remote_address_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.http.HttpConnectionManager.use_remote_address)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::BoolValue*>(
      &::google::protobuf::_BoolValue_default_instance_);
}
inline ::google::protobuf::BoolValue* HttpConnectionManager::release_use_remote_address() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.http.HttpConnectionManager.use_remote_address)
  
  ::google::protobuf::BoolValue* temp = use_remote_address_;
  use_remote_address_ = NULL;
  return temp;
}
inline ::google::protobuf::BoolValue* HttpConnectionManager::mutable_use_remote_address() {
  
  if (use_remote_address_ == NULL) {
    use_remote_address_ = new ::google::protobuf::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.http.HttpConnectionManager.use_remote_address)
  return use_remote_address_;
}
inline void HttpConnectionManager::set_allocated_use_remote_address(::google::protobuf::BoolValue* use_remote_address) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(use_remote_address_);
  }
  if (use_remote_address) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(use_remote_address)->GetArena();
    if (message_arena != submessage_arena) {
      use_remote_address = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, use_remote_address, submessage_arena);
    }
    
  } else {
    
  }
  use_remote_address_ = use_remote_address;
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.http.HttpConnectionManager.use_remote_address)
}

// .google.protobuf.BoolValue generate_request_id = 15;
inline bool HttpConnectionManager::has_generate_request_id() const {
  return this != internal_default_instance() && generate_request_id_ != NULL;
}
inline const ::google::protobuf::BoolValue& HttpConnectionManager::generate_request_id() const {
  const ::google::protobuf::BoolValue* p = generate_request_id_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.http.HttpConnectionManager.generate_request_id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::BoolValue*>(
      &::google::protobuf::_BoolValue_default_instance_);
}
inline ::google::protobuf::BoolValue* HttpConnectionManager::release_generate_request_id() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.http.HttpConnectionManager.generate_request_id)
  
  ::google::protobuf::BoolValue* temp = generate_request_id_;
  generate_request_id_ = NULL;
  return temp;
}
inline ::google::protobuf::BoolValue* HttpConnectionManager::mutable_generate_request_id() {
  
  if (generate_request_id_ == NULL) {
    generate_request_id_ = new ::google::protobuf::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.http.HttpConnectionManager.generate_request_id)
  return generate_request_id_;
}
inline void HttpConnectionManager::set_allocated_generate_request_id(::google::protobuf::BoolValue* generate_request_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(generate_request_id_);
  }
  if (generate_request_id) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(generate_request_id)->GetArena();
    if (message_arena != submessage_arena) {
      generate_request_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, generate_request_id, submessage_arena);
    }
    
  } else {
    
  }
  generate_request_id_ = generate_request_id;
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.http.HttpConnectionManager.generate_request_id)
}

// .envoy.api.v2.filter.http.HttpConnectionManager.ForwardClientCertDetails forward_client_cert_details = 16;
inline void HttpConnectionManager::clear_forward_client_cert_details() {
  forward_client_cert_details_ = 0;
}
inline ::envoy::api::v2::filter::http::HttpConnectionManager_ForwardClientCertDetails HttpConnectionManager::forward_client_cert_details() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.http.HttpConnectionManager.forward_client_cert_details)
  return static_cast< ::envoy::api::v2::filter::http::HttpConnectionManager_ForwardClientCertDetails >(forward_client_cert_details_);
}
inline void HttpConnectionManager::set_forward_client_cert_details(::envoy::api::v2::filter::http::HttpConnectionManager_ForwardClientCertDetails value) {
  
  forward_client_cert_details_ = value;
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.http.HttpConnectionManager.forward_client_cert_details)
}

// .envoy.api.v2.filter.http.HttpConnectionManager.SetCurrentClientCertDetails set_current_client_cert_details = 17;
inline bool HttpConnectionManager::has_set_current_client_cert_details() const {
  return this != internal_default_instance() && set_current_client_cert_details_ != NULL;
}
inline void HttpConnectionManager::clear_set_current_client_cert_details() {
  if (GetArenaNoVirtual() == NULL && set_current_client_cert_details_ != NULL) {
    delete set_current_client_cert_details_;
  }
  set_current_client_cert_details_ = NULL;
}
inline const ::envoy::api::v2::filter::http::HttpConnectionManager_SetCurrentClientCertDetails& HttpConnectionManager::set_current_client_cert_details() const {
  const ::envoy::api::v2::filter::http::HttpConnectionManager_SetCurrentClientCertDetails* p = set_current_client_cert_details_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.http.HttpConnectionManager.set_current_client_cert_details)
  return p != NULL ? *p : *reinterpret_cast<const ::envoy::api::v2::filter::http::HttpConnectionManager_SetCurrentClientCertDetails*>(
      &::envoy::api::v2::filter::http::_HttpConnectionManager_SetCurrentClientCertDetails_default_instance_);
}
inline ::envoy::api::v2::filter::http::HttpConnectionManager_SetCurrentClientCertDetails* HttpConnectionManager::release_set_current_client_cert_details() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.http.HttpConnectionManager.set_current_client_cert_details)
  
  ::envoy::api::v2::filter::http::HttpConnectionManager_SetCurrentClientCertDetails* temp = set_current_client_cert_details_;
  set_current_client_cert_details_ = NULL;
  return temp;
}
inline ::envoy::api::v2::filter::http::HttpConnectionManager_SetCurrentClientCertDetails* HttpConnectionManager::mutable_set_current_client_cert_details() {
  
  if (set_current_client_cert_details_ == NULL) {
    set_current_client_cert_details_ = new ::envoy::api::v2::filter::http::HttpConnectionManager_SetCurrentClientCertDetails;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.http.HttpConnectionManager.set_current_client_cert_details)
  return set_current_client_cert_details_;
}
inline void HttpConnectionManager::set_allocated_set_current_client_cert_details(::envoy::api::v2::filter::http::HttpConnectionManager_SetCurrentClientCertDetails* set_current_client_cert_details) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete set_current_client_cert_details_;
  }
  if (set_current_client_cert_details) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set_current_client_cert_details = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set_current_client_cert_details, submessage_arena);
    }
    
  } else {
    
  }
  set_current_client_cert_details_ = set_current_client_cert_details;
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.http.HttpConnectionManager.set_current_client_cert_details)
}

inline bool HttpConnectionManager::has_route_specifier() const {
  return route_specifier_case() != ROUTE_SPECIFIER_NOT_SET;
}
inline void HttpConnectionManager::clear_has_route_specifier() {
  _oneof_case_[0] = ROUTE_SPECIFIER_NOT_SET;
}
inline HttpConnectionManager::RouteSpecifierCase HttpConnectionManager::route_specifier_case() const {
  return HttpConnectionManager::RouteSpecifierCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace http
}  // namespace filter
}  // namespace v2
}  // namespace api
}  // namespace envoy

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::envoy::api::v2::filter::http::HttpConnectionManager_Tracing_OperationName> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::envoy::api::v2::filter::http::HttpConnectionManager_Tracing_OperationName>() {
  return ::envoy::api::v2::filter::http::HttpConnectionManager_Tracing_OperationName_descriptor();
}
template <> struct is_proto_enum< ::envoy::api::v2::filter::http::HttpConnectionManager_CodecType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::envoy::api::v2::filter::http::HttpConnectionManager_CodecType>() {
  return ::envoy::api::v2::filter::http::HttpConnectionManager_CodecType_descriptor();
}
template <> struct is_proto_enum< ::envoy::api::v2::filter::http::HttpConnectionManager_ForwardClientCertDetails> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::envoy::api::v2::filter::http::HttpConnectionManager_ForwardClientCertDetails>() {
  return ::envoy::api::v2::filter::http::HttpConnectionManager_ForwardClientCertDetails_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_api_2ffilter_2fhttp_2fhttp_5fconnection_5fmanager_2eproto__INCLUDED
