// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/filter/http/buffer.proto

#ifndef PROTOBUF_api_2ffilter_2fhttp_2fbuffer_2eproto__INCLUDED
#define PROTOBUF_api_2ffilter_2fhttp_2fbuffer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)

namespace protobuf_api_2ffilter_2fhttp_2fbuffer_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsBufferImpl();
void InitDefaultsBuffer();
inline void InitDefaults() {
  InitDefaultsBuffer();
}
}  // namespace protobuf_api_2ffilter_2fhttp_2fbuffer_2eproto
namespace envoy {
namespace api {
namespace v2 {
namespace filter {
namespace http {
class Buffer;
class BufferDefaultTypeInternal;
extern BufferDefaultTypeInternal _Buffer_default_instance_;
}  // namespace http
}  // namespace filter
}  // namespace v2
}  // namespace api
}  // namespace envoy
namespace envoy {
namespace api {
namespace v2 {
namespace filter {
namespace http {

// ===================================================================

class Buffer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.filter.http.Buffer) */ {
 public:
  Buffer();
  virtual ~Buffer();

  Buffer(const Buffer& from);

  inline Buffer& operator=(const Buffer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Buffer(Buffer&& from) noexcept
    : Buffer() {
    *this = ::std::move(from);
  }

  inline Buffer& operator=(Buffer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Buffer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Buffer* internal_default_instance() {
    return reinterpret_cast<const Buffer*>(
               &_Buffer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Buffer* other);
  friend void swap(Buffer& a, Buffer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Buffer* New() const PROTOBUF_FINAL { return New(NULL); }

  Buffer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Buffer& from);
  void MergeFrom(const Buffer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Buffer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.UInt32Value max_request_bytes = 1;
  bool has_max_request_bytes() const;
  void clear_max_request_bytes();
  static const int kMaxRequestBytesFieldNumber = 1;
  const ::google::protobuf::UInt32Value& max_request_bytes() const;
  ::google::protobuf::UInt32Value* release_max_request_bytes();
  ::google::protobuf::UInt32Value* mutable_max_request_bytes();
  void set_allocated_max_request_bytes(::google::protobuf::UInt32Value* max_request_bytes);

  // .google.protobuf.Duration max_request_time = 2;
  bool has_max_request_time() const;
  void clear_max_request_time();
  static const int kMaxRequestTimeFieldNumber = 2;
  const ::google::protobuf::Duration& max_request_time() const;
  ::google::protobuf::Duration* release_max_request_time();
  ::google::protobuf::Duration* mutable_max_request_time();
  void set_allocated_max_request_time(::google::protobuf::Duration* max_request_time);

  // @@protoc_insertion_point(class_scope:envoy.api.v2.filter.http.Buffer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::UInt32Value* max_request_bytes_;
  ::google::protobuf::Duration* max_request_time_;
  mutable int _cached_size_;
  friend struct ::protobuf_api_2ffilter_2fhttp_2fbuffer_2eproto::TableStruct;
  friend void ::protobuf_api_2ffilter_2fhttp_2fbuffer_2eproto::InitDefaultsBufferImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Buffer

// .google.protobuf.UInt32Value max_request_bytes = 1;
inline bool Buffer::has_max_request_bytes() const {
  return this != internal_default_instance() && max_request_bytes_ != NULL;
}
inline const ::google::protobuf::UInt32Value& Buffer::max_request_bytes() const {
  const ::google::protobuf::UInt32Value* p = max_request_bytes_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.http.Buffer.max_request_bytes)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::UInt32Value*>(
      &::google::protobuf::_UInt32Value_default_instance_);
}
inline ::google::protobuf::UInt32Value* Buffer::release_max_request_bytes() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.http.Buffer.max_request_bytes)
  
  ::google::protobuf::UInt32Value* temp = max_request_bytes_;
  max_request_bytes_ = NULL;
  return temp;
}
inline ::google::protobuf::UInt32Value* Buffer::mutable_max_request_bytes() {
  
  if (max_request_bytes_ == NULL) {
    max_request_bytes_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.http.Buffer.max_request_bytes)
  return max_request_bytes_;
}
inline void Buffer::set_allocated_max_request_bytes(::google::protobuf::UInt32Value* max_request_bytes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(max_request_bytes_);
  }
  if (max_request_bytes) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(max_request_bytes)->GetArena();
    if (message_arena != submessage_arena) {
      max_request_bytes = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, max_request_bytes, submessage_arena);
    }
    
  } else {
    
  }
  max_request_bytes_ = max_request_bytes;
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.http.Buffer.max_request_bytes)
}

// .google.protobuf.Duration max_request_time = 2;
inline bool Buffer::has_max_request_time() const {
  return this != internal_default_instance() && max_request_time_ != NULL;
}
inline const ::google::protobuf::Duration& Buffer::max_request_time() const {
  const ::google::protobuf::Duration* p = max_request_time_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.http.Buffer.max_request_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* Buffer::release_max_request_time() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.http.Buffer.max_request_time)
  
  ::google::protobuf::Duration* temp = max_request_time_;
  max_request_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* Buffer::mutable_max_request_time() {
  
  if (max_request_time_ == NULL) {
    max_request_time_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.http.Buffer.max_request_time)
  return max_request_time_;
}
inline void Buffer::set_allocated_max_request_time(::google::protobuf::Duration* max_request_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(max_request_time_);
  }
  if (max_request_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(max_request_time)->GetArena();
    if (message_arena != submessage_arena) {
      max_request_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, max_request_time, submessage_arena);
    }
    
  } else {
    
  }
  max_request_time_ = max_request_time;
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.http.Buffer.max_request_time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace http
}  // namespace filter
}  // namespace v2
}  // namespace api
}  // namespace envoy

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_api_2ffilter_2fhttp_2fbuffer_2eproto__INCLUDED
