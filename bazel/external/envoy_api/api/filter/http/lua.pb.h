// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/filter/http/lua.proto

#ifndef PROTOBUF_api_2ffilter_2fhttp_2flua_2eproto__INCLUDED
#define PROTOBUF_api_2ffilter_2fhttp_2flua_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_api_2ffilter_2fhttp_2flua_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsLuaImpl();
void InitDefaultsLua();
inline void InitDefaults() {
  InitDefaultsLua();
}
}  // namespace protobuf_api_2ffilter_2fhttp_2flua_2eproto
namespace envoy {
namespace api {
namespace v2 {
namespace filter {
namespace http {
class Lua;
class LuaDefaultTypeInternal;
extern LuaDefaultTypeInternal _Lua_default_instance_;
}  // namespace http
}  // namespace filter
}  // namespace v2
}  // namespace api
}  // namespace envoy
namespace envoy {
namespace api {
namespace v2 {
namespace filter {
namespace http {

// ===================================================================

class Lua : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.filter.http.Lua) */ {
 public:
  Lua();
  virtual ~Lua();

  Lua(const Lua& from);

  inline Lua& operator=(const Lua& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Lua(Lua&& from) noexcept
    : Lua() {
    *this = ::std::move(from);
  }

  inline Lua& operator=(Lua&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Lua& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Lua* internal_default_instance() {
    return reinterpret_cast<const Lua*>(
               &_Lua_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Lua* other);
  friend void swap(Lua& a, Lua& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Lua* New() const PROTOBUF_FINAL { return New(NULL); }

  Lua* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Lua& from);
  void MergeFrom(const Lua& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Lua* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string inline_code = 1;
  void clear_inline_code();
  static const int kInlineCodeFieldNumber = 1;
  const ::std::string& inline_code() const;
  void set_inline_code(const ::std::string& value);
  #if LANG_CXX11
  void set_inline_code(::std::string&& value);
  #endif
  void set_inline_code(const char* value);
  void set_inline_code(const char* value, size_t size);
  ::std::string* mutable_inline_code();
  ::std::string* release_inline_code();
  void set_allocated_inline_code(::std::string* inline_code);

  // @@protoc_insertion_point(class_scope:envoy.api.v2.filter.http.Lua)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr inline_code_;
  mutable int _cached_size_;
  friend struct ::protobuf_api_2ffilter_2fhttp_2flua_2eproto::TableStruct;
  friend void ::protobuf_api_2ffilter_2fhttp_2flua_2eproto::InitDefaultsLuaImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Lua

// string inline_code = 1;
inline void Lua::clear_inline_code() {
  inline_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Lua::inline_code() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.http.Lua.inline_code)
  return inline_code_.GetNoArena();
}
inline void Lua::set_inline_code(const ::std::string& value) {
  
  inline_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.http.Lua.inline_code)
}
#if LANG_CXX11
inline void Lua::set_inline_code(::std::string&& value) {
  
  inline_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.filter.http.Lua.inline_code)
}
#endif
inline void Lua::set_inline_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  inline_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.filter.http.Lua.inline_code)
}
inline void Lua::set_inline_code(const char* value, size_t size) {
  
  inline_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.filter.http.Lua.inline_code)
}
inline ::std::string* Lua::mutable_inline_code() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.http.Lua.inline_code)
  return inline_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Lua::release_inline_code() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.http.Lua.inline_code)
  
  return inline_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Lua::set_allocated_inline_code(::std::string* inline_code) {
  if (inline_code != NULL) {
    
  } else {
    
  }
  inline_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inline_code);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.http.Lua.inline_code)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace http
}  // namespace filter
}  // namespace v2
}  // namespace api
}  // namespace envoy

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_api_2ffilter_2fhttp_2flua_2eproto__INCLUDED
