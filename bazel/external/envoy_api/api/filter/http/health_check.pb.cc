// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/filter/http/health_check.proto

#include "api/filter/http/health_check.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace envoy {
namespace api {
namespace v2 {
namespace filter {
namespace http {
class HealthCheckDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HealthCheck>
      _instance;
} _HealthCheck_default_instance_;
}  // namespace http
}  // namespace filter
}  // namespace v2
}  // namespace api
}  // namespace envoy
namespace protobuf_api_2ffilter_2fhttp_2fhealth_5fcheck_2eproto {
void InitDefaultsHealthCheckImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprotobuf_2fwrappers_2eproto::InitDefaultsBoolValue();
  protobuf_google_2fprotobuf_2fduration_2eproto::InitDefaultsDuration();
  {
    void* ptr = &::envoy::api::v2::filter::http::_HealthCheck_default_instance_;
    new (ptr) ::envoy::api::v2::filter::http::HealthCheck();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::filter::http::HealthCheck::InitAsDefaultInstance();
}

void InitDefaultsHealthCheck() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHealthCheckImpl);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::http::HealthCheck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::http::HealthCheck, pass_through_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::http::HealthCheck, endpoint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::http::HealthCheck, cache_time_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::envoy::api::v2::filter::http::HealthCheck)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::filter::http::_HealthCheck_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "api/filter/http/health_check.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\"api/filter/http/health_check.proto\022\030en"
      "voy.api.v2.filter.http\032\036google/protobuf/"
      "duration.proto\032\036google/protobuf/wrappers"
      ".proto\032\027validate/validate.proto\"\235\001\n\013Heal"
      "thCheck\022A\n\021pass_through_mode\030\001 \001(\0132\032.goo"
      "gle.protobuf.BoolValueB\n\272\351\300\003\005\212\001\002\020\001\022\034\n\010en"
      "dpoint\030\002 \001(\tB\n\272\351\300\003\005\212\001\002\020\001\022-\n\ncache_time\030\003"
      " \001(\0132\031.google.protobuf.Durationb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 319);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "api/filter/http/health_check.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2fduration_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2fwrappers_2eproto::AddDescriptors();
  ::protobuf_validate_2fvalidate_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_api_2ffilter_2fhttp_2fhealth_5fcheck_2eproto
namespace envoy {
namespace api {
namespace v2 {
namespace filter {
namespace http {

// ===================================================================

void HealthCheck::InitAsDefaultInstance() {
  ::envoy::api::v2::filter::http::_HealthCheck_default_instance_._instance.get_mutable()->pass_through_mode_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
  ::envoy::api::v2::filter::http::_HealthCheck_default_instance_._instance.get_mutable()->cache_time_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
}
void HealthCheck::clear_pass_through_mode() {
  if (GetArenaNoVirtual() == NULL && pass_through_mode_ != NULL) {
    delete pass_through_mode_;
  }
  pass_through_mode_ = NULL;
}
void HealthCheck::clear_cache_time() {
  if (GetArenaNoVirtual() == NULL && cache_time_ != NULL) {
    delete cache_time_;
  }
  cache_time_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HealthCheck::kPassThroughModeFieldNumber;
const int HealthCheck::kEndpointFieldNumber;
const int HealthCheck::kCacheTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HealthCheck::HealthCheck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2ffilter_2fhttp_2fhealth_5fcheck_2eproto::InitDefaultsHealthCheck();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.http.HealthCheck)
}
HealthCheck::HealthCheck(const HealthCheck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  endpoint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.endpoint().size() > 0) {
    endpoint_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.endpoint_);
  }
  if (from.has_pass_through_mode()) {
    pass_through_mode_ = new ::google::protobuf::BoolValue(*from.pass_through_mode_);
  } else {
    pass_through_mode_ = NULL;
  }
  if (from.has_cache_time()) {
    cache_time_ = new ::google::protobuf::Duration(*from.cache_time_);
  } else {
    cache_time_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.http.HealthCheck)
}

void HealthCheck::SharedCtor() {
  endpoint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&pass_through_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cache_time_) -
      reinterpret_cast<char*>(&pass_through_mode_)) + sizeof(cache_time_));
  _cached_size_ = 0;
}

HealthCheck::~HealthCheck() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.http.HealthCheck)
  SharedDtor();
}

void HealthCheck::SharedDtor() {
  endpoint_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pass_through_mode_;
  if (this != internal_default_instance()) delete cache_time_;
}

void HealthCheck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HealthCheck::descriptor() {
  ::protobuf_api_2ffilter_2fhttp_2fhealth_5fcheck_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2fhttp_2fhealth_5fcheck_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HealthCheck& HealthCheck::default_instance() {
  ::protobuf_api_2ffilter_2fhttp_2fhealth_5fcheck_2eproto::InitDefaultsHealthCheck();
  return *internal_default_instance();
}

HealthCheck* HealthCheck::New(::google::protobuf::Arena* arena) const {
  HealthCheck* n = new HealthCheck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HealthCheck::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.http.HealthCheck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  endpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && pass_through_mode_ != NULL) {
    delete pass_through_mode_;
  }
  pass_through_mode_ = NULL;
  if (GetArenaNoVirtual() == NULL && cache_time_ != NULL) {
    delete cache_time_;
  }
  cache_time_ = NULL;
  _internal_metadata_.Clear();
}

bool HealthCheck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.http.HealthCheck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.BoolValue pass_through_mode = 1 [(.validate.rules) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pass_through_mode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string endpoint = 2 [(.validate.rules) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_endpoint()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->endpoint().data(), static_cast<int>(this->endpoint().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.filter.http.HealthCheck.endpoint"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration cache_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cache_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.http.HealthCheck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.http.HealthCheck)
  return false;
#undef DO_
}

void HealthCheck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.http.HealthCheck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.BoolValue pass_through_mode = 1 [(.validate.rules) = {
  if (this->has_pass_through_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->pass_through_mode_, output);
  }

  // string endpoint = 2 [(.validate.rules) = {
  if (this->endpoint().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->endpoint().data(), static_cast<int>(this->endpoint().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.http.HealthCheck.endpoint");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->endpoint(), output);
  }

  // .google.protobuf.Duration cache_time = 3;
  if (this->has_cache_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->cache_time_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.http.HealthCheck)
}

::google::protobuf::uint8* HealthCheck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.http.HealthCheck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.BoolValue pass_through_mode = 1 [(.validate.rules) = {
  if (this->has_pass_through_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->pass_through_mode_, deterministic, target);
  }

  // string endpoint = 2 [(.validate.rules) = {
  if (this->endpoint().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->endpoint().data(), static_cast<int>(this->endpoint().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.http.HealthCheck.endpoint");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->endpoint(), target);
  }

  // .google.protobuf.Duration cache_time = 3;
  if (this->has_cache_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->cache_time_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.http.HealthCheck)
  return target;
}

size_t HealthCheck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.http.HealthCheck)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string endpoint = 2 [(.validate.rules) = {
  if (this->endpoint().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->endpoint());
  }

  // .google.protobuf.BoolValue pass_through_mode = 1 [(.validate.rules) = {
  if (this->has_pass_through_mode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->pass_through_mode_);
  }

  // .google.protobuf.Duration cache_time = 3;
  if (this->has_cache_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->cache_time_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HealthCheck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.http.HealthCheck)
  GOOGLE_DCHECK_NE(&from, this);
  const HealthCheck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HealthCheck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.http.HealthCheck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.http.HealthCheck)
    MergeFrom(*source);
  }
}

void HealthCheck::MergeFrom(const HealthCheck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.http.HealthCheck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.endpoint().size() > 0) {

    endpoint_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.endpoint_);
  }
  if (from.has_pass_through_mode()) {
    mutable_pass_through_mode()->::google::protobuf::BoolValue::MergeFrom(from.pass_through_mode());
  }
  if (from.has_cache_time()) {
    mutable_cache_time()->::google::protobuf::Duration::MergeFrom(from.cache_time());
  }
}

void HealthCheck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.http.HealthCheck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HealthCheck::CopyFrom(const HealthCheck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.http.HealthCheck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthCheck::IsInitialized() const {
  return true;
}

void HealthCheck::Swap(HealthCheck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HealthCheck::InternalSwap(HealthCheck* other) {
  using std::swap;
  endpoint_.Swap(&other->endpoint_);
  swap(pass_through_mode_, other->pass_through_mode_);
  swap(cache_time_, other->cache_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HealthCheck::GetMetadata() const {
  protobuf_api_2ffilter_2fhttp_2fhealth_5fcheck_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2fhttp_2fhealth_5fcheck_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace http
}  // namespace filter
}  // namespace v2
}  // namespace api
}  // namespace envoy

// @@protoc_insertion_point(global_scope)
