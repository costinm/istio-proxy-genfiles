// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/filter/http/fault.proto

#include "api/filter/http/fault.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace envoy {
namespace api {
namespace v2 {
namespace filter {
namespace http {
class FaultAbortDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FaultAbort>
      _instance;
  ::google::protobuf::uint32 http_status_;
} _FaultAbort_default_instance_;
class HTTPFaultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HTTPFault>
      _instance;
} _HTTPFault_default_instance_;
}  // namespace http
}  // namespace filter
}  // namespace v2
}  // namespace api
}  // namespace envoy
namespace protobuf_api_2ffilter_2fhttp_2ffault_2eproto {
void InitDefaultsFaultAbortImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::envoy::api::v2::filter::http::_FaultAbort_default_instance_;
    new (ptr) ::envoy::api::v2::filter::http::FaultAbort();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::filter::http::FaultAbort::InitAsDefaultInstance();
}

void InitDefaultsFaultAbort() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFaultAbortImpl);
}

void InitDefaultsHTTPFaultImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_api_2ffilter_2ffault_2eproto::InitDefaultsFaultDelay();
  protobuf_api_2ffilter_2fhttp_2ffault_2eproto::InitDefaultsFaultAbort();
  protobuf_api_2frds_2eproto::InitDefaultsHeaderMatcher();
  {
    void* ptr = &::envoy::api::v2::filter::http::_HTTPFault_default_instance_;
    new (ptr) ::envoy::api::v2::filter::http::HTTPFault();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::filter::http::HTTPFault::InitAsDefaultInstance();
}

void InitDefaultsHTTPFault() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHTTPFaultImpl);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::http::FaultAbort, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::http::FaultAbort, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::http::FaultAbort, percent_),
  offsetof(::envoy::api::v2::filter::http::FaultAbortDefaultTypeInternal, http_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::http::FaultAbort, error_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::http::HTTPFault, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::http::HTTPFault, delay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::http::HTTPFault, abort_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::http::HTTPFault, upstream_cluster_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::http::HTTPFault, headers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::http::HTTPFault, downstream_nodes_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::envoy::api::v2::filter::http::FaultAbort)},
  { 8, -1, sizeof(::envoy::api::v2::filter::http::HTTPFault)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::filter::http::_FaultAbort_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::filter::http::_HTTPFault_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "api/filter/http/fault.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\033api/filter/http/fault.proto\022\030envoy.api"
      ".v2.filter.http\032\rapi/rds.proto\032\026api/filt"
      "er/fault.proto\"B\n\nFaultAbort\022\017\n\007percent\030"
      "\001 \001(\r\022\025\n\013http_status\030\002 \001(\rH\000B\014\n\nerror_ty"
      "pe\"\322\001\n\tHTTPFault\022.\n\005delay\030\001 \001(\0132\037.envoy."
      "api.v2.filter.FaultDelay\0223\n\005abort\030\002 \001(\0132"
      "$.envoy.api.v2.filter.http.FaultAbort\022\030\n"
      "\020upstream_cluster\030\003 \001(\t\022,\n\007headers\030\004 \003(\013"
      "2\033.envoy.api.v2.HeaderMatcher\022\030\n\020downstr"
      "eam_nodes\030\005 \003(\tb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 383);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "api/filter/http/fault.proto", &protobuf_RegisterTypes);
  ::protobuf_api_2frds_2eproto::AddDescriptors();
  ::protobuf_api_2ffilter_2ffault_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_api_2ffilter_2fhttp_2ffault_2eproto
namespace envoy {
namespace api {
namespace v2 {
namespace filter {
namespace http {

// ===================================================================

void FaultAbort::InitAsDefaultInstance() {
  ::envoy::api::v2::filter::http::_FaultAbort_default_instance_.http_status_ = 0u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FaultAbort::kPercentFieldNumber;
const int FaultAbort::kHttpStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FaultAbort::FaultAbort()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2ffilter_2fhttp_2ffault_2eproto::InitDefaultsFaultAbort();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.http.FaultAbort)
}
FaultAbort::FaultAbort(const FaultAbort& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  percent_ = from.percent_;
  clear_has_error_type();
  switch (from.error_type_case()) {
    case kHttpStatus: {
      set_http_status(from.http_status());
      break;
    }
    case ERROR_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.http.FaultAbort)
}

void FaultAbort::SharedCtor() {
  percent_ = 0u;
  clear_has_error_type();
  _cached_size_ = 0;
}

FaultAbort::~FaultAbort() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.http.FaultAbort)
  SharedDtor();
}

void FaultAbort::SharedDtor() {
  if (has_error_type()) {
    clear_error_type();
  }
}

void FaultAbort::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FaultAbort::descriptor() {
  ::protobuf_api_2ffilter_2fhttp_2ffault_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2fhttp_2ffault_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FaultAbort& FaultAbort::default_instance() {
  ::protobuf_api_2ffilter_2fhttp_2ffault_2eproto::InitDefaultsFaultAbort();
  return *internal_default_instance();
}

FaultAbort* FaultAbort::New(::google::protobuf::Arena* arena) const {
  FaultAbort* n = new FaultAbort;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FaultAbort::clear_error_type() {
// @@protoc_insertion_point(one_of_clear_start:envoy.api.v2.filter.http.FaultAbort)
  switch (error_type_case()) {
    case kHttpStatus: {
      // No need to clear
      break;
    }
    case ERROR_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ERROR_TYPE_NOT_SET;
}


void FaultAbort::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.http.FaultAbort)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  percent_ = 0u;
  clear_error_type();
  _internal_metadata_.Clear();
}

bool FaultAbort::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.http.FaultAbort)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 percent = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &percent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 http_status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          clear_error_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_type_.http_status_)));
          set_has_http_status();
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.http.FaultAbort)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.http.FaultAbort)
  return false;
#undef DO_
}

void FaultAbort::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.http.FaultAbort)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 percent = 1;
  if (this->percent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->percent(), output);
  }

  // uint32 http_status = 2;
  if (has_http_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->http_status(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.http.FaultAbort)
}

::google::protobuf::uint8* FaultAbort::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.http.FaultAbort)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 percent = 1;
  if (this->percent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->percent(), target);
  }

  // uint32 http_status = 2;
  if (has_http_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->http_status(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.http.FaultAbort)
  return target;
}

size_t FaultAbort::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.http.FaultAbort)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 percent = 1;
  if (this->percent() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->percent());
  }

  switch (error_type_case()) {
    // uint32 http_status = 2;
    case kHttpStatus: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->http_status());
      break;
    }
    case ERROR_TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FaultAbort::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.http.FaultAbort)
  GOOGLE_DCHECK_NE(&from, this);
  const FaultAbort* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FaultAbort>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.http.FaultAbort)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.http.FaultAbort)
    MergeFrom(*source);
  }
}

void FaultAbort::MergeFrom(const FaultAbort& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.http.FaultAbort)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.percent() != 0) {
    set_percent(from.percent());
  }
  switch (from.error_type_case()) {
    case kHttpStatus: {
      set_http_status(from.http_status());
      break;
    }
    case ERROR_TYPE_NOT_SET: {
      break;
    }
  }
}

void FaultAbort::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.http.FaultAbort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaultAbort::CopyFrom(const FaultAbort& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.http.FaultAbort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaultAbort::IsInitialized() const {
  return true;
}

void FaultAbort::Swap(FaultAbort* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FaultAbort::InternalSwap(FaultAbort* other) {
  using std::swap;
  swap(percent_, other->percent_);
  swap(error_type_, other->error_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FaultAbort::GetMetadata() const {
  protobuf_api_2ffilter_2fhttp_2ffault_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2fhttp_2ffault_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HTTPFault::InitAsDefaultInstance() {
  ::envoy::api::v2::filter::http::_HTTPFault_default_instance_._instance.get_mutable()->delay_ = const_cast< ::envoy::api::v2::filter::FaultDelay*>(
      ::envoy::api::v2::filter::FaultDelay::internal_default_instance());
  ::envoy::api::v2::filter::http::_HTTPFault_default_instance_._instance.get_mutable()->abort_ = const_cast< ::envoy::api::v2::filter::http::FaultAbort*>(
      ::envoy::api::v2::filter::http::FaultAbort::internal_default_instance());
}
void HTTPFault::clear_delay() {
  if (GetArenaNoVirtual() == NULL && delay_ != NULL) {
    delete delay_;
  }
  delay_ = NULL;
}
void HTTPFault::clear_headers() {
  headers_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HTTPFault::kDelayFieldNumber;
const int HTTPFault::kAbortFieldNumber;
const int HTTPFault::kUpstreamClusterFieldNumber;
const int HTTPFault::kHeadersFieldNumber;
const int HTTPFault::kDownstreamNodesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HTTPFault::HTTPFault()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2ffilter_2fhttp_2ffault_2eproto::InitDefaultsHTTPFault();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.http.HTTPFault)
}
HTTPFault::HTTPFault(const HTTPFault& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      headers_(from.headers_),
      downstream_nodes_(from.downstream_nodes_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  upstream_cluster_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.upstream_cluster().size() > 0) {
    upstream_cluster_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.upstream_cluster_);
  }
  if (from.has_delay()) {
    delay_ = new ::envoy::api::v2::filter::FaultDelay(*from.delay_);
  } else {
    delay_ = NULL;
  }
  if (from.has_abort()) {
    abort_ = new ::envoy::api::v2::filter::http::FaultAbort(*from.abort_);
  } else {
    abort_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.http.HTTPFault)
}

void HTTPFault::SharedCtor() {
  upstream_cluster_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&delay_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&abort_) -
      reinterpret_cast<char*>(&delay_)) + sizeof(abort_));
  _cached_size_ = 0;
}

HTTPFault::~HTTPFault() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.http.HTTPFault)
  SharedDtor();
}

void HTTPFault::SharedDtor() {
  upstream_cluster_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete delay_;
  if (this != internal_default_instance()) delete abort_;
}

void HTTPFault::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HTTPFault::descriptor() {
  ::protobuf_api_2ffilter_2fhttp_2ffault_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2fhttp_2ffault_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HTTPFault& HTTPFault::default_instance() {
  ::protobuf_api_2ffilter_2fhttp_2ffault_2eproto::InitDefaultsHTTPFault();
  return *internal_default_instance();
}

HTTPFault* HTTPFault::New(::google::protobuf::Arena* arena) const {
  HTTPFault* n = new HTTPFault;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HTTPFault::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.http.HTTPFault)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  headers_.Clear();
  downstream_nodes_.Clear();
  upstream_cluster_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && delay_ != NULL) {
    delete delay_;
  }
  delay_ = NULL;
  if (GetArenaNoVirtual() == NULL && abort_ != NULL) {
    delete abort_;
  }
  abort_ = NULL;
  _internal_metadata_.Clear();
}

bool HTTPFault::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.http.HTTPFault)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.filter.FaultDelay delay = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_delay()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.filter.http.FaultAbort abort = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_abort()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string upstream_cluster = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_upstream_cluster()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->upstream_cluster().data(), static_cast<int>(this->upstream_cluster().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.filter.http.HTTPFault.upstream_cluster"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .envoy.api.v2.HeaderMatcher headers = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_headers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string downstream_nodes = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_downstream_nodes()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->downstream_nodes(this->downstream_nodes_size() - 1).data(),
            static_cast<int>(this->downstream_nodes(this->downstream_nodes_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.filter.http.HTTPFault.downstream_nodes"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.http.HTTPFault)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.http.HTTPFault)
  return false;
#undef DO_
}

void HTTPFault::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.http.HTTPFault)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.filter.FaultDelay delay = 1;
  if (this->has_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->delay_, output);
  }

  // .envoy.api.v2.filter.http.FaultAbort abort = 2;
  if (this->has_abort()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->abort_, output);
  }

  // string upstream_cluster = 3;
  if (this->upstream_cluster().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->upstream_cluster().data(), static_cast<int>(this->upstream_cluster().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.http.HTTPFault.upstream_cluster");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->upstream_cluster(), output);
  }

  // repeated .envoy.api.v2.HeaderMatcher headers = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->headers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->headers(static_cast<int>(i)), output);
  }

  // repeated string downstream_nodes = 5;
  for (int i = 0, n = this->downstream_nodes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->downstream_nodes(i).data(), static_cast<int>(this->downstream_nodes(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.http.HTTPFault.downstream_nodes");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->downstream_nodes(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.http.HTTPFault)
}

::google::protobuf::uint8* HTTPFault::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.http.HTTPFault)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.filter.FaultDelay delay = 1;
  if (this->has_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->delay_, deterministic, target);
  }

  // .envoy.api.v2.filter.http.FaultAbort abort = 2;
  if (this->has_abort()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->abort_, deterministic, target);
  }

  // string upstream_cluster = 3;
  if (this->upstream_cluster().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->upstream_cluster().data(), static_cast<int>(this->upstream_cluster().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.http.HTTPFault.upstream_cluster");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->upstream_cluster(), target);
  }

  // repeated .envoy.api.v2.HeaderMatcher headers = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->headers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->headers(static_cast<int>(i)), deterministic, target);
  }

  // repeated string downstream_nodes = 5;
  for (int i = 0, n = this->downstream_nodes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->downstream_nodes(i).data(), static_cast<int>(this->downstream_nodes(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.http.HTTPFault.downstream_nodes");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->downstream_nodes(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.http.HTTPFault)
  return target;
}

size_t HTTPFault::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.http.HTTPFault)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .envoy.api.v2.HeaderMatcher headers = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->headers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->headers(static_cast<int>(i)));
    }
  }

  // repeated string downstream_nodes = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->downstream_nodes_size());
  for (int i = 0, n = this->downstream_nodes_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->downstream_nodes(i));
  }

  // string upstream_cluster = 3;
  if (this->upstream_cluster().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->upstream_cluster());
  }

  // .envoy.api.v2.filter.FaultDelay delay = 1;
  if (this->has_delay()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->delay_);
  }

  // .envoy.api.v2.filter.http.FaultAbort abort = 2;
  if (this->has_abort()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->abort_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HTTPFault::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.http.HTTPFault)
  GOOGLE_DCHECK_NE(&from, this);
  const HTTPFault* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HTTPFault>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.http.HTTPFault)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.http.HTTPFault)
    MergeFrom(*source);
  }
}

void HTTPFault::MergeFrom(const HTTPFault& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.http.HTTPFault)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  headers_.MergeFrom(from.headers_);
  downstream_nodes_.MergeFrom(from.downstream_nodes_);
  if (from.upstream_cluster().size() > 0) {

    upstream_cluster_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.upstream_cluster_);
  }
  if (from.has_delay()) {
    mutable_delay()->::envoy::api::v2::filter::FaultDelay::MergeFrom(from.delay());
  }
  if (from.has_abort()) {
    mutable_abort()->::envoy::api::v2::filter::http::FaultAbort::MergeFrom(from.abort());
  }
}

void HTTPFault::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.http.HTTPFault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HTTPFault::CopyFrom(const HTTPFault& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.http.HTTPFault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HTTPFault::IsInitialized() const {
  return true;
}

void HTTPFault::Swap(HTTPFault* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HTTPFault::InternalSwap(HTTPFault* other) {
  using std::swap;
  headers_.InternalSwap(&other->headers_);
  downstream_nodes_.InternalSwap(&other->downstream_nodes_);
  upstream_cluster_.Swap(&other->upstream_cluster_);
  swap(delay_, other->delay_);
  swap(abort_, other->abort_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HTTPFault::GetMetadata() const {
  protobuf_api_2ffilter_2fhttp_2ffault_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2fhttp_2ffault_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace http
}  // namespace filter
}  // namespace v2
}  // namespace api
}  // namespace envoy

// @@protoc_insertion_point(global_scope)
