// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/filter/accesslog/accesslog.proto

#include "api/filter/accesslog/accesslog.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace envoy {
namespace api {
namespace v2 {
namespace filter {
namespace accesslog {
class AccessLogCommonDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AccessLogCommon>
      _instance;
} _AccessLogCommon_default_instance_;
class ResponseFlagsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseFlags>
      _instance;
} _ResponseFlags_default_instance_;
class TLSPropertiesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TLSProperties>
      _instance;
} _TLSProperties_default_instance_;
class TCPAccessLogEntryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TCPAccessLogEntry>
      _instance;
} _TCPAccessLogEntry_default_instance_;
class HTTPRequestProperties_RequestHeadersEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HTTPRequestProperties_RequestHeadersEntry_DoNotUse>
      _instance;
} _HTTPRequestProperties_RequestHeadersEntry_DoNotUse_default_instance_;
class HTTPRequestPropertiesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HTTPRequestProperties>
      _instance;
} _HTTPRequestProperties_default_instance_;
class HTTPResponseProperties_ResponseHeadersEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HTTPResponseProperties_ResponseHeadersEntry_DoNotUse>
      _instance;
} _HTTPResponseProperties_ResponseHeadersEntry_DoNotUse_default_instance_;
class HTTPResponsePropertiesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HTTPResponseProperties>
      _instance;
} _HTTPResponseProperties_default_instance_;
class HTTPAccessLogEntryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HTTPAccessLogEntry>
      _instance;
} _HTTPAccessLogEntry_default_instance_;
class ComparisonFilterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ComparisonFilter>
      _instance;
} _ComparisonFilter_default_instance_;
class StatusCodeFilterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StatusCodeFilter>
      _instance;
} _StatusCodeFilter_default_instance_;
class DurationFilterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DurationFilter>
      _instance;
} _DurationFilter_default_instance_;
class NotHealthCheckFilterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NotHealthCheckFilter>
      _instance;
} _NotHealthCheckFilter_default_instance_;
class TraceableFilterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TraceableFilter>
      _instance;
} _TraceableFilter_default_instance_;
class RuntimeFilterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RuntimeFilter>
      _instance;
} _RuntimeFilter_default_instance_;
class AndFilterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AndFilter>
      _instance;
} _AndFilter_default_instance_;
class OrFilterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OrFilter>
      _instance;
} _OrFilter_default_instance_;
class AccessLogFilterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AccessLogFilter>
      _instance;
  const ::envoy::api::v2::filter::accesslog::StatusCodeFilter* status_code_filter_;
  const ::envoy::api::v2::filter::accesslog::DurationFilter* duration_filter_;
  const ::envoy::api::v2::filter::accesslog::NotHealthCheckFilter* not_health_check_filter_;
  const ::envoy::api::v2::filter::accesslog::TraceableFilter* traceable_filter_;
  const ::envoy::api::v2::filter::accesslog::RuntimeFilter* runtime_filter_;
  const ::envoy::api::v2::filter::accesslog::AndFilter* and_filter_;
  const ::envoy::api::v2::filter::accesslog::OrFilter* or_filter_;
} _AccessLogFilter_default_instance_;
class FileAccessLogDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FileAccessLog>
      _instance;
} _FileAccessLog_default_instance_;
class AccessLogServiceConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AccessLogServiceConfig>
      _instance;
} _AccessLogServiceConfig_default_instance_;
class StreamAccessLogsMessage_IdentifierDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StreamAccessLogsMessage_Identifier>
      _instance;
} _StreamAccessLogsMessage_Identifier_default_instance_;
class StreamAccessLogsMessage_HTTPAccessLogEntriesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StreamAccessLogsMessage_HTTPAccessLogEntries>
      _instance;
} _StreamAccessLogsMessage_HTTPAccessLogEntries_default_instance_;
class StreamAccessLogsMessage_TCPAccessLogEntriesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StreamAccessLogsMessage_TCPAccessLogEntries>
      _instance;
} _StreamAccessLogsMessage_TCPAccessLogEntries_default_instance_;
class StreamAccessLogsMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StreamAccessLogsMessage>
      _instance;
  const ::envoy::api::v2::filter::accesslog::StreamAccessLogsMessage_HTTPAccessLogEntries* http_logs_;
  const ::envoy::api::v2::filter::accesslog::StreamAccessLogsMessage_TCPAccessLogEntries* tcp_logs_;
} _StreamAccessLogsMessage_default_instance_;
class StreamAccessLogsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StreamAccessLogsResponse>
      _instance;
} _StreamAccessLogsResponse_default_instance_;
class AccessLogDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AccessLog>
      _instance;
} _AccessLog_default_instance_;
}  // namespace accesslog
}  // namespace filter
}  // namespace v2
}  // namespace api
}  // namespace envoy
namespace protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto {
void InitDefaultsAccessLogCommonImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_api_2faddress_2eproto::InitDefaultsSocketAddress();
  protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsTLSProperties();
  protobuf_google_2fprotobuf_2ftimestamp_2eproto::InitDefaultsTimestamp();
  protobuf_google_2fprotobuf_2fduration_2eproto::InitDefaultsDuration();
  protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsResponseFlags();
  protobuf_api_2fbase_2eproto::InitDefaultsMetadata();
  {
    void* ptr = &::envoy::api::v2::filter::accesslog::_AccessLogCommon_default_instance_;
    new (ptr) ::envoy::api::v2::filter::accesslog::AccessLogCommon();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::filter::accesslog::AccessLogCommon::InitAsDefaultInstance();
}

void InitDefaultsAccessLogCommon() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAccessLogCommonImpl);
}

void InitDefaultsResponseFlagsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::envoy::api::v2::filter::accesslog::_ResponseFlags_default_instance_;
    new (ptr) ::envoy::api::v2::filter::accesslog::ResponseFlags();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::filter::accesslog::ResponseFlags::InitAsDefaultInstance();
}

void InitDefaultsResponseFlags() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsResponseFlagsImpl);
}

void InitDefaultsTLSPropertiesImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprotobuf_2fwrappers_2eproto::InitDefaultsUInt32Value();
  {
    void* ptr = &::envoy::api::v2::filter::accesslog::_TLSProperties_default_instance_;
    new (ptr) ::envoy::api::v2::filter::accesslog::TLSProperties();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::filter::accesslog::TLSProperties::InitAsDefaultInstance();
}

void InitDefaultsTLSProperties() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTLSPropertiesImpl);
}

void InitDefaultsTCPAccessLogEntryImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsAccessLogCommon();
  {
    void* ptr = &::envoy::api::v2::filter::accesslog::_TCPAccessLogEntry_default_instance_;
    new (ptr) ::envoy::api::v2::filter::accesslog::TCPAccessLogEntry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::filter::accesslog::TCPAccessLogEntry::InitAsDefaultInstance();
}

void InitDefaultsTCPAccessLogEntry() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTCPAccessLogEntryImpl);
}

void InitDefaultsHTTPRequestProperties_RequestHeadersEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::envoy::api::v2::filter::accesslog::_HTTPRequestProperties_RequestHeadersEntry_DoNotUse_default_instance_;
    new (ptr) ::envoy::api::v2::filter::accesslog::HTTPRequestProperties_RequestHeadersEntry_DoNotUse();
  }
  ::envoy::api::v2::filter::accesslog::HTTPRequestProperties_RequestHeadersEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsHTTPRequestProperties_RequestHeadersEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHTTPRequestProperties_RequestHeadersEntry_DoNotUseImpl);
}

void InitDefaultsHTTPRequestPropertiesImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprotobuf_2fwrappers_2eproto::InitDefaultsUInt32Value();
  protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsHTTPRequestProperties_RequestHeadersEntry_DoNotUse();
  {
    void* ptr = &::envoy::api::v2::filter::accesslog::_HTTPRequestProperties_default_instance_;
    new (ptr) ::envoy::api::v2::filter::accesslog::HTTPRequestProperties();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::filter::accesslog::HTTPRequestProperties::InitAsDefaultInstance();
}

void InitDefaultsHTTPRequestProperties() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHTTPRequestPropertiesImpl);
}

void InitDefaultsHTTPResponseProperties_ResponseHeadersEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::envoy::api::v2::filter::accesslog::_HTTPResponseProperties_ResponseHeadersEntry_DoNotUse_default_instance_;
    new (ptr) ::envoy::api::v2::filter::accesslog::HTTPResponseProperties_ResponseHeadersEntry_DoNotUse();
  }
  ::envoy::api::v2::filter::accesslog::HTTPResponseProperties_ResponseHeadersEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsHTTPResponseProperties_ResponseHeadersEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHTTPResponseProperties_ResponseHeadersEntry_DoNotUseImpl);
}

void InitDefaultsHTTPResponsePropertiesImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprotobuf_2fwrappers_2eproto::InitDefaultsUInt32Value();
  protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsHTTPResponseProperties_ResponseHeadersEntry_DoNotUse();
  {
    void* ptr = &::envoy::api::v2::filter::accesslog::_HTTPResponseProperties_default_instance_;
    new (ptr) ::envoy::api::v2::filter::accesslog::HTTPResponseProperties();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::filter::accesslog::HTTPResponseProperties::InitAsDefaultInstance();
}

void InitDefaultsHTTPResponseProperties() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHTTPResponsePropertiesImpl);
}

void InitDefaultsHTTPAccessLogEntryImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsAccessLogCommon();
  protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsHTTPRequestProperties();
  protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsHTTPResponseProperties();
  {
    void* ptr = &::envoy::api::v2::filter::accesslog::_HTTPAccessLogEntry_default_instance_;
    new (ptr) ::envoy::api::v2::filter::accesslog::HTTPAccessLogEntry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::filter::accesslog::HTTPAccessLogEntry::InitAsDefaultInstance();
}

void InitDefaultsHTTPAccessLogEntry() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHTTPAccessLogEntryImpl);
}

void InitDefaultsComparisonFilterImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_api_2fbase_2eproto::InitDefaultsRuntimeUInt32();
  {
    void* ptr = &::envoy::api::v2::filter::accesslog::_ComparisonFilter_default_instance_;
    new (ptr) ::envoy::api::v2::filter::accesslog::ComparisonFilter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::filter::accesslog::ComparisonFilter::InitAsDefaultInstance();
}

void InitDefaultsComparisonFilter() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsComparisonFilterImpl);
}

void InitDefaultsStatusCodeFilterImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsComparisonFilter();
  {
    void* ptr = &::envoy::api::v2::filter::accesslog::_StatusCodeFilter_default_instance_;
    new (ptr) ::envoy::api::v2::filter::accesslog::StatusCodeFilter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::filter::accesslog::StatusCodeFilter::InitAsDefaultInstance();
}

void InitDefaultsStatusCodeFilter() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStatusCodeFilterImpl);
}

void InitDefaultsDurationFilterImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsComparisonFilter();
  {
    void* ptr = &::envoy::api::v2::filter::accesslog::_DurationFilter_default_instance_;
    new (ptr) ::envoy::api::v2::filter::accesslog::DurationFilter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::filter::accesslog::DurationFilter::InitAsDefaultInstance();
}

void InitDefaultsDurationFilter() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDurationFilterImpl);
}

void InitDefaultsNotHealthCheckFilterImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::envoy::api::v2::filter::accesslog::_NotHealthCheckFilter_default_instance_;
    new (ptr) ::envoy::api::v2::filter::accesslog::NotHealthCheckFilter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::filter::accesslog::NotHealthCheckFilter::InitAsDefaultInstance();
}

void InitDefaultsNotHealthCheckFilter() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsNotHealthCheckFilterImpl);
}

void InitDefaultsTraceableFilterImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::envoy::api::v2::filter::accesslog::_TraceableFilter_default_instance_;
    new (ptr) ::envoy::api::v2::filter::accesslog::TraceableFilter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::filter::accesslog::TraceableFilter::InitAsDefaultInstance();
}

void InitDefaultsTraceableFilter() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTraceableFilterImpl);
}

void InitDefaultsRuntimeFilterImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::envoy::api::v2::filter::accesslog::_RuntimeFilter_default_instance_;
    new (ptr) ::envoy::api::v2::filter::accesslog::RuntimeFilter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::filter::accesslog::RuntimeFilter::InitAsDefaultInstance();
}

void InitDefaultsRuntimeFilter() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRuntimeFilterImpl);
}

void InitDefaultsAccessLogFilterImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsStatusCodeFilter();
  protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsDurationFilter();
  protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsNotHealthCheckFilter();
  protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsTraceableFilter();
  protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsRuntimeFilter();
  {
    void* ptr = &::envoy::api::v2::filter::accesslog::_AndFilter_default_instance_;
    new (ptr) ::envoy::api::v2::filter::accesslog::AndFilter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::envoy::api::v2::filter::accesslog::_OrFilter_default_instance_;
    new (ptr) ::envoy::api::v2::filter::accesslog::OrFilter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::envoy::api::v2::filter::accesslog::_AccessLogFilter_default_instance_;
    new (ptr) ::envoy::api::v2::filter::accesslog::AccessLogFilter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::filter::accesslog::AndFilter::InitAsDefaultInstance();
  ::envoy::api::v2::filter::accesslog::OrFilter::InitAsDefaultInstance();
  ::envoy::api::v2::filter::accesslog::AccessLogFilter::InitAsDefaultInstance();
}

void InitDefaultsAccessLogFilter() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAccessLogFilterImpl);
}

void InitDefaultsFileAccessLogImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::envoy::api::v2::filter::accesslog::_FileAccessLog_default_instance_;
    new (ptr) ::envoy::api::v2::filter::accesslog::FileAccessLog();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::filter::accesslog::FileAccessLog::InitAsDefaultInstance();
}

void InitDefaultsFileAccessLog() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFileAccessLogImpl);
}

void InitDefaultsAccessLogServiceConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::envoy::api::v2::filter::accesslog::_AccessLogServiceConfig_default_instance_;
    new (ptr) ::envoy::api::v2::filter::accesslog::AccessLogServiceConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::filter::accesslog::AccessLogServiceConfig::InitAsDefaultInstance();
}

void InitDefaultsAccessLogServiceConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAccessLogServiceConfigImpl);
}

void InitDefaultsStreamAccessLogsMessage_IdentifierImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_api_2fbase_2eproto::InitDefaultsNode();
  {
    void* ptr = &::envoy::api::v2::filter::accesslog::_StreamAccessLogsMessage_Identifier_default_instance_;
    new (ptr) ::envoy::api::v2::filter::accesslog::StreamAccessLogsMessage_Identifier();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::filter::accesslog::StreamAccessLogsMessage_Identifier::InitAsDefaultInstance();
}

void InitDefaultsStreamAccessLogsMessage_Identifier() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStreamAccessLogsMessage_IdentifierImpl);
}

void InitDefaultsStreamAccessLogsMessage_HTTPAccessLogEntriesImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsHTTPAccessLogEntry();
  {
    void* ptr = &::envoy::api::v2::filter::accesslog::_StreamAccessLogsMessage_HTTPAccessLogEntries_default_instance_;
    new (ptr) ::envoy::api::v2::filter::accesslog::StreamAccessLogsMessage_HTTPAccessLogEntries();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::filter::accesslog::StreamAccessLogsMessage_HTTPAccessLogEntries::InitAsDefaultInstance();
}

void InitDefaultsStreamAccessLogsMessage_HTTPAccessLogEntries() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStreamAccessLogsMessage_HTTPAccessLogEntriesImpl);
}

void InitDefaultsStreamAccessLogsMessage_TCPAccessLogEntriesImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsTCPAccessLogEntry();
  {
    void* ptr = &::envoy::api::v2::filter::accesslog::_StreamAccessLogsMessage_TCPAccessLogEntries_default_instance_;
    new (ptr) ::envoy::api::v2::filter::accesslog::StreamAccessLogsMessage_TCPAccessLogEntries();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::filter::accesslog::StreamAccessLogsMessage_TCPAccessLogEntries::InitAsDefaultInstance();
}

void InitDefaultsStreamAccessLogsMessage_TCPAccessLogEntries() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStreamAccessLogsMessage_TCPAccessLogEntriesImpl);
}

void InitDefaultsStreamAccessLogsMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsStreamAccessLogsMessage_Identifier();
  protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsStreamAccessLogsMessage_HTTPAccessLogEntries();
  protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsStreamAccessLogsMessage_TCPAccessLogEntries();
  {
    void* ptr = &::envoy::api::v2::filter::accesslog::_StreamAccessLogsMessage_default_instance_;
    new (ptr) ::envoy::api::v2::filter::accesslog::StreamAccessLogsMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::filter::accesslog::StreamAccessLogsMessage::InitAsDefaultInstance();
}

void InitDefaultsStreamAccessLogsMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStreamAccessLogsMessageImpl);
}

void InitDefaultsStreamAccessLogsResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::envoy::api::v2::filter::accesslog::_StreamAccessLogsResponse_default_instance_;
    new (ptr) ::envoy::api::v2::filter::accesslog::StreamAccessLogsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::filter::accesslog::StreamAccessLogsResponse::InitAsDefaultInstance();
}

void InitDefaultsStreamAccessLogsResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStreamAccessLogsResponseImpl);
}

void InitDefaultsAccessLogImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsAccessLogFilter();
  protobuf_google_2fprotobuf_2fstruct_2eproto::InitDefaultsListValue();
  {
    void* ptr = &::envoy::api::v2::filter::accesslog::_AccessLog_default_instance_;
    new (ptr) ::envoy::api::v2::filter::accesslog::AccessLog();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::filter::accesslog::AccessLog::InitAsDefaultInstance();
}

void InitDefaultsAccessLog() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAccessLogImpl);
}

::google::protobuf::Metadata file_level_metadata[26];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::AccessLogCommon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::AccessLogCommon, sample_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::AccessLogCommon, destination_host_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::AccessLogCommon, tls_properties_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::AccessLogCommon, start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::AccessLogCommon, time_to_last_rx_byte_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::AccessLogCommon, time_to_first_upstream_rx_byte_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::AccessLogCommon, time_to_last_upstream_rx_byte_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::AccessLogCommon, upstream_host_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::AccessLogCommon, upstream_cluster_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::AccessLogCommon, response_flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::AccessLogCommon, metadata_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::ResponseFlags, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::ResponseFlags, failed_local_healthcheck_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::ResponseFlags, no_healthy_upstream_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::ResponseFlags, upstream_request_timeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::ResponseFlags, local_reset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::ResponseFlags, upstream_remote_reset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::ResponseFlags, upstream_connection_failure_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::ResponseFlags, upstream_connection_termination_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::ResponseFlags, upstream_overflow_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::ResponseFlags, no_route_found_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::ResponseFlags, delay_injected_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::ResponseFlags, fault_injected_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::ResponseFlags, rate_limited_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::TLSProperties, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::TLSProperties, tls_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::TLSProperties, tls_cipher_suite_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::TLSProperties, tls_sni_hostname_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::TCPAccessLogEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::TCPAccessLogEntry, common_properties_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::HTTPRequestProperties_RequestHeadersEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::HTTPRequestProperties_RequestHeadersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::HTTPRequestProperties_RequestHeadersEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::HTTPRequestProperties_RequestHeadersEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::HTTPRequestProperties, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::HTTPRequestProperties, request_method_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::HTTPRequestProperties, scheme_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::HTTPRequestProperties, authority_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::HTTPRequestProperties, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::HTTPRequestProperties, path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::HTTPRequestProperties, user_agent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::HTTPRequestProperties, referer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::HTTPRequestProperties, forwarded_for_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::HTTPRequestProperties, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::HTTPRequestProperties, original_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::HTTPRequestProperties, request_headers_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::HTTPRequestProperties, request_body_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::HTTPRequestProperties, request_headers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::HTTPResponseProperties_ResponseHeadersEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::HTTPResponseProperties_ResponseHeadersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::HTTPResponseProperties_ResponseHeadersEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::HTTPResponseProperties_ResponseHeadersEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::HTTPResponseProperties, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::HTTPResponseProperties, response_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::HTTPResponseProperties, response_headers_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::HTTPResponseProperties, response_body_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::HTTPResponseProperties, response_headers_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::HTTPAccessLogEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::HTTPAccessLogEntry, common_properties_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::HTTPAccessLogEntry, protocol_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::HTTPAccessLogEntry, request_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::HTTPAccessLogEntry, response_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::ComparisonFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::ComparisonFilter, op_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::ComparisonFilter, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::StatusCodeFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::StatusCodeFilter, comparison_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::DurationFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::DurationFilter, comparison_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::NotHealthCheckFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::TraceableFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::RuntimeFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::RuntimeFilter, runtime_key_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::AndFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::AndFilter, filters_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::OrFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::OrFilter, filters_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::AccessLogFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::AccessLogFilter, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::envoy::api::v2::filter::accesslog::AccessLogFilterDefaultTypeInternal, status_code_filter_),
  offsetof(::envoy::api::v2::filter::accesslog::AccessLogFilterDefaultTypeInternal, duration_filter_),
  offsetof(::envoy::api::v2::filter::accesslog::AccessLogFilterDefaultTypeInternal, not_health_check_filter_),
  offsetof(::envoy::api::v2::filter::accesslog::AccessLogFilterDefaultTypeInternal, traceable_filter_),
  offsetof(::envoy::api::v2::filter::accesslog::AccessLogFilterDefaultTypeInternal, runtime_filter_),
  offsetof(::envoy::api::v2::filter::accesslog::AccessLogFilterDefaultTypeInternal, and_filter_),
  offsetof(::envoy::api::v2::filter::accesslog::AccessLogFilterDefaultTypeInternal, or_filter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::AccessLogFilter, filter_specifier_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::FileAccessLog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::FileAccessLog, path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::FileAccessLog, format_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::AccessLogServiceConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::AccessLogServiceConfig, log_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::AccessLogServiceConfig, cluster_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::StreamAccessLogsMessage_Identifier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::StreamAccessLogsMessage_Identifier, node_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::StreamAccessLogsMessage_Identifier, log_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::StreamAccessLogsMessage_HTTPAccessLogEntries, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::StreamAccessLogsMessage_HTTPAccessLogEntries, log_entry_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::StreamAccessLogsMessage_TCPAccessLogEntries, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::StreamAccessLogsMessage_TCPAccessLogEntries, log_entry_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::StreamAccessLogsMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::StreamAccessLogsMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::StreamAccessLogsMessage, identifier_),
  offsetof(::envoy::api::v2::filter::accesslog::StreamAccessLogsMessageDefaultTypeInternal, http_logs_),
  offsetof(::envoy::api::v2::filter::accesslog::StreamAccessLogsMessageDefaultTypeInternal, tcp_logs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::StreamAccessLogsMessage, log_entries_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::StreamAccessLogsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::AccessLog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::AccessLog, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::AccessLog, filter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::accesslog::AccessLog, config_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::envoy::api::v2::filter::accesslog::AccessLogCommon)},
  { 16, -1, sizeof(::envoy::api::v2::filter::accesslog::ResponseFlags)},
  { 33, -1, sizeof(::envoy::api::v2::filter::accesslog::TLSProperties)},
  { 41, -1, sizeof(::envoy::api::v2::filter::accesslog::TCPAccessLogEntry)},
  { 47, 54, sizeof(::envoy::api::v2::filter::accesslog::HTTPRequestProperties_RequestHeadersEntry_DoNotUse)},
  { 56, -1, sizeof(::envoy::api::v2::filter::accesslog::HTTPRequestProperties)},
  { 74, 81, sizeof(::envoy::api::v2::filter::accesslog::HTTPResponseProperties_ResponseHeadersEntry_DoNotUse)},
  { 83, -1, sizeof(::envoy::api::v2::filter::accesslog::HTTPResponseProperties)},
  { 92, -1, sizeof(::envoy::api::v2::filter::accesslog::HTTPAccessLogEntry)},
  { 101, -1, sizeof(::envoy::api::v2::filter::accesslog::ComparisonFilter)},
  { 108, -1, sizeof(::envoy::api::v2::filter::accesslog::StatusCodeFilter)},
  { 114, -1, sizeof(::envoy::api::v2::filter::accesslog::DurationFilter)},
  { 120, -1, sizeof(::envoy::api::v2::filter::accesslog::NotHealthCheckFilter)},
  { 125, -1, sizeof(::envoy::api::v2::filter::accesslog::TraceableFilter)},
  { 130, -1, sizeof(::envoy::api::v2::filter::accesslog::RuntimeFilter)},
  { 136, -1, sizeof(::envoy::api::v2::filter::accesslog::AndFilter)},
  { 142, -1, sizeof(::envoy::api::v2::filter::accesslog::OrFilter)},
  { 148, -1, sizeof(::envoy::api::v2::filter::accesslog::AccessLogFilter)},
  { 161, -1, sizeof(::envoy::api::v2::filter::accesslog::FileAccessLog)},
  { 168, -1, sizeof(::envoy::api::v2::filter::accesslog::AccessLogServiceConfig)},
  { 175, -1, sizeof(::envoy::api::v2::filter::accesslog::StreamAccessLogsMessage_Identifier)},
  { 182, -1, sizeof(::envoy::api::v2::filter::accesslog::StreamAccessLogsMessage_HTTPAccessLogEntries)},
  { 188, -1, sizeof(::envoy::api::v2::filter::accesslog::StreamAccessLogsMessage_TCPAccessLogEntries)},
  { 194, -1, sizeof(::envoy::api::v2::filter::accesslog::StreamAccessLogsMessage)},
  { 203, -1, sizeof(::envoy::api::v2::filter::accesslog::StreamAccessLogsResponse)},
  { 208, -1, sizeof(::envoy::api::v2::filter::accesslog::AccessLog)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::filter::accesslog::_AccessLogCommon_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::filter::accesslog::_ResponseFlags_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::filter::accesslog::_TLSProperties_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::filter::accesslog::_TCPAccessLogEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::filter::accesslog::_HTTPRequestProperties_RequestHeadersEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::filter::accesslog::_HTTPRequestProperties_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::filter::accesslog::_HTTPResponseProperties_ResponseHeadersEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::filter::accesslog::_HTTPResponseProperties_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::filter::accesslog::_HTTPAccessLogEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::filter::accesslog::_ComparisonFilter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::filter::accesslog::_StatusCodeFilter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::filter::accesslog::_DurationFilter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::filter::accesslog::_NotHealthCheckFilter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::filter::accesslog::_TraceableFilter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::filter::accesslog::_RuntimeFilter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::filter::accesslog::_AndFilter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::filter::accesslog::_OrFilter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::filter::accesslog::_AccessLogFilter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::filter::accesslog::_FileAccessLog_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::filter::accesslog::_AccessLogServiceConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::filter::accesslog::_StreamAccessLogsMessage_Identifier_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::filter::accesslog::_StreamAccessLogsMessage_HTTPAccessLogEntries_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::filter::accesslog::_StreamAccessLogsMessage_TCPAccessLogEntries_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::filter::accesslog::_StreamAccessLogsMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::filter::accesslog::_StreamAccessLogsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::filter::accesslog::_AccessLog_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "api/filter/accesslog/accesslog.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 26);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n$api/filter/accesslog/accesslog.proto\022\035"
      "envoy.api.v2.filter.accesslog\032\021api/addre"
      "ss.proto\032\016api/base.proto\032\036google/protobu"
      "f/duration.proto\032\034google/protobuf/struct"
      ".proto\032\037google/protobuf/timestamp.proto\032"
      "\036google/protobuf/wrappers.proto\032\027validat"
      "e/validate.proto\"\361\004\n\017AccessLogCommon\0225\n\013"
      "sample_rate\030\001 \001(\001B \272\351\300\003\013\022\t!\000\000\000\000\000\000\000\000\272\351\300\003\013"
      "\022\t\031\000\000\000\000\000\000\360\?\0225\n\020destination_host\030\002 \001(\0132\033."
      "envoy.api.v2.SocketAddress\022D\n\016tls_proper"
      "ties\030\003 \001(\0132,.envoy.api.v2.filter.accessl"
      "og.TLSProperties\022.\n\nstart_time\030\004 \001(\0132\032.g"
      "oogle.protobuf.Timestamp\0227\n\024time_to_last"
      "_rx_byte\030\005 \001(\0132\031.google.protobuf.Duratio"
      "n\022A\n\036time_to_first_upstream_rx_byte\030\006 \001("
      "\0132\031.google.protobuf.Duration\022@\n\035time_to_"
      "last_upstream_rx_byte\030\007 \001(\0132\031.google.pro"
      "tobuf.Duration\0222\n\rupstream_host\030\010 \001(\0132\033."
      "envoy.api.v2.SocketAddress\022\030\n\020upstream_c"
      "luster\030\t \001(\t\022D\n\016response_flags\030\n \001(\0132,.e"
      "nvoy.api.v2.filter.accesslog.ResponseFla"
      "gs\022(\n\010metadata\030\013 \001(\0132\026.envoy.api.v2.Meta"
      "data\"\353\002\n\rResponseFlags\022 \n\030failed_local_h"
      "ealthcheck\030\001 \001(\010\022\033\n\023no_healthy_upstream\030"
      "\002 \001(\010\022 \n\030upstream_request_timeout\030\003 \001(\010\022"
      "\023\n\013local_reset\030\004 \001(\010\022\035\n\025upstream_remote_"
      "reset\030\005 \001(\010\022#\n\033upstream_connection_failu"
      "re\030\006 \001(\010\022\'\n\037upstream_connection_terminat"
      "ion\030\007 \001(\010\022\031\n\021upstream_overflow\030\010 \001(\010\022\026\n\016"
      "no_route_found\030\t \001(\010\022\026\n\016delay_injected\030\n"
      " \001(\010\022\026\n\016fault_injected\030\013 \001(\010\022\024\n\014rate_lim"
      "ited\030\014 \001(\010\"\210\002\n\rTLSProperties\022L\n\013tls_vers"
      "ion\030\001 \001(\01627.envoy.api.v2.filter.accesslo"
      "g.TLSProperties.TLSVersion\0226\n\020tls_cipher"
      "_suite\030\002 \001(\0132\034.google.protobuf.UInt32Val"
      "ue\022\030\n\020tls_sni_hostname\030\003 \001(\t\"W\n\nTLSVersi"
      "on\022\027\n\023VERSION_UNSPECIFIED\020\000\022\t\n\005TLSv1\020\001\022\013"
      "\n\007TLSv1_1\020\002\022\013\n\007TLSv1_2\020\003\022\013\n\007TLSv1_3\020\004\"^\n"
      "\021TCPAccessLogEntry\022I\n\021common_properties\030"
      "\001 \001(\0132..envoy.api.v2.filter.accesslog.Ac"
      "cessLogCommon\"\345\003\n\025HTTPRequestProperties\022"
      "3\n\016request_method\030\001 \001(\0162\033.envoy.api.v2.R"
      "equestMethod\022\016\n\006scheme\030\002 \001(\t\022\021\n\tauthorit"
      "y\030\003 \001(\t\022*\n\004port\030\004 \001(\0132\034.google.protobuf."
      "UInt32Value\022\014\n\004path\030\005 \001(\t\022\022\n\nuser_agent\030"
      "\006 \001(\t\022\017\n\007referer\030\007 \001(\t\022\025\n\rforwarded_for\030"
      "\010 \001(\t\022\022\n\nrequest_id\030\t \001(\t\022\025\n\roriginal_pa"
      "th\030\n \001(\t\022\035\n\025request_headers_bytes\030\013 \001(\004\022"
      "\032\n\022request_body_bytes\030\014 \001(\004\022a\n\017request_h"
      "eaders\030\r \003(\0132H.envoy.api.v2.filter.acces"
      "slog.HTTPRequestProperties.RequestHeader"
      "sEntry\0325\n\023RequestHeadersEntry\022\013\n\003key\030\001 \001"
      "(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\250\002\n\026HTTPResponsePr"
      "operties\0223\n\rresponse_code\030\001 \001(\0132\034.google"
      ".protobuf.UInt32Value\022\036\n\026response_header"
      "s_bytes\030\002 \001(\004\022\033\n\023response_body_bytes\030\003 \001"
      "(\004\022d\n\020response_headers\030\004 \003(\0132J.envoy.api"
      ".v2.filter.accesslog.HTTPResponsePropert"
      "ies.ResponseHeadersEntry\0326\n\024ResponseHead"
      "ersEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001"
      "\"\224\003\n\022HTTPAccessLogEntry\022I\n\021common_proper"
      "ties\030\001 \001(\0132..envoy.api.v2.filter.accessl"
      "og.AccessLogCommon\022W\n\020protocol_version\030\002"
      " \001(\0162=.envoy.api.v2.filter.accesslog.HTT"
      "PAccessLogEntry.HTTPVersion\022E\n\007request\030\003"
      " \001(\01324.envoy.api.v2.filter.accesslog.HTT"
      "PRequestProperties\022G\n\010response\030\004 \001(\01325.e"
      "nvoy.api.v2.filter.accesslog.HTTPRespons"
      "eProperties\"J\n\013HTTPVersion\022\030\n\024PROTOCOL_U"
      "NSPECIFIED\020\000\022\n\n\006HTTP10\020\001\022\n\n\006HTTP11\020\002\022\t\n\005"
      "HTTP2\020\003\"\224\001\n\020ComparisonFilter\022>\n\002op\030\001 \001(\016"
      "22.envoy.api.v2.filter.accesslog.Compari"
      "sonFilter.Op\022*\n\005value\030\002 \001(\0132\033.envoy.api."
      "v2.RuntimeUInt32\"\024\n\002Op\022\006\n\002EQ\020\000\022\006\n\002GE\020\001\"W"
      "\n\020StatusCodeFilter\022C\n\ncomparison\030\001 \001(\0132/"
      ".envoy.api.v2.filter.accesslog.Compariso"
      "nFilter\"U\n\016DurationFilter\022C\n\ncomparison\030"
      "\001 \001(\0132/.envoy.api.v2.filter.accesslog.Co"
      "mparisonFilter\"\026\n\024NotHealthCheckFilter\"\021"
      "\n\017TraceableFilter\"$\n\rRuntimeFilter\022\023\n\013ru"
      "ntime_key\030\001 \001(\t\"L\n\tAndFilter\022\?\n\007filters\030"
      "\001 \003(\0132..envoy.api.v2.filter.accesslog.Ac"
      "cessLogFilter\"K\n\010OrFilter\022\?\n\007filters\030\002 \003"
      "(\0132..envoy.api.v2.filter.accesslog.Acces"
      "sLogFilter\"\250\004\n\017AccessLogFilter\022M\n\022status"
      "_code_filter\030\001 \001(\0132/.envoy.api.v2.filter"
      ".accesslog.StatusCodeFilterH\000\022H\n\017duratio"
      "n_filter\030\002 \001(\0132-.envoy.api.v2.filter.acc"
      "esslog.DurationFilterH\000\022V\n\027not_health_ch"
      "eck_filter\030\003 \001(\01323.envoy.api.v2.filter.a"
      "ccesslog.NotHealthCheckFilterH\000\022J\n\020trace"
      "able_filter\030\004 \001(\0132..envoy.api.v2.filter."
      "accesslog.TraceableFilterH\000\022F\n\016runtime_f"
      "ilter\030\005 \001(\0132,.envoy.api.v2.filter.access"
      "log.RuntimeFilterH\000\022>\n\nand_filter\030\006 \001(\0132"
      "(.envoy.api.v2.filter.accesslog.AndFilte"
      "rH\000\022<\n\tor_filter\030\007 \001(\0132\'.envoy.api.v2.fi"
      "lter.accesslog.OrFilterH\000B\022\n\020filter_spec"
      "ifier\"-\n\rFileAccessLog\022\014\n\004path\030\001 \001(\t\022\016\n\006"
      "format\030\002 \001(\t\"@\n\026AccessLogServiceConfig\022\020"
      "\n\010log_name\030\001 \001(\t\022\024\n\014cluster_name\030\002 \001(\t\"\275"
      "\004\n\027StreamAccessLogsMessage\022U\n\nidentifier"
      "\030\001 \001(\0132A.envoy.api.v2.filter.accesslog.S"
      "treamAccessLogsMessage.Identifier\022`\n\thtt"
      "p_logs\030\002 \001(\0132K.envoy.api.v2.filter.acces"
      "slog.StreamAccessLogsMessage.HTTPAccessL"
      "ogEntriesH\000\022^\n\010tcp_logs\030\003 \001(\0132J.envoy.ap"
      "i.v2.filter.accesslog.StreamAccessLogsMe"
      "ssage.TCPAccessLogEntriesH\000\032@\n\nIdentifie"
      "r\022 \n\004node\030\001 \001(\0132\022.envoy.api.v2.Node\022\020\n\010l"
      "og_name\030\002 \001(\t\032\\\n\024HTTPAccessLogEntries\022D\n"
      "\tlog_entry\030\001 \003(\01321.envoy.api.v2.filter.a"
      "ccesslog.HTTPAccessLogEntry\032Z\n\023TCPAccess"
      "LogEntries\022C\n\tlog_entry\030\001 \003(\01320.envoy.ap"
      "i.v2.filter.accesslog.TCPAccessLogEntryB"
      "\r\n\013log_entries\"\032\n\030StreamAccessLogsRespon"
      "se\"\202\001\n\tAccessLog\022\014\n\004name\030\001 \001(\t\022>\n\006filter"
      "\030\002 \001(\0132..envoy.api.v2.filter.accesslog.A"
      "ccessLogFilter\022\'\n\006config\030\003 \001(\0132\027.google."
      "protobuf.Struct2\234\001\n\020AccessLogService\022\207\001\n"
      "\020StreamAccessLogs\0226.envoy.api.v2.filter."
      "accesslog.StreamAccessLogsMessage\0327.envo"
      "y.api.v2.filter.accesslog.StreamAccessLo"
      "gsResponse\"\000(\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4942);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "api/filter/accesslog/accesslog.proto", &protobuf_RegisterTypes);
  ::protobuf_api_2faddress_2eproto::AddDescriptors();
  ::protobuf_api_2fbase_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2fduration_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2fstruct_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2fwrappers_2eproto::AddDescriptors();
  ::protobuf_validate_2fvalidate_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto
namespace envoy {
namespace api {
namespace v2 {
namespace filter {
namespace accesslog {
const ::google::protobuf::EnumDescriptor* TLSProperties_TLSVersion_descriptor() {
  protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::file_level_enum_descriptors[0];
}
bool TLSProperties_TLSVersion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TLSProperties_TLSVersion TLSProperties::VERSION_UNSPECIFIED;
const TLSProperties_TLSVersion TLSProperties::TLSv1;
const TLSProperties_TLSVersion TLSProperties::TLSv1_1;
const TLSProperties_TLSVersion TLSProperties::TLSv1_2;
const TLSProperties_TLSVersion TLSProperties::TLSv1_3;
const TLSProperties_TLSVersion TLSProperties::TLSVersion_MIN;
const TLSProperties_TLSVersion TLSProperties::TLSVersion_MAX;
const int TLSProperties::TLSVersion_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* HTTPAccessLogEntry_HTTPVersion_descriptor() {
  protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::file_level_enum_descriptors[1];
}
bool HTTPAccessLogEntry_HTTPVersion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const HTTPAccessLogEntry_HTTPVersion HTTPAccessLogEntry::PROTOCOL_UNSPECIFIED;
const HTTPAccessLogEntry_HTTPVersion HTTPAccessLogEntry::HTTP10;
const HTTPAccessLogEntry_HTTPVersion HTTPAccessLogEntry::HTTP11;
const HTTPAccessLogEntry_HTTPVersion HTTPAccessLogEntry::HTTP2;
const HTTPAccessLogEntry_HTTPVersion HTTPAccessLogEntry::HTTPVersion_MIN;
const HTTPAccessLogEntry_HTTPVersion HTTPAccessLogEntry::HTTPVersion_MAX;
const int HTTPAccessLogEntry::HTTPVersion_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ComparisonFilter_Op_descriptor() {
  protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::file_level_enum_descriptors[2];
}
bool ComparisonFilter_Op_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ComparisonFilter_Op ComparisonFilter::EQ;
const ComparisonFilter_Op ComparisonFilter::GE;
const ComparisonFilter_Op ComparisonFilter::Op_MIN;
const ComparisonFilter_Op ComparisonFilter::Op_MAX;
const int ComparisonFilter::Op_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void AccessLogCommon::InitAsDefaultInstance() {
  ::envoy::api::v2::filter::accesslog::_AccessLogCommon_default_instance_._instance.get_mutable()->destination_host_ = const_cast< ::envoy::api::v2::SocketAddress*>(
      ::envoy::api::v2::SocketAddress::internal_default_instance());
  ::envoy::api::v2::filter::accesslog::_AccessLogCommon_default_instance_._instance.get_mutable()->tls_properties_ = const_cast< ::envoy::api::v2::filter::accesslog::TLSProperties*>(
      ::envoy::api::v2::filter::accesslog::TLSProperties::internal_default_instance());
  ::envoy::api::v2::filter::accesslog::_AccessLogCommon_default_instance_._instance.get_mutable()->start_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::envoy::api::v2::filter::accesslog::_AccessLogCommon_default_instance_._instance.get_mutable()->time_to_last_rx_byte_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  ::envoy::api::v2::filter::accesslog::_AccessLogCommon_default_instance_._instance.get_mutable()->time_to_first_upstream_rx_byte_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  ::envoy::api::v2::filter::accesslog::_AccessLogCommon_default_instance_._instance.get_mutable()->time_to_last_upstream_rx_byte_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  ::envoy::api::v2::filter::accesslog::_AccessLogCommon_default_instance_._instance.get_mutable()->upstream_host_ = const_cast< ::envoy::api::v2::SocketAddress*>(
      ::envoy::api::v2::SocketAddress::internal_default_instance());
  ::envoy::api::v2::filter::accesslog::_AccessLogCommon_default_instance_._instance.get_mutable()->response_flags_ = const_cast< ::envoy::api::v2::filter::accesslog::ResponseFlags*>(
      ::envoy::api::v2::filter::accesslog::ResponseFlags::internal_default_instance());
  ::envoy::api::v2::filter::accesslog::_AccessLogCommon_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::envoy::api::v2::Metadata*>(
      ::envoy::api::v2::Metadata::internal_default_instance());
}
void AccessLogCommon::clear_destination_host() {
  if (GetArenaNoVirtual() == NULL && destination_host_ != NULL) {
    delete destination_host_;
  }
  destination_host_ = NULL;
}
void AccessLogCommon::clear_start_time() {
  if (GetArenaNoVirtual() == NULL && start_time_ != NULL) {
    delete start_time_;
  }
  start_time_ = NULL;
}
void AccessLogCommon::clear_time_to_last_rx_byte() {
  if (GetArenaNoVirtual() == NULL && time_to_last_rx_byte_ != NULL) {
    delete time_to_last_rx_byte_;
  }
  time_to_last_rx_byte_ = NULL;
}
void AccessLogCommon::clear_time_to_first_upstream_rx_byte() {
  if (GetArenaNoVirtual() == NULL && time_to_first_upstream_rx_byte_ != NULL) {
    delete time_to_first_upstream_rx_byte_;
  }
  time_to_first_upstream_rx_byte_ = NULL;
}
void AccessLogCommon::clear_time_to_last_upstream_rx_byte() {
  if (GetArenaNoVirtual() == NULL && time_to_last_upstream_rx_byte_ != NULL) {
    delete time_to_last_upstream_rx_byte_;
  }
  time_to_last_upstream_rx_byte_ = NULL;
}
void AccessLogCommon::clear_upstream_host() {
  if (GetArenaNoVirtual() == NULL && upstream_host_ != NULL) {
    delete upstream_host_;
  }
  upstream_host_ = NULL;
}
void AccessLogCommon::clear_metadata() {
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) {
    delete metadata_;
  }
  metadata_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccessLogCommon::kSampleRateFieldNumber;
const int AccessLogCommon::kDestinationHostFieldNumber;
const int AccessLogCommon::kTlsPropertiesFieldNumber;
const int AccessLogCommon::kStartTimeFieldNumber;
const int AccessLogCommon::kTimeToLastRxByteFieldNumber;
const int AccessLogCommon::kTimeToFirstUpstreamRxByteFieldNumber;
const int AccessLogCommon::kTimeToLastUpstreamRxByteFieldNumber;
const int AccessLogCommon::kUpstreamHostFieldNumber;
const int AccessLogCommon::kUpstreamClusterFieldNumber;
const int AccessLogCommon::kResponseFlagsFieldNumber;
const int AccessLogCommon::kMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccessLogCommon::AccessLogCommon()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsAccessLogCommon();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.accesslog.AccessLogCommon)
}
AccessLogCommon::AccessLogCommon(const AccessLogCommon& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  upstream_cluster_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.upstream_cluster().size() > 0) {
    upstream_cluster_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.upstream_cluster_);
  }
  if (from.has_destination_host()) {
    destination_host_ = new ::envoy::api::v2::SocketAddress(*from.destination_host_);
  } else {
    destination_host_ = NULL;
  }
  if (from.has_tls_properties()) {
    tls_properties_ = new ::envoy::api::v2::filter::accesslog::TLSProperties(*from.tls_properties_);
  } else {
    tls_properties_ = NULL;
  }
  if (from.has_start_time()) {
    start_time_ = new ::google::protobuf::Timestamp(*from.start_time_);
  } else {
    start_time_ = NULL;
  }
  if (from.has_time_to_last_rx_byte()) {
    time_to_last_rx_byte_ = new ::google::protobuf::Duration(*from.time_to_last_rx_byte_);
  } else {
    time_to_last_rx_byte_ = NULL;
  }
  if (from.has_time_to_first_upstream_rx_byte()) {
    time_to_first_upstream_rx_byte_ = new ::google::protobuf::Duration(*from.time_to_first_upstream_rx_byte_);
  } else {
    time_to_first_upstream_rx_byte_ = NULL;
  }
  if (from.has_time_to_last_upstream_rx_byte()) {
    time_to_last_upstream_rx_byte_ = new ::google::protobuf::Duration(*from.time_to_last_upstream_rx_byte_);
  } else {
    time_to_last_upstream_rx_byte_ = NULL;
  }
  if (from.has_upstream_host()) {
    upstream_host_ = new ::envoy::api::v2::SocketAddress(*from.upstream_host_);
  } else {
    upstream_host_ = NULL;
  }
  if (from.has_response_flags()) {
    response_flags_ = new ::envoy::api::v2::filter::accesslog::ResponseFlags(*from.response_flags_);
  } else {
    response_flags_ = NULL;
  }
  if (from.has_metadata()) {
    metadata_ = new ::envoy::api::v2::Metadata(*from.metadata_);
  } else {
    metadata_ = NULL;
  }
  sample_rate_ = from.sample_rate_;
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.accesslog.AccessLogCommon)
}

void AccessLogCommon::SharedCtor() {
  upstream_cluster_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&destination_host_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sample_rate_) -
      reinterpret_cast<char*>(&destination_host_)) + sizeof(sample_rate_));
  _cached_size_ = 0;
}

AccessLogCommon::~AccessLogCommon() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.accesslog.AccessLogCommon)
  SharedDtor();
}

void AccessLogCommon::SharedDtor() {
  upstream_cluster_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete destination_host_;
  if (this != internal_default_instance()) delete tls_properties_;
  if (this != internal_default_instance()) delete start_time_;
  if (this != internal_default_instance()) delete time_to_last_rx_byte_;
  if (this != internal_default_instance()) delete time_to_first_upstream_rx_byte_;
  if (this != internal_default_instance()) delete time_to_last_upstream_rx_byte_;
  if (this != internal_default_instance()) delete upstream_host_;
  if (this != internal_default_instance()) delete response_flags_;
  if (this != internal_default_instance()) delete metadata_;
}

void AccessLogCommon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccessLogCommon::descriptor() {
  ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccessLogCommon& AccessLogCommon::default_instance() {
  ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsAccessLogCommon();
  return *internal_default_instance();
}

AccessLogCommon* AccessLogCommon::New(::google::protobuf::Arena* arena) const {
  AccessLogCommon* n = new AccessLogCommon;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AccessLogCommon::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.accesslog.AccessLogCommon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  upstream_cluster_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && destination_host_ != NULL) {
    delete destination_host_;
  }
  destination_host_ = NULL;
  if (GetArenaNoVirtual() == NULL && tls_properties_ != NULL) {
    delete tls_properties_;
  }
  tls_properties_ = NULL;
  if (GetArenaNoVirtual() == NULL && start_time_ != NULL) {
    delete start_time_;
  }
  start_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && time_to_last_rx_byte_ != NULL) {
    delete time_to_last_rx_byte_;
  }
  time_to_last_rx_byte_ = NULL;
  if (GetArenaNoVirtual() == NULL && time_to_first_upstream_rx_byte_ != NULL) {
    delete time_to_first_upstream_rx_byte_;
  }
  time_to_first_upstream_rx_byte_ = NULL;
  if (GetArenaNoVirtual() == NULL && time_to_last_upstream_rx_byte_ != NULL) {
    delete time_to_last_upstream_rx_byte_;
  }
  time_to_last_upstream_rx_byte_ = NULL;
  if (GetArenaNoVirtual() == NULL && upstream_host_ != NULL) {
    delete upstream_host_;
  }
  upstream_host_ = NULL;
  if (GetArenaNoVirtual() == NULL && response_flags_ != NULL) {
    delete response_flags_;
  }
  response_flags_ = NULL;
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) {
    delete metadata_;
  }
  metadata_ = NULL;
  sample_rate_ = 0;
  _internal_metadata_.Clear();
}

bool AccessLogCommon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.accesslog.AccessLogCommon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double sample_rate = 1 [(.validate.rules) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sample_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.SocketAddress destination_host = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_destination_host()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.filter.accesslog.TLSProperties tls_properties = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tls_properties()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp start_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_start_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration time_to_last_rx_byte = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_time_to_last_rx_byte()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration time_to_first_upstream_rx_byte = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_time_to_first_upstream_rx_byte()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration time_to_last_upstream_rx_byte = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_time_to_last_upstream_rx_byte()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.SocketAddress upstream_host = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_upstream_host()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string upstream_cluster = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_upstream_cluster()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->upstream_cluster().data(), static_cast<int>(this->upstream_cluster().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.filter.accesslog.AccessLogCommon.upstream_cluster"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.filter.accesslog.ResponseFlags response_flags = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_response_flags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.Metadata metadata = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.accesslog.AccessLogCommon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.accesslog.AccessLogCommon)
  return false;
#undef DO_
}

void AccessLogCommon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.accesslog.AccessLogCommon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double sample_rate = 1 [(.validate.rules) = {
  if (this->sample_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->sample_rate(), output);
  }

  // .envoy.api.v2.SocketAddress destination_host = 2;
  if (this->has_destination_host()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->destination_host_, output);
  }

  // .envoy.api.v2.filter.accesslog.TLSProperties tls_properties = 3;
  if (this->has_tls_properties()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->tls_properties_, output);
  }

  // .google.protobuf.Timestamp start_time = 4;
  if (this->has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->start_time_, output);
  }

  // .google.protobuf.Duration time_to_last_rx_byte = 5;
  if (this->has_time_to_last_rx_byte()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->time_to_last_rx_byte_, output);
  }

  // .google.protobuf.Duration time_to_first_upstream_rx_byte = 6;
  if (this->has_time_to_first_upstream_rx_byte()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->time_to_first_upstream_rx_byte_, output);
  }

  // .google.protobuf.Duration time_to_last_upstream_rx_byte = 7;
  if (this->has_time_to_last_upstream_rx_byte()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->time_to_last_upstream_rx_byte_, output);
  }

  // .envoy.api.v2.SocketAddress upstream_host = 8;
  if (this->has_upstream_host()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->upstream_host_, output);
  }

  // string upstream_cluster = 9;
  if (this->upstream_cluster().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->upstream_cluster().data(), static_cast<int>(this->upstream_cluster().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.accesslog.AccessLogCommon.upstream_cluster");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->upstream_cluster(), output);
  }

  // .envoy.api.v2.filter.accesslog.ResponseFlags response_flags = 10;
  if (this->has_response_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->response_flags_, output);
  }

  // .envoy.api.v2.Metadata metadata = 11;
  if (this->has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->metadata_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.accesslog.AccessLogCommon)
}

::google::protobuf::uint8* AccessLogCommon::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.accesslog.AccessLogCommon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double sample_rate = 1 [(.validate.rules) = {
  if (this->sample_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->sample_rate(), target);
  }

  // .envoy.api.v2.SocketAddress destination_host = 2;
  if (this->has_destination_host()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->destination_host_, deterministic, target);
  }

  // .envoy.api.v2.filter.accesslog.TLSProperties tls_properties = 3;
  if (this->has_tls_properties()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->tls_properties_, deterministic, target);
  }

  // .google.protobuf.Timestamp start_time = 4;
  if (this->has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->start_time_, deterministic, target);
  }

  // .google.protobuf.Duration time_to_last_rx_byte = 5;
  if (this->has_time_to_last_rx_byte()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->time_to_last_rx_byte_, deterministic, target);
  }

  // .google.protobuf.Duration time_to_first_upstream_rx_byte = 6;
  if (this->has_time_to_first_upstream_rx_byte()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->time_to_first_upstream_rx_byte_, deterministic, target);
  }

  // .google.protobuf.Duration time_to_last_upstream_rx_byte = 7;
  if (this->has_time_to_last_upstream_rx_byte()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->time_to_last_upstream_rx_byte_, deterministic, target);
  }

  // .envoy.api.v2.SocketAddress upstream_host = 8;
  if (this->has_upstream_host()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, *this->upstream_host_, deterministic, target);
  }

  // string upstream_cluster = 9;
  if (this->upstream_cluster().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->upstream_cluster().data(), static_cast<int>(this->upstream_cluster().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.accesslog.AccessLogCommon.upstream_cluster");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->upstream_cluster(), target);
  }

  // .envoy.api.v2.filter.accesslog.ResponseFlags response_flags = 10;
  if (this->has_response_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, *this->response_flags_, deterministic, target);
  }

  // .envoy.api.v2.Metadata metadata = 11;
  if (this->has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, *this->metadata_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.accesslog.AccessLogCommon)
  return target;
}

size_t AccessLogCommon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.accesslog.AccessLogCommon)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string upstream_cluster = 9;
  if (this->upstream_cluster().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->upstream_cluster());
  }

  // .envoy.api.v2.SocketAddress destination_host = 2;
  if (this->has_destination_host()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->destination_host_);
  }

  // .envoy.api.v2.filter.accesslog.TLSProperties tls_properties = 3;
  if (this->has_tls_properties()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->tls_properties_);
  }

  // .google.protobuf.Timestamp start_time = 4;
  if (this->has_start_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->start_time_);
  }

  // .google.protobuf.Duration time_to_last_rx_byte = 5;
  if (this->has_time_to_last_rx_byte()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->time_to_last_rx_byte_);
  }

  // .google.protobuf.Duration time_to_first_upstream_rx_byte = 6;
  if (this->has_time_to_first_upstream_rx_byte()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->time_to_first_upstream_rx_byte_);
  }

  // .google.protobuf.Duration time_to_last_upstream_rx_byte = 7;
  if (this->has_time_to_last_upstream_rx_byte()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->time_to_last_upstream_rx_byte_);
  }

  // .envoy.api.v2.SocketAddress upstream_host = 8;
  if (this->has_upstream_host()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->upstream_host_);
  }

  // .envoy.api.v2.filter.accesslog.ResponseFlags response_flags = 10;
  if (this->has_response_flags()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->response_flags_);
  }

  // .envoy.api.v2.Metadata metadata = 11;
  if (this->has_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->metadata_);
  }

  // double sample_rate = 1 [(.validate.rules) = {
  if (this->sample_rate() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccessLogCommon::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.accesslog.AccessLogCommon)
  GOOGLE_DCHECK_NE(&from, this);
  const AccessLogCommon* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccessLogCommon>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.accesslog.AccessLogCommon)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.accesslog.AccessLogCommon)
    MergeFrom(*source);
  }
}

void AccessLogCommon::MergeFrom(const AccessLogCommon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.accesslog.AccessLogCommon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.upstream_cluster().size() > 0) {

    upstream_cluster_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.upstream_cluster_);
  }
  if (from.has_destination_host()) {
    mutable_destination_host()->::envoy::api::v2::SocketAddress::MergeFrom(from.destination_host());
  }
  if (from.has_tls_properties()) {
    mutable_tls_properties()->::envoy::api::v2::filter::accesslog::TLSProperties::MergeFrom(from.tls_properties());
  }
  if (from.has_start_time()) {
    mutable_start_time()->::google::protobuf::Timestamp::MergeFrom(from.start_time());
  }
  if (from.has_time_to_last_rx_byte()) {
    mutable_time_to_last_rx_byte()->::google::protobuf::Duration::MergeFrom(from.time_to_last_rx_byte());
  }
  if (from.has_time_to_first_upstream_rx_byte()) {
    mutable_time_to_first_upstream_rx_byte()->::google::protobuf::Duration::MergeFrom(from.time_to_first_upstream_rx_byte());
  }
  if (from.has_time_to_last_upstream_rx_byte()) {
    mutable_time_to_last_upstream_rx_byte()->::google::protobuf::Duration::MergeFrom(from.time_to_last_upstream_rx_byte());
  }
  if (from.has_upstream_host()) {
    mutable_upstream_host()->::envoy::api::v2::SocketAddress::MergeFrom(from.upstream_host());
  }
  if (from.has_response_flags()) {
    mutable_response_flags()->::envoy::api::v2::filter::accesslog::ResponseFlags::MergeFrom(from.response_flags());
  }
  if (from.has_metadata()) {
    mutable_metadata()->::envoy::api::v2::Metadata::MergeFrom(from.metadata());
  }
  if (from.sample_rate() != 0) {
    set_sample_rate(from.sample_rate());
  }
}

void AccessLogCommon::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.accesslog.AccessLogCommon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccessLogCommon::CopyFrom(const AccessLogCommon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.accesslog.AccessLogCommon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccessLogCommon::IsInitialized() const {
  return true;
}

void AccessLogCommon::Swap(AccessLogCommon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccessLogCommon::InternalSwap(AccessLogCommon* other) {
  using std::swap;
  upstream_cluster_.Swap(&other->upstream_cluster_);
  swap(destination_host_, other->destination_host_);
  swap(tls_properties_, other->tls_properties_);
  swap(start_time_, other->start_time_);
  swap(time_to_last_rx_byte_, other->time_to_last_rx_byte_);
  swap(time_to_first_upstream_rx_byte_, other->time_to_first_upstream_rx_byte_);
  swap(time_to_last_upstream_rx_byte_, other->time_to_last_upstream_rx_byte_);
  swap(upstream_host_, other->upstream_host_);
  swap(response_flags_, other->response_flags_);
  swap(metadata_, other->metadata_);
  swap(sample_rate_, other->sample_rate_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AccessLogCommon::GetMetadata() const {
  protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResponseFlags::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseFlags::kFailedLocalHealthcheckFieldNumber;
const int ResponseFlags::kNoHealthyUpstreamFieldNumber;
const int ResponseFlags::kUpstreamRequestTimeoutFieldNumber;
const int ResponseFlags::kLocalResetFieldNumber;
const int ResponseFlags::kUpstreamRemoteResetFieldNumber;
const int ResponseFlags::kUpstreamConnectionFailureFieldNumber;
const int ResponseFlags::kUpstreamConnectionTerminationFieldNumber;
const int ResponseFlags::kUpstreamOverflowFieldNumber;
const int ResponseFlags::kNoRouteFoundFieldNumber;
const int ResponseFlags::kDelayInjectedFieldNumber;
const int ResponseFlags::kFaultInjectedFieldNumber;
const int ResponseFlags::kRateLimitedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseFlags::ResponseFlags()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsResponseFlags();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.accesslog.ResponseFlags)
}
ResponseFlags::ResponseFlags(const ResponseFlags& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&failed_local_healthcheck_, &from.failed_local_healthcheck_,
    static_cast<size_t>(reinterpret_cast<char*>(&rate_limited_) -
    reinterpret_cast<char*>(&failed_local_healthcheck_)) + sizeof(rate_limited_));
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.accesslog.ResponseFlags)
}

void ResponseFlags::SharedCtor() {
  ::memset(&failed_local_healthcheck_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rate_limited_) -
      reinterpret_cast<char*>(&failed_local_healthcheck_)) + sizeof(rate_limited_));
  _cached_size_ = 0;
}

ResponseFlags::~ResponseFlags() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.accesslog.ResponseFlags)
  SharedDtor();
}

void ResponseFlags::SharedDtor() {
}

void ResponseFlags::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseFlags::descriptor() {
  ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseFlags& ResponseFlags::default_instance() {
  ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsResponseFlags();
  return *internal_default_instance();
}

ResponseFlags* ResponseFlags::New(::google::protobuf::Arena* arena) const {
  ResponseFlags* n = new ResponseFlags;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseFlags::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.accesslog.ResponseFlags)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&failed_local_healthcheck_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rate_limited_) -
      reinterpret_cast<char*>(&failed_local_healthcheck_)) + sizeof(rate_limited_));
  _internal_metadata_.Clear();
}

bool ResponseFlags::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.accesslog.ResponseFlags)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool failed_local_healthcheck = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &failed_local_healthcheck_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool no_healthy_upstream = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &no_healthy_upstream_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool upstream_request_timeout = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &upstream_request_timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool local_reset = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &local_reset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool upstream_remote_reset = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &upstream_remote_reset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool upstream_connection_failure = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &upstream_connection_failure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool upstream_connection_termination = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &upstream_connection_termination_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool upstream_overflow = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &upstream_overflow_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool no_route_found = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &no_route_found_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool delay_injected = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &delay_injected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool fault_injected = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fault_injected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool rate_limited = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rate_limited_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.accesslog.ResponseFlags)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.accesslog.ResponseFlags)
  return false;
#undef DO_
}

void ResponseFlags::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.accesslog.ResponseFlags)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool failed_local_healthcheck = 1;
  if (this->failed_local_healthcheck() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->failed_local_healthcheck(), output);
  }

  // bool no_healthy_upstream = 2;
  if (this->no_healthy_upstream() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->no_healthy_upstream(), output);
  }

  // bool upstream_request_timeout = 3;
  if (this->upstream_request_timeout() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->upstream_request_timeout(), output);
  }

  // bool local_reset = 4;
  if (this->local_reset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->local_reset(), output);
  }

  // bool upstream_remote_reset = 5;
  if (this->upstream_remote_reset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->upstream_remote_reset(), output);
  }

  // bool upstream_connection_failure = 6;
  if (this->upstream_connection_failure() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->upstream_connection_failure(), output);
  }

  // bool upstream_connection_termination = 7;
  if (this->upstream_connection_termination() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->upstream_connection_termination(), output);
  }

  // bool upstream_overflow = 8;
  if (this->upstream_overflow() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->upstream_overflow(), output);
  }

  // bool no_route_found = 9;
  if (this->no_route_found() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->no_route_found(), output);
  }

  // bool delay_injected = 10;
  if (this->delay_injected() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->delay_injected(), output);
  }

  // bool fault_injected = 11;
  if (this->fault_injected() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->fault_injected(), output);
  }

  // bool rate_limited = 12;
  if (this->rate_limited() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->rate_limited(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.accesslog.ResponseFlags)
}

::google::protobuf::uint8* ResponseFlags::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.accesslog.ResponseFlags)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool failed_local_healthcheck = 1;
  if (this->failed_local_healthcheck() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->failed_local_healthcheck(), target);
  }

  // bool no_healthy_upstream = 2;
  if (this->no_healthy_upstream() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->no_healthy_upstream(), target);
  }

  // bool upstream_request_timeout = 3;
  if (this->upstream_request_timeout() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->upstream_request_timeout(), target);
  }

  // bool local_reset = 4;
  if (this->local_reset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->local_reset(), target);
  }

  // bool upstream_remote_reset = 5;
  if (this->upstream_remote_reset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->upstream_remote_reset(), target);
  }

  // bool upstream_connection_failure = 6;
  if (this->upstream_connection_failure() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->upstream_connection_failure(), target);
  }

  // bool upstream_connection_termination = 7;
  if (this->upstream_connection_termination() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->upstream_connection_termination(), target);
  }

  // bool upstream_overflow = 8;
  if (this->upstream_overflow() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->upstream_overflow(), target);
  }

  // bool no_route_found = 9;
  if (this->no_route_found() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->no_route_found(), target);
  }

  // bool delay_injected = 10;
  if (this->delay_injected() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->delay_injected(), target);
  }

  // bool fault_injected = 11;
  if (this->fault_injected() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->fault_injected(), target);
  }

  // bool rate_limited = 12;
  if (this->rate_limited() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->rate_limited(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.accesslog.ResponseFlags)
  return target;
}

size_t ResponseFlags::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.accesslog.ResponseFlags)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool failed_local_healthcheck = 1;
  if (this->failed_local_healthcheck() != 0) {
    total_size += 1 + 1;
  }

  // bool no_healthy_upstream = 2;
  if (this->no_healthy_upstream() != 0) {
    total_size += 1 + 1;
  }

  // bool upstream_request_timeout = 3;
  if (this->upstream_request_timeout() != 0) {
    total_size += 1 + 1;
  }

  // bool local_reset = 4;
  if (this->local_reset() != 0) {
    total_size += 1 + 1;
  }

  // bool upstream_remote_reset = 5;
  if (this->upstream_remote_reset() != 0) {
    total_size += 1 + 1;
  }

  // bool upstream_connection_failure = 6;
  if (this->upstream_connection_failure() != 0) {
    total_size += 1 + 1;
  }

  // bool upstream_connection_termination = 7;
  if (this->upstream_connection_termination() != 0) {
    total_size += 1 + 1;
  }

  // bool upstream_overflow = 8;
  if (this->upstream_overflow() != 0) {
    total_size += 1 + 1;
  }

  // bool no_route_found = 9;
  if (this->no_route_found() != 0) {
    total_size += 1 + 1;
  }

  // bool delay_injected = 10;
  if (this->delay_injected() != 0) {
    total_size += 1 + 1;
  }

  // bool fault_injected = 11;
  if (this->fault_injected() != 0) {
    total_size += 1 + 1;
  }

  // bool rate_limited = 12;
  if (this->rate_limited() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseFlags::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.accesslog.ResponseFlags)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseFlags* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseFlags>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.accesslog.ResponseFlags)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.accesslog.ResponseFlags)
    MergeFrom(*source);
  }
}

void ResponseFlags::MergeFrom(const ResponseFlags& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.accesslog.ResponseFlags)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.failed_local_healthcheck() != 0) {
    set_failed_local_healthcheck(from.failed_local_healthcheck());
  }
  if (from.no_healthy_upstream() != 0) {
    set_no_healthy_upstream(from.no_healthy_upstream());
  }
  if (from.upstream_request_timeout() != 0) {
    set_upstream_request_timeout(from.upstream_request_timeout());
  }
  if (from.local_reset() != 0) {
    set_local_reset(from.local_reset());
  }
  if (from.upstream_remote_reset() != 0) {
    set_upstream_remote_reset(from.upstream_remote_reset());
  }
  if (from.upstream_connection_failure() != 0) {
    set_upstream_connection_failure(from.upstream_connection_failure());
  }
  if (from.upstream_connection_termination() != 0) {
    set_upstream_connection_termination(from.upstream_connection_termination());
  }
  if (from.upstream_overflow() != 0) {
    set_upstream_overflow(from.upstream_overflow());
  }
  if (from.no_route_found() != 0) {
    set_no_route_found(from.no_route_found());
  }
  if (from.delay_injected() != 0) {
    set_delay_injected(from.delay_injected());
  }
  if (from.fault_injected() != 0) {
    set_fault_injected(from.fault_injected());
  }
  if (from.rate_limited() != 0) {
    set_rate_limited(from.rate_limited());
  }
}

void ResponseFlags::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.accesslog.ResponseFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseFlags::CopyFrom(const ResponseFlags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.accesslog.ResponseFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseFlags::IsInitialized() const {
  return true;
}

void ResponseFlags::Swap(ResponseFlags* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseFlags::InternalSwap(ResponseFlags* other) {
  using std::swap;
  swap(failed_local_healthcheck_, other->failed_local_healthcheck_);
  swap(no_healthy_upstream_, other->no_healthy_upstream_);
  swap(upstream_request_timeout_, other->upstream_request_timeout_);
  swap(local_reset_, other->local_reset_);
  swap(upstream_remote_reset_, other->upstream_remote_reset_);
  swap(upstream_connection_failure_, other->upstream_connection_failure_);
  swap(upstream_connection_termination_, other->upstream_connection_termination_);
  swap(upstream_overflow_, other->upstream_overflow_);
  swap(no_route_found_, other->no_route_found_);
  swap(delay_injected_, other->delay_injected_);
  swap(fault_injected_, other->fault_injected_);
  swap(rate_limited_, other->rate_limited_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseFlags::GetMetadata() const {
  protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TLSProperties::InitAsDefaultInstance() {
  ::envoy::api::v2::filter::accesslog::_TLSProperties_default_instance_._instance.get_mutable()->tls_cipher_suite_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
}
void TLSProperties::clear_tls_cipher_suite() {
  if (GetArenaNoVirtual() == NULL && tls_cipher_suite_ != NULL) {
    delete tls_cipher_suite_;
  }
  tls_cipher_suite_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TLSProperties::kTlsVersionFieldNumber;
const int TLSProperties::kTlsCipherSuiteFieldNumber;
const int TLSProperties::kTlsSniHostnameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TLSProperties::TLSProperties()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsTLSProperties();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.accesslog.TLSProperties)
}
TLSProperties::TLSProperties(const TLSProperties& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tls_sni_hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tls_sni_hostname().size() > 0) {
    tls_sni_hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tls_sni_hostname_);
  }
  if (from.has_tls_cipher_suite()) {
    tls_cipher_suite_ = new ::google::protobuf::UInt32Value(*from.tls_cipher_suite_);
  } else {
    tls_cipher_suite_ = NULL;
  }
  tls_version_ = from.tls_version_;
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.accesslog.TLSProperties)
}

void TLSProperties::SharedCtor() {
  tls_sni_hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tls_cipher_suite_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tls_version_) -
      reinterpret_cast<char*>(&tls_cipher_suite_)) + sizeof(tls_version_));
  _cached_size_ = 0;
}

TLSProperties::~TLSProperties() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.accesslog.TLSProperties)
  SharedDtor();
}

void TLSProperties::SharedDtor() {
  tls_sni_hostname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tls_cipher_suite_;
}

void TLSProperties::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLSProperties::descriptor() {
  ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TLSProperties& TLSProperties::default_instance() {
  ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsTLSProperties();
  return *internal_default_instance();
}

TLSProperties* TLSProperties::New(::google::protobuf::Arena* arena) const {
  TLSProperties* n = new TLSProperties;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TLSProperties::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.accesslog.TLSProperties)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tls_sni_hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && tls_cipher_suite_ != NULL) {
    delete tls_cipher_suite_;
  }
  tls_cipher_suite_ = NULL;
  tls_version_ = 0;
  _internal_metadata_.Clear();
}

bool TLSProperties::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.accesslog.TLSProperties)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.filter.accesslog.TLSProperties.TLSVersion tls_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_tls_version(static_cast< ::envoy::api::v2::filter::accesslog::TLSProperties_TLSVersion >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.UInt32Value tls_cipher_suite = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tls_cipher_suite()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string tls_sni_hostname = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tls_sni_hostname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tls_sni_hostname().data(), static_cast<int>(this->tls_sni_hostname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.filter.accesslog.TLSProperties.tls_sni_hostname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.accesslog.TLSProperties)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.accesslog.TLSProperties)
  return false;
#undef DO_
}

void TLSProperties::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.accesslog.TLSProperties)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.filter.accesslog.TLSProperties.TLSVersion tls_version = 1;
  if (this->tls_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->tls_version(), output);
  }

  // .google.protobuf.UInt32Value tls_cipher_suite = 2;
  if (this->has_tls_cipher_suite()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->tls_cipher_suite_, output);
  }

  // string tls_sni_hostname = 3;
  if (this->tls_sni_hostname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tls_sni_hostname().data(), static_cast<int>(this->tls_sni_hostname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.accesslog.TLSProperties.tls_sni_hostname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->tls_sni_hostname(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.accesslog.TLSProperties)
}

::google::protobuf::uint8* TLSProperties::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.accesslog.TLSProperties)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.filter.accesslog.TLSProperties.TLSVersion tls_version = 1;
  if (this->tls_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->tls_version(), target);
  }

  // .google.protobuf.UInt32Value tls_cipher_suite = 2;
  if (this->has_tls_cipher_suite()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->tls_cipher_suite_, deterministic, target);
  }

  // string tls_sni_hostname = 3;
  if (this->tls_sni_hostname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tls_sni_hostname().data(), static_cast<int>(this->tls_sni_hostname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.accesslog.TLSProperties.tls_sni_hostname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tls_sni_hostname(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.accesslog.TLSProperties)
  return target;
}

size_t TLSProperties::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.accesslog.TLSProperties)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string tls_sni_hostname = 3;
  if (this->tls_sni_hostname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tls_sni_hostname());
  }

  // .google.protobuf.UInt32Value tls_cipher_suite = 2;
  if (this->has_tls_cipher_suite()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->tls_cipher_suite_);
  }

  // .envoy.api.v2.filter.accesslog.TLSProperties.TLSVersion tls_version = 1;
  if (this->tls_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->tls_version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLSProperties::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.accesslog.TLSProperties)
  GOOGLE_DCHECK_NE(&from, this);
  const TLSProperties* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TLSProperties>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.accesslog.TLSProperties)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.accesslog.TLSProperties)
    MergeFrom(*source);
  }
}

void TLSProperties::MergeFrom(const TLSProperties& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.accesslog.TLSProperties)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tls_sni_hostname().size() > 0) {

    tls_sni_hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tls_sni_hostname_);
  }
  if (from.has_tls_cipher_suite()) {
    mutable_tls_cipher_suite()->::google::protobuf::UInt32Value::MergeFrom(from.tls_cipher_suite());
  }
  if (from.tls_version() != 0) {
    set_tls_version(from.tls_version());
  }
}

void TLSProperties::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.accesslog.TLSProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLSProperties::CopyFrom(const TLSProperties& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.accesslog.TLSProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLSProperties::IsInitialized() const {
  return true;
}

void TLSProperties::Swap(TLSProperties* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TLSProperties::InternalSwap(TLSProperties* other) {
  using std::swap;
  tls_sni_hostname_.Swap(&other->tls_sni_hostname_);
  swap(tls_cipher_suite_, other->tls_cipher_suite_);
  swap(tls_version_, other->tls_version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TLSProperties::GetMetadata() const {
  protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TCPAccessLogEntry::InitAsDefaultInstance() {
  ::envoy::api::v2::filter::accesslog::_TCPAccessLogEntry_default_instance_._instance.get_mutable()->common_properties_ = const_cast< ::envoy::api::v2::filter::accesslog::AccessLogCommon*>(
      ::envoy::api::v2::filter::accesslog::AccessLogCommon::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TCPAccessLogEntry::kCommonPropertiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TCPAccessLogEntry::TCPAccessLogEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsTCPAccessLogEntry();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.accesslog.TCPAccessLogEntry)
}
TCPAccessLogEntry::TCPAccessLogEntry(const TCPAccessLogEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_common_properties()) {
    common_properties_ = new ::envoy::api::v2::filter::accesslog::AccessLogCommon(*from.common_properties_);
  } else {
    common_properties_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.accesslog.TCPAccessLogEntry)
}

void TCPAccessLogEntry::SharedCtor() {
  common_properties_ = NULL;
  _cached_size_ = 0;
}

TCPAccessLogEntry::~TCPAccessLogEntry() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.accesslog.TCPAccessLogEntry)
  SharedDtor();
}

void TCPAccessLogEntry::SharedDtor() {
  if (this != internal_default_instance()) delete common_properties_;
}

void TCPAccessLogEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCPAccessLogEntry::descriptor() {
  ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TCPAccessLogEntry& TCPAccessLogEntry::default_instance() {
  ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsTCPAccessLogEntry();
  return *internal_default_instance();
}

TCPAccessLogEntry* TCPAccessLogEntry::New(::google::protobuf::Arena* arena) const {
  TCPAccessLogEntry* n = new TCPAccessLogEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TCPAccessLogEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.accesslog.TCPAccessLogEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && common_properties_ != NULL) {
    delete common_properties_;
  }
  common_properties_ = NULL;
  _internal_metadata_.Clear();
}

bool TCPAccessLogEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.accesslog.TCPAccessLogEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.filter.accesslog.AccessLogCommon common_properties = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_common_properties()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.accesslog.TCPAccessLogEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.accesslog.TCPAccessLogEntry)
  return false;
#undef DO_
}

void TCPAccessLogEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.accesslog.TCPAccessLogEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.filter.accesslog.AccessLogCommon common_properties = 1;
  if (this->has_common_properties()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->common_properties_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.accesslog.TCPAccessLogEntry)
}

::google::protobuf::uint8* TCPAccessLogEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.accesslog.TCPAccessLogEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.filter.accesslog.AccessLogCommon common_properties = 1;
  if (this->has_common_properties()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->common_properties_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.accesslog.TCPAccessLogEntry)
  return target;
}

size_t TCPAccessLogEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.accesslog.TCPAccessLogEntry)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .envoy.api.v2.filter.accesslog.AccessLogCommon common_properties = 1;
  if (this->has_common_properties()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->common_properties_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCPAccessLogEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.accesslog.TCPAccessLogEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const TCPAccessLogEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TCPAccessLogEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.accesslog.TCPAccessLogEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.accesslog.TCPAccessLogEntry)
    MergeFrom(*source);
  }
}

void TCPAccessLogEntry::MergeFrom(const TCPAccessLogEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.accesslog.TCPAccessLogEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_common_properties()) {
    mutable_common_properties()->::envoy::api::v2::filter::accesslog::AccessLogCommon::MergeFrom(from.common_properties());
  }
}

void TCPAccessLogEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.accesslog.TCPAccessLogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCPAccessLogEntry::CopyFrom(const TCPAccessLogEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.accesslog.TCPAccessLogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCPAccessLogEntry::IsInitialized() const {
  return true;
}

void TCPAccessLogEntry::Swap(TCPAccessLogEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TCPAccessLogEntry::InternalSwap(TCPAccessLogEntry* other) {
  using std::swap;
  swap(common_properties_, other->common_properties_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TCPAccessLogEntry::GetMetadata() const {
  protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

HTTPRequestProperties_RequestHeadersEntry_DoNotUse::HTTPRequestProperties_RequestHeadersEntry_DoNotUse() {}
HTTPRequestProperties_RequestHeadersEntry_DoNotUse::HTTPRequestProperties_RequestHeadersEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void HTTPRequestProperties_RequestHeadersEntry_DoNotUse::MergeFrom(const HTTPRequestProperties_RequestHeadersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata HTTPRequestProperties_RequestHeadersEntry_DoNotUse::GetMetadata() const {
  ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::file_level_metadata[4];
}
void HTTPRequestProperties_RequestHeadersEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void HTTPRequestProperties::InitAsDefaultInstance() {
  ::envoy::api::v2::filter::accesslog::_HTTPRequestProperties_default_instance_._instance.get_mutable()->port_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
}
void HTTPRequestProperties::clear_port() {
  if (GetArenaNoVirtual() == NULL && port_ != NULL) {
    delete port_;
  }
  port_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HTTPRequestProperties::kRequestMethodFieldNumber;
const int HTTPRequestProperties::kSchemeFieldNumber;
const int HTTPRequestProperties::kAuthorityFieldNumber;
const int HTTPRequestProperties::kPortFieldNumber;
const int HTTPRequestProperties::kPathFieldNumber;
const int HTTPRequestProperties::kUserAgentFieldNumber;
const int HTTPRequestProperties::kRefererFieldNumber;
const int HTTPRequestProperties::kForwardedForFieldNumber;
const int HTTPRequestProperties::kRequestIdFieldNumber;
const int HTTPRequestProperties::kOriginalPathFieldNumber;
const int HTTPRequestProperties::kRequestHeadersBytesFieldNumber;
const int HTTPRequestProperties::kRequestBodyBytesFieldNumber;
const int HTTPRequestProperties::kRequestHeadersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HTTPRequestProperties::HTTPRequestProperties()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsHTTPRequestProperties();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.accesslog.HTTPRequestProperties)
}
HTTPRequestProperties::HTTPRequestProperties(const HTTPRequestProperties& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_headers_.MergeFrom(from.request_headers_);
  scheme_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.scheme().size() > 0) {
    scheme_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scheme_);
  }
  authority_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.authority().size() > 0) {
    authority_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.authority_);
  }
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  user_agent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_agent().size() > 0) {
    user_agent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_agent_);
  }
  referer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.referer().size() > 0) {
    referer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.referer_);
  }
  forwarded_for_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.forwarded_for().size() > 0) {
    forwarded_for_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.forwarded_for_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.request_id().size() > 0) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  original_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.original_path().size() > 0) {
    original_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.original_path_);
  }
  if (from.has_port()) {
    port_ = new ::google::protobuf::UInt32Value(*from.port_);
  } else {
    port_ = NULL;
  }
  ::memcpy(&request_headers_bytes_, &from.request_headers_bytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&request_method_) -
    reinterpret_cast<char*>(&request_headers_bytes_)) + sizeof(request_method_));
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.accesslog.HTTPRequestProperties)
}

void HTTPRequestProperties::SharedCtor() {
  scheme_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  authority_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_agent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  referer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  forwarded_for_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  original_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&request_method_) -
      reinterpret_cast<char*>(&port_)) + sizeof(request_method_));
  _cached_size_ = 0;
}

HTTPRequestProperties::~HTTPRequestProperties() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.accesslog.HTTPRequestProperties)
  SharedDtor();
}

void HTTPRequestProperties::SharedDtor() {
  scheme_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  authority_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_agent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  referer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  forwarded_for_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  original_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete port_;
}

void HTTPRequestProperties::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HTTPRequestProperties::descriptor() {
  ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HTTPRequestProperties& HTTPRequestProperties::default_instance() {
  ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsHTTPRequestProperties();
  return *internal_default_instance();
}

HTTPRequestProperties* HTTPRequestProperties::New(::google::protobuf::Arena* arena) const {
  HTTPRequestProperties* n = new HTTPRequestProperties;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HTTPRequestProperties::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.accesslog.HTTPRequestProperties)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_headers_.Clear();
  scheme_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  authority_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_agent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  referer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  forwarded_for_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  original_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && port_ != NULL) {
    delete port_;
  }
  port_ = NULL;
  ::memset(&request_headers_bytes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&request_method_) -
      reinterpret_cast<char*>(&request_headers_bytes_)) + sizeof(request_method_));
  _internal_metadata_.Clear();
}

bool HTTPRequestProperties::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.accesslog.HTTPRequestProperties)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.RequestMethod request_method = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_request_method(static_cast< ::envoy::api::v2::RequestMethod >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string scheme = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scheme()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->scheme().data(), static_cast<int>(this->scheme().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.filter.accesslog.HTTPRequestProperties.scheme"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string authority = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authority()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->authority().data(), static_cast<int>(this->authority().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.filter.accesslog.HTTPRequestProperties.authority"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.UInt32Value port = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_port()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string path = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.filter.accesslog.HTTPRequestProperties.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_agent = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_agent()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_agent().data(), static_cast<int>(this->user_agent().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.filter.accesslog.HTTPRequestProperties.user_agent"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string referer = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_referer()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->referer().data(), static_cast<int>(this->referer().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.filter.accesslog.HTTPRequestProperties.referer"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string forwarded_for = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_forwarded_for()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->forwarded_for().data(), static_cast<int>(this->forwarded_for().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.filter.accesslog.HTTPRequestProperties.forwarded_for"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string request_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.filter.accesslog.HTTPRequestProperties.request_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string original_path = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_original_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->original_path().data(), static_cast<int>(this->original_path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.filter.accesslog.HTTPRequestProperties.original_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 request_headers_bytes = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_headers_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 request_body_bytes = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_body_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> request_headers = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          HTTPRequestProperties_RequestHeadersEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              HTTPRequestProperties_RequestHeadersEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&request_headers_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.filter.accesslog.HTTPRequestProperties.RequestHeadersEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.filter.accesslog.HTTPRequestProperties.RequestHeadersEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.accesslog.HTTPRequestProperties)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.accesslog.HTTPRequestProperties)
  return false;
#undef DO_
}

void HTTPRequestProperties::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.accesslog.HTTPRequestProperties)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.RequestMethod request_method = 1;
  if (this->request_method() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->request_method(), output);
  }

  // string scheme = 2;
  if (this->scheme().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->scheme().data(), static_cast<int>(this->scheme().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.accesslog.HTTPRequestProperties.scheme");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->scheme(), output);
  }

  // string authority = 3;
  if (this->authority().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->authority().data(), static_cast<int>(this->authority().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.accesslog.HTTPRequestProperties.authority");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->authority(), output);
  }

  // .google.protobuf.UInt32Value port = 4;
  if (this->has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->port_, output);
  }

  // string path = 5;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.accesslog.HTTPRequestProperties.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->path(), output);
  }

  // string user_agent = 6;
  if (this->user_agent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_agent().data(), static_cast<int>(this->user_agent().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.accesslog.HTTPRequestProperties.user_agent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->user_agent(), output);
  }

  // string referer = 7;
  if (this->referer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->referer().data(), static_cast<int>(this->referer().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.accesslog.HTTPRequestProperties.referer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->referer(), output);
  }

  // string forwarded_for = 8;
  if (this->forwarded_for().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->forwarded_for().data(), static_cast<int>(this->forwarded_for().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.accesslog.HTTPRequestProperties.forwarded_for");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->forwarded_for(), output);
  }

  // string request_id = 9;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.accesslog.HTTPRequestProperties.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->request_id(), output);
  }

  // string original_path = 10;
  if (this->original_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->original_path().data(), static_cast<int>(this->original_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.accesslog.HTTPRequestProperties.original_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->original_path(), output);
  }

  // uint64 request_headers_bytes = 11;
  if (this->request_headers_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->request_headers_bytes(), output);
  }

  // uint64 request_body_bytes = 12;
  if (this->request_body_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->request_body_bytes(), output);
  }

  // map<string, string> request_headers = 13;
  if (!this->request_headers().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "envoy.api.v2.filter.accesslog.HTTPRequestProperties.RequestHeadersEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "envoy.api.v2.filter.accesslog.HTTPRequestProperties.RequestHeadersEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->request_headers().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->request_headers().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->request_headers().begin();
          it != this->request_headers().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<HTTPRequestProperties_RequestHeadersEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(request_headers_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            13, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<HTTPRequestProperties_RequestHeadersEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->request_headers().begin();
          it != this->request_headers().end(); ++it) {
        entry.reset(request_headers_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            13, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.accesslog.HTTPRequestProperties)
}

::google::protobuf::uint8* HTTPRequestProperties::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.accesslog.HTTPRequestProperties)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.RequestMethod request_method = 1;
  if (this->request_method() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->request_method(), target);
  }

  // string scheme = 2;
  if (this->scheme().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->scheme().data(), static_cast<int>(this->scheme().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.accesslog.HTTPRequestProperties.scheme");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->scheme(), target);
  }

  // string authority = 3;
  if (this->authority().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->authority().data(), static_cast<int>(this->authority().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.accesslog.HTTPRequestProperties.authority");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->authority(), target);
  }

  // .google.protobuf.UInt32Value port = 4;
  if (this->has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->port_, deterministic, target);
  }

  // string path = 5;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.accesslog.HTTPRequestProperties.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->path(), target);
  }

  // string user_agent = 6;
  if (this->user_agent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_agent().data(), static_cast<int>(this->user_agent().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.accesslog.HTTPRequestProperties.user_agent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->user_agent(), target);
  }

  // string referer = 7;
  if (this->referer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->referer().data(), static_cast<int>(this->referer().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.accesslog.HTTPRequestProperties.referer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->referer(), target);
  }

  // string forwarded_for = 8;
  if (this->forwarded_for().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->forwarded_for().data(), static_cast<int>(this->forwarded_for().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.accesslog.HTTPRequestProperties.forwarded_for");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->forwarded_for(), target);
  }

  // string request_id = 9;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.accesslog.HTTPRequestProperties.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->request_id(), target);
  }

  // string original_path = 10;
  if (this->original_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->original_path().data(), static_cast<int>(this->original_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.accesslog.HTTPRequestProperties.original_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->original_path(), target);
  }

  // uint64 request_headers_bytes = 11;
  if (this->request_headers_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->request_headers_bytes(), target);
  }

  // uint64 request_body_bytes = 12;
  if (this->request_body_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->request_body_bytes(), target);
  }

  // map<string, string> request_headers = 13;
  if (!this->request_headers().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "envoy.api.v2.filter.accesslog.HTTPRequestProperties.RequestHeadersEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "envoy.api.v2.filter.accesslog.HTTPRequestProperties.RequestHeadersEntry.value");
      }
    };

    if (deterministic &&
        this->request_headers().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->request_headers().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->request_headers().begin();
          it != this->request_headers().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<HTTPRequestProperties_RequestHeadersEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(request_headers_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       13, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<HTTPRequestProperties_RequestHeadersEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->request_headers().begin();
          it != this->request_headers().end(); ++it) {
        entry.reset(request_headers_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       13, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.accesslog.HTTPRequestProperties)
  return target;
}

size_t HTTPRequestProperties::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.accesslog.HTTPRequestProperties)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, string> request_headers = 13;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->request_headers_size());
  {
    ::google::protobuf::scoped_ptr<HTTPRequestProperties_RequestHeadersEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->request_headers().begin();
        it != this->request_headers().end(); ++it) {
      entry.reset(request_headers_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string scheme = 2;
  if (this->scheme().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->scheme());
  }

  // string authority = 3;
  if (this->authority().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->authority());
  }

  // string path = 5;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // string user_agent = 6;
  if (this->user_agent().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_agent());
  }

  // string referer = 7;
  if (this->referer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->referer());
  }

  // string forwarded_for = 8;
  if (this->forwarded_for().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->forwarded_for());
  }

  // string request_id = 9;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // string original_path = 10;
  if (this->original_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->original_path());
  }

  // .google.protobuf.UInt32Value port = 4;
  if (this->has_port()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->port_);
  }

  // uint64 request_headers_bytes = 11;
  if (this->request_headers_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->request_headers_bytes());
  }

  // uint64 request_body_bytes = 12;
  if (this->request_body_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->request_body_bytes());
  }

  // .envoy.api.v2.RequestMethod request_method = 1;
  if (this->request_method() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->request_method());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HTTPRequestProperties::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.accesslog.HTTPRequestProperties)
  GOOGLE_DCHECK_NE(&from, this);
  const HTTPRequestProperties* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HTTPRequestProperties>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.accesslog.HTTPRequestProperties)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.accesslog.HTTPRequestProperties)
    MergeFrom(*source);
  }
}

void HTTPRequestProperties::MergeFrom(const HTTPRequestProperties& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.accesslog.HTTPRequestProperties)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  request_headers_.MergeFrom(from.request_headers_);
  if (from.scheme().size() > 0) {

    scheme_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scheme_);
  }
  if (from.authority().size() > 0) {

    authority_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.authority_);
  }
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.user_agent().size() > 0) {

    user_agent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_agent_);
  }
  if (from.referer().size() > 0) {

    referer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.referer_);
  }
  if (from.forwarded_for().size() > 0) {

    forwarded_for_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.forwarded_for_);
  }
  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.original_path().size() > 0) {

    original_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.original_path_);
  }
  if (from.has_port()) {
    mutable_port()->::google::protobuf::UInt32Value::MergeFrom(from.port());
  }
  if (from.request_headers_bytes() != 0) {
    set_request_headers_bytes(from.request_headers_bytes());
  }
  if (from.request_body_bytes() != 0) {
    set_request_body_bytes(from.request_body_bytes());
  }
  if (from.request_method() != 0) {
    set_request_method(from.request_method());
  }
}

void HTTPRequestProperties::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.accesslog.HTTPRequestProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HTTPRequestProperties::CopyFrom(const HTTPRequestProperties& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.accesslog.HTTPRequestProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HTTPRequestProperties::IsInitialized() const {
  return true;
}

void HTTPRequestProperties::Swap(HTTPRequestProperties* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HTTPRequestProperties::InternalSwap(HTTPRequestProperties* other) {
  using std::swap;
  request_headers_.Swap(&other->request_headers_);
  scheme_.Swap(&other->scheme_);
  authority_.Swap(&other->authority_);
  path_.Swap(&other->path_);
  user_agent_.Swap(&other->user_agent_);
  referer_.Swap(&other->referer_);
  forwarded_for_.Swap(&other->forwarded_for_);
  request_id_.Swap(&other->request_id_);
  original_path_.Swap(&other->original_path_);
  swap(port_, other->port_);
  swap(request_headers_bytes_, other->request_headers_bytes_);
  swap(request_body_bytes_, other->request_body_bytes_);
  swap(request_method_, other->request_method_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HTTPRequestProperties::GetMetadata() const {
  protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

HTTPResponseProperties_ResponseHeadersEntry_DoNotUse::HTTPResponseProperties_ResponseHeadersEntry_DoNotUse() {}
HTTPResponseProperties_ResponseHeadersEntry_DoNotUse::HTTPResponseProperties_ResponseHeadersEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void HTTPResponseProperties_ResponseHeadersEntry_DoNotUse::MergeFrom(const HTTPResponseProperties_ResponseHeadersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata HTTPResponseProperties_ResponseHeadersEntry_DoNotUse::GetMetadata() const {
  ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::file_level_metadata[6];
}
void HTTPResponseProperties_ResponseHeadersEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void HTTPResponseProperties::InitAsDefaultInstance() {
  ::envoy::api::v2::filter::accesslog::_HTTPResponseProperties_default_instance_._instance.get_mutable()->response_code_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
}
void HTTPResponseProperties::clear_response_code() {
  if (GetArenaNoVirtual() == NULL && response_code_ != NULL) {
    delete response_code_;
  }
  response_code_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HTTPResponseProperties::kResponseCodeFieldNumber;
const int HTTPResponseProperties::kResponseHeadersBytesFieldNumber;
const int HTTPResponseProperties::kResponseBodyBytesFieldNumber;
const int HTTPResponseProperties::kResponseHeadersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HTTPResponseProperties::HTTPResponseProperties()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsHTTPResponseProperties();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.accesslog.HTTPResponseProperties)
}
HTTPResponseProperties::HTTPResponseProperties(const HTTPResponseProperties& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  response_headers_.MergeFrom(from.response_headers_);
  if (from.has_response_code()) {
    response_code_ = new ::google::protobuf::UInt32Value(*from.response_code_);
  } else {
    response_code_ = NULL;
  }
  ::memcpy(&response_headers_bytes_, &from.response_headers_bytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&response_body_bytes_) -
    reinterpret_cast<char*>(&response_headers_bytes_)) + sizeof(response_body_bytes_));
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.accesslog.HTTPResponseProperties)
}

void HTTPResponseProperties::SharedCtor() {
  ::memset(&response_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&response_body_bytes_) -
      reinterpret_cast<char*>(&response_code_)) + sizeof(response_body_bytes_));
  _cached_size_ = 0;
}

HTTPResponseProperties::~HTTPResponseProperties() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.accesslog.HTTPResponseProperties)
  SharedDtor();
}

void HTTPResponseProperties::SharedDtor() {
  if (this != internal_default_instance()) delete response_code_;
}

void HTTPResponseProperties::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HTTPResponseProperties::descriptor() {
  ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HTTPResponseProperties& HTTPResponseProperties::default_instance() {
  ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsHTTPResponseProperties();
  return *internal_default_instance();
}

HTTPResponseProperties* HTTPResponseProperties::New(::google::protobuf::Arena* arena) const {
  HTTPResponseProperties* n = new HTTPResponseProperties;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HTTPResponseProperties::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.accesslog.HTTPResponseProperties)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  response_headers_.Clear();
  if (GetArenaNoVirtual() == NULL && response_code_ != NULL) {
    delete response_code_;
  }
  response_code_ = NULL;
  ::memset(&response_headers_bytes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&response_body_bytes_) -
      reinterpret_cast<char*>(&response_headers_bytes_)) + sizeof(response_body_bytes_));
  _internal_metadata_.Clear();
}

bool HTTPResponseProperties::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.accesslog.HTTPResponseProperties)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.UInt32Value response_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_response_code()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 response_headers_bytes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &response_headers_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 response_body_bytes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &response_body_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> response_headers = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          HTTPResponseProperties_ResponseHeadersEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              HTTPResponseProperties_ResponseHeadersEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&response_headers_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.filter.accesslog.HTTPResponseProperties.ResponseHeadersEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.filter.accesslog.HTTPResponseProperties.ResponseHeadersEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.accesslog.HTTPResponseProperties)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.accesslog.HTTPResponseProperties)
  return false;
#undef DO_
}

void HTTPResponseProperties::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.accesslog.HTTPResponseProperties)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.UInt32Value response_code = 1;
  if (this->has_response_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_code_, output);
  }

  // uint64 response_headers_bytes = 2;
  if (this->response_headers_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->response_headers_bytes(), output);
  }

  // uint64 response_body_bytes = 3;
  if (this->response_body_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->response_body_bytes(), output);
  }

  // map<string, string> response_headers = 4;
  if (!this->response_headers().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "envoy.api.v2.filter.accesslog.HTTPResponseProperties.ResponseHeadersEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "envoy.api.v2.filter.accesslog.HTTPResponseProperties.ResponseHeadersEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->response_headers().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->response_headers().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->response_headers().begin();
          it != this->response_headers().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<HTTPResponseProperties_ResponseHeadersEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(response_headers_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<HTTPResponseProperties_ResponseHeadersEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->response_headers().begin();
          it != this->response_headers().end(); ++it) {
        entry.reset(response_headers_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.accesslog.HTTPResponseProperties)
}

::google::protobuf::uint8* HTTPResponseProperties::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.accesslog.HTTPResponseProperties)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.UInt32Value response_code = 1;
  if (this->has_response_code()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->response_code_, deterministic, target);
  }

  // uint64 response_headers_bytes = 2;
  if (this->response_headers_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->response_headers_bytes(), target);
  }

  // uint64 response_body_bytes = 3;
  if (this->response_body_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->response_body_bytes(), target);
  }

  // map<string, string> response_headers = 4;
  if (!this->response_headers().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "envoy.api.v2.filter.accesslog.HTTPResponseProperties.ResponseHeadersEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "envoy.api.v2.filter.accesslog.HTTPResponseProperties.ResponseHeadersEntry.value");
      }
    };

    if (deterministic &&
        this->response_headers().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->response_headers().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->response_headers().begin();
          it != this->response_headers().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<HTTPResponseProperties_ResponseHeadersEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(response_headers_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<HTTPResponseProperties_ResponseHeadersEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->response_headers().begin();
          it != this->response_headers().end(); ++it) {
        entry.reset(response_headers_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.accesslog.HTTPResponseProperties)
  return target;
}

size_t HTTPResponseProperties::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.accesslog.HTTPResponseProperties)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, string> response_headers = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->response_headers_size());
  {
    ::google::protobuf::scoped_ptr<HTTPResponseProperties_ResponseHeadersEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->response_headers().begin();
        it != this->response_headers().end(); ++it) {
      entry.reset(response_headers_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // .google.protobuf.UInt32Value response_code = 1;
  if (this->has_response_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->response_code_);
  }

  // uint64 response_headers_bytes = 2;
  if (this->response_headers_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->response_headers_bytes());
  }

  // uint64 response_body_bytes = 3;
  if (this->response_body_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->response_body_bytes());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HTTPResponseProperties::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.accesslog.HTTPResponseProperties)
  GOOGLE_DCHECK_NE(&from, this);
  const HTTPResponseProperties* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HTTPResponseProperties>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.accesslog.HTTPResponseProperties)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.accesslog.HTTPResponseProperties)
    MergeFrom(*source);
  }
}

void HTTPResponseProperties::MergeFrom(const HTTPResponseProperties& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.accesslog.HTTPResponseProperties)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  response_headers_.MergeFrom(from.response_headers_);
  if (from.has_response_code()) {
    mutable_response_code()->::google::protobuf::UInt32Value::MergeFrom(from.response_code());
  }
  if (from.response_headers_bytes() != 0) {
    set_response_headers_bytes(from.response_headers_bytes());
  }
  if (from.response_body_bytes() != 0) {
    set_response_body_bytes(from.response_body_bytes());
  }
}

void HTTPResponseProperties::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.accesslog.HTTPResponseProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HTTPResponseProperties::CopyFrom(const HTTPResponseProperties& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.accesslog.HTTPResponseProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HTTPResponseProperties::IsInitialized() const {
  return true;
}

void HTTPResponseProperties::Swap(HTTPResponseProperties* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HTTPResponseProperties::InternalSwap(HTTPResponseProperties* other) {
  using std::swap;
  response_headers_.Swap(&other->response_headers_);
  swap(response_code_, other->response_code_);
  swap(response_headers_bytes_, other->response_headers_bytes_);
  swap(response_body_bytes_, other->response_body_bytes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HTTPResponseProperties::GetMetadata() const {
  protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HTTPAccessLogEntry::InitAsDefaultInstance() {
  ::envoy::api::v2::filter::accesslog::_HTTPAccessLogEntry_default_instance_._instance.get_mutable()->common_properties_ = const_cast< ::envoy::api::v2::filter::accesslog::AccessLogCommon*>(
      ::envoy::api::v2::filter::accesslog::AccessLogCommon::internal_default_instance());
  ::envoy::api::v2::filter::accesslog::_HTTPAccessLogEntry_default_instance_._instance.get_mutable()->request_ = const_cast< ::envoy::api::v2::filter::accesslog::HTTPRequestProperties*>(
      ::envoy::api::v2::filter::accesslog::HTTPRequestProperties::internal_default_instance());
  ::envoy::api::v2::filter::accesslog::_HTTPAccessLogEntry_default_instance_._instance.get_mutable()->response_ = const_cast< ::envoy::api::v2::filter::accesslog::HTTPResponseProperties*>(
      ::envoy::api::v2::filter::accesslog::HTTPResponseProperties::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HTTPAccessLogEntry::kCommonPropertiesFieldNumber;
const int HTTPAccessLogEntry::kProtocolVersionFieldNumber;
const int HTTPAccessLogEntry::kRequestFieldNumber;
const int HTTPAccessLogEntry::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HTTPAccessLogEntry::HTTPAccessLogEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsHTTPAccessLogEntry();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.accesslog.HTTPAccessLogEntry)
}
HTTPAccessLogEntry::HTTPAccessLogEntry(const HTTPAccessLogEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_common_properties()) {
    common_properties_ = new ::envoy::api::v2::filter::accesslog::AccessLogCommon(*from.common_properties_);
  } else {
    common_properties_ = NULL;
  }
  if (from.has_request()) {
    request_ = new ::envoy::api::v2::filter::accesslog::HTTPRequestProperties(*from.request_);
  } else {
    request_ = NULL;
  }
  if (from.has_response()) {
    response_ = new ::envoy::api::v2::filter::accesslog::HTTPResponseProperties(*from.response_);
  } else {
    response_ = NULL;
  }
  protocol_version_ = from.protocol_version_;
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.accesslog.HTTPAccessLogEntry)
}

void HTTPAccessLogEntry::SharedCtor() {
  ::memset(&common_properties_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&protocol_version_) -
      reinterpret_cast<char*>(&common_properties_)) + sizeof(protocol_version_));
  _cached_size_ = 0;
}

HTTPAccessLogEntry::~HTTPAccessLogEntry() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.accesslog.HTTPAccessLogEntry)
  SharedDtor();
}

void HTTPAccessLogEntry::SharedDtor() {
  if (this != internal_default_instance()) delete common_properties_;
  if (this != internal_default_instance()) delete request_;
  if (this != internal_default_instance()) delete response_;
}

void HTTPAccessLogEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HTTPAccessLogEntry::descriptor() {
  ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HTTPAccessLogEntry& HTTPAccessLogEntry::default_instance() {
  ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsHTTPAccessLogEntry();
  return *internal_default_instance();
}

HTTPAccessLogEntry* HTTPAccessLogEntry::New(::google::protobuf::Arena* arena) const {
  HTTPAccessLogEntry* n = new HTTPAccessLogEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HTTPAccessLogEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.accesslog.HTTPAccessLogEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && common_properties_ != NULL) {
    delete common_properties_;
  }
  common_properties_ = NULL;
  if (GetArenaNoVirtual() == NULL && request_ != NULL) {
    delete request_;
  }
  request_ = NULL;
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
  protocol_version_ = 0;
  _internal_metadata_.Clear();
}

bool HTTPAccessLogEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.accesslog.HTTPAccessLogEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.filter.accesslog.AccessLogCommon common_properties = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_common_properties()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.filter.accesslog.HTTPAccessLogEntry.HTTPVersion protocol_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_protocol_version(static_cast< ::envoy::api::v2::filter::accesslog::HTTPAccessLogEntry_HTTPVersion >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.filter.accesslog.HTTPRequestProperties request = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.filter.accesslog.HTTPResponseProperties response = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.accesslog.HTTPAccessLogEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.accesslog.HTTPAccessLogEntry)
  return false;
#undef DO_
}

void HTTPAccessLogEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.accesslog.HTTPAccessLogEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.filter.accesslog.AccessLogCommon common_properties = 1;
  if (this->has_common_properties()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->common_properties_, output);
  }

  // .envoy.api.v2.filter.accesslog.HTTPAccessLogEntry.HTTPVersion protocol_version = 2;
  if (this->protocol_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->protocol_version(), output);
  }

  // .envoy.api.v2.filter.accesslog.HTTPRequestProperties request = 3;
  if (this->has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->request_, output);
  }

  // .envoy.api.v2.filter.accesslog.HTTPResponseProperties response = 4;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->response_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.accesslog.HTTPAccessLogEntry)
}

::google::protobuf::uint8* HTTPAccessLogEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.accesslog.HTTPAccessLogEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.filter.accesslog.AccessLogCommon common_properties = 1;
  if (this->has_common_properties()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->common_properties_, deterministic, target);
  }

  // .envoy.api.v2.filter.accesslog.HTTPAccessLogEntry.HTTPVersion protocol_version = 2;
  if (this->protocol_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->protocol_version(), target);
  }

  // .envoy.api.v2.filter.accesslog.HTTPRequestProperties request = 3;
  if (this->has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->request_, deterministic, target);
  }

  // .envoy.api.v2.filter.accesslog.HTTPResponseProperties response = 4;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->response_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.accesslog.HTTPAccessLogEntry)
  return target;
}

size_t HTTPAccessLogEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.accesslog.HTTPAccessLogEntry)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .envoy.api.v2.filter.accesslog.AccessLogCommon common_properties = 1;
  if (this->has_common_properties()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->common_properties_);
  }

  // .envoy.api.v2.filter.accesslog.HTTPRequestProperties request = 3;
  if (this->has_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->request_);
  }

  // .envoy.api.v2.filter.accesslog.HTTPResponseProperties response = 4;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->response_);
  }

  // .envoy.api.v2.filter.accesslog.HTTPAccessLogEntry.HTTPVersion protocol_version = 2;
  if (this->protocol_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->protocol_version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HTTPAccessLogEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.accesslog.HTTPAccessLogEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const HTTPAccessLogEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HTTPAccessLogEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.accesslog.HTTPAccessLogEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.accesslog.HTTPAccessLogEntry)
    MergeFrom(*source);
  }
}

void HTTPAccessLogEntry::MergeFrom(const HTTPAccessLogEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.accesslog.HTTPAccessLogEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_common_properties()) {
    mutable_common_properties()->::envoy::api::v2::filter::accesslog::AccessLogCommon::MergeFrom(from.common_properties());
  }
  if (from.has_request()) {
    mutable_request()->::envoy::api::v2::filter::accesslog::HTTPRequestProperties::MergeFrom(from.request());
  }
  if (from.has_response()) {
    mutable_response()->::envoy::api::v2::filter::accesslog::HTTPResponseProperties::MergeFrom(from.response());
  }
  if (from.protocol_version() != 0) {
    set_protocol_version(from.protocol_version());
  }
}

void HTTPAccessLogEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.accesslog.HTTPAccessLogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HTTPAccessLogEntry::CopyFrom(const HTTPAccessLogEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.accesslog.HTTPAccessLogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HTTPAccessLogEntry::IsInitialized() const {
  return true;
}

void HTTPAccessLogEntry::Swap(HTTPAccessLogEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HTTPAccessLogEntry::InternalSwap(HTTPAccessLogEntry* other) {
  using std::swap;
  swap(common_properties_, other->common_properties_);
  swap(request_, other->request_);
  swap(response_, other->response_);
  swap(protocol_version_, other->protocol_version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HTTPAccessLogEntry::GetMetadata() const {
  protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ComparisonFilter::InitAsDefaultInstance() {
  ::envoy::api::v2::filter::accesslog::_ComparisonFilter_default_instance_._instance.get_mutable()->value_ = const_cast< ::envoy::api::v2::RuntimeUInt32*>(
      ::envoy::api::v2::RuntimeUInt32::internal_default_instance());
}
void ComparisonFilter::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ComparisonFilter::kOpFieldNumber;
const int ComparisonFilter::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ComparisonFilter::ComparisonFilter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsComparisonFilter();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.accesslog.ComparisonFilter)
}
ComparisonFilter::ComparisonFilter(const ComparisonFilter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_value()) {
    value_ = new ::envoy::api::v2::RuntimeUInt32(*from.value_);
  } else {
    value_ = NULL;
  }
  op_ = from.op_;
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.accesslog.ComparisonFilter)
}

void ComparisonFilter::SharedCtor() {
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&op_) -
      reinterpret_cast<char*>(&value_)) + sizeof(op_));
  _cached_size_ = 0;
}

ComparisonFilter::~ComparisonFilter() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.accesslog.ComparisonFilter)
  SharedDtor();
}

void ComparisonFilter::SharedDtor() {
  if (this != internal_default_instance()) delete value_;
}

void ComparisonFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComparisonFilter::descriptor() {
  ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ComparisonFilter& ComparisonFilter::default_instance() {
  ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsComparisonFilter();
  return *internal_default_instance();
}

ComparisonFilter* ComparisonFilter::New(::google::protobuf::Arena* arena) const {
  ComparisonFilter* n = new ComparisonFilter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ComparisonFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.accesslog.ComparisonFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
  op_ = 0;
  _internal_metadata_.Clear();
}

bool ComparisonFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.accesslog.ComparisonFilter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.filter.accesslog.ComparisonFilter.Op op = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_op(static_cast< ::envoy::api::v2::filter::accesslog::ComparisonFilter_Op >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.RuntimeUInt32 value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.accesslog.ComparisonFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.accesslog.ComparisonFilter)
  return false;
#undef DO_
}

void ComparisonFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.accesslog.ComparisonFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.filter.accesslog.ComparisonFilter.Op op = 1;
  if (this->op() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->op(), output);
  }

  // .envoy.api.v2.RuntimeUInt32 value = 2;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->value_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.accesslog.ComparisonFilter)
}

::google::protobuf::uint8* ComparisonFilter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.accesslog.ComparisonFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.filter.accesslog.ComparisonFilter.Op op = 1;
  if (this->op() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->op(), target);
  }

  // .envoy.api.v2.RuntimeUInt32 value = 2;
  if (this->has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->value_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.accesslog.ComparisonFilter)
  return target;
}

size_t ComparisonFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.accesslog.ComparisonFilter)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .envoy.api.v2.RuntimeUInt32 value = 2;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->value_);
  }

  // .envoy.api.v2.filter.accesslog.ComparisonFilter.Op op = 1;
  if (this->op() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->op());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComparisonFilter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.accesslog.ComparisonFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const ComparisonFilter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ComparisonFilter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.accesslog.ComparisonFilter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.accesslog.ComparisonFilter)
    MergeFrom(*source);
  }
}

void ComparisonFilter::MergeFrom(const ComparisonFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.accesslog.ComparisonFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_value()) {
    mutable_value()->::envoy::api::v2::RuntimeUInt32::MergeFrom(from.value());
  }
  if (from.op() != 0) {
    set_op(from.op());
  }
}

void ComparisonFilter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.accesslog.ComparisonFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComparisonFilter::CopyFrom(const ComparisonFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.accesslog.ComparisonFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComparisonFilter::IsInitialized() const {
  return true;
}

void ComparisonFilter::Swap(ComparisonFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ComparisonFilter::InternalSwap(ComparisonFilter* other) {
  using std::swap;
  swap(value_, other->value_);
  swap(op_, other->op_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ComparisonFilter::GetMetadata() const {
  protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StatusCodeFilter::InitAsDefaultInstance() {
  ::envoy::api::v2::filter::accesslog::_StatusCodeFilter_default_instance_._instance.get_mutable()->comparison_ = const_cast< ::envoy::api::v2::filter::accesslog::ComparisonFilter*>(
      ::envoy::api::v2::filter::accesslog::ComparisonFilter::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StatusCodeFilter::kComparisonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StatusCodeFilter::StatusCodeFilter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsStatusCodeFilter();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.accesslog.StatusCodeFilter)
}
StatusCodeFilter::StatusCodeFilter(const StatusCodeFilter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_comparison()) {
    comparison_ = new ::envoy::api::v2::filter::accesslog::ComparisonFilter(*from.comparison_);
  } else {
    comparison_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.accesslog.StatusCodeFilter)
}

void StatusCodeFilter::SharedCtor() {
  comparison_ = NULL;
  _cached_size_ = 0;
}

StatusCodeFilter::~StatusCodeFilter() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.accesslog.StatusCodeFilter)
  SharedDtor();
}

void StatusCodeFilter::SharedDtor() {
  if (this != internal_default_instance()) delete comparison_;
}

void StatusCodeFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusCodeFilter::descriptor() {
  ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StatusCodeFilter& StatusCodeFilter::default_instance() {
  ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsStatusCodeFilter();
  return *internal_default_instance();
}

StatusCodeFilter* StatusCodeFilter::New(::google::protobuf::Arena* arena) const {
  StatusCodeFilter* n = new StatusCodeFilter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StatusCodeFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.accesslog.StatusCodeFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && comparison_ != NULL) {
    delete comparison_;
  }
  comparison_ = NULL;
  _internal_metadata_.Clear();
}

bool StatusCodeFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.accesslog.StatusCodeFilter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.filter.accesslog.ComparisonFilter comparison = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_comparison()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.accesslog.StatusCodeFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.accesslog.StatusCodeFilter)
  return false;
#undef DO_
}

void StatusCodeFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.accesslog.StatusCodeFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.filter.accesslog.ComparisonFilter comparison = 1;
  if (this->has_comparison()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->comparison_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.accesslog.StatusCodeFilter)
}

::google::protobuf::uint8* StatusCodeFilter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.accesslog.StatusCodeFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.filter.accesslog.ComparisonFilter comparison = 1;
  if (this->has_comparison()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->comparison_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.accesslog.StatusCodeFilter)
  return target;
}

size_t StatusCodeFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.accesslog.StatusCodeFilter)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .envoy.api.v2.filter.accesslog.ComparisonFilter comparison = 1;
  if (this->has_comparison()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->comparison_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusCodeFilter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.accesslog.StatusCodeFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const StatusCodeFilter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StatusCodeFilter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.accesslog.StatusCodeFilter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.accesslog.StatusCodeFilter)
    MergeFrom(*source);
  }
}

void StatusCodeFilter::MergeFrom(const StatusCodeFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.accesslog.StatusCodeFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_comparison()) {
    mutable_comparison()->::envoy::api::v2::filter::accesslog::ComparisonFilter::MergeFrom(from.comparison());
  }
}

void StatusCodeFilter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.accesslog.StatusCodeFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusCodeFilter::CopyFrom(const StatusCodeFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.accesslog.StatusCodeFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusCodeFilter::IsInitialized() const {
  return true;
}

void StatusCodeFilter::Swap(StatusCodeFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StatusCodeFilter::InternalSwap(StatusCodeFilter* other) {
  using std::swap;
  swap(comparison_, other->comparison_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StatusCodeFilter::GetMetadata() const {
  protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DurationFilter::InitAsDefaultInstance() {
  ::envoy::api::v2::filter::accesslog::_DurationFilter_default_instance_._instance.get_mutable()->comparison_ = const_cast< ::envoy::api::v2::filter::accesslog::ComparisonFilter*>(
      ::envoy::api::v2::filter::accesslog::ComparisonFilter::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DurationFilter::kComparisonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DurationFilter::DurationFilter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsDurationFilter();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.accesslog.DurationFilter)
}
DurationFilter::DurationFilter(const DurationFilter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_comparison()) {
    comparison_ = new ::envoy::api::v2::filter::accesslog::ComparisonFilter(*from.comparison_);
  } else {
    comparison_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.accesslog.DurationFilter)
}

void DurationFilter::SharedCtor() {
  comparison_ = NULL;
  _cached_size_ = 0;
}

DurationFilter::~DurationFilter() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.accesslog.DurationFilter)
  SharedDtor();
}

void DurationFilter::SharedDtor() {
  if (this != internal_default_instance()) delete comparison_;
}

void DurationFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DurationFilter::descriptor() {
  ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DurationFilter& DurationFilter::default_instance() {
  ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsDurationFilter();
  return *internal_default_instance();
}

DurationFilter* DurationFilter::New(::google::protobuf::Arena* arena) const {
  DurationFilter* n = new DurationFilter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DurationFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.accesslog.DurationFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && comparison_ != NULL) {
    delete comparison_;
  }
  comparison_ = NULL;
  _internal_metadata_.Clear();
}

bool DurationFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.accesslog.DurationFilter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.filter.accesslog.ComparisonFilter comparison = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_comparison()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.accesslog.DurationFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.accesslog.DurationFilter)
  return false;
#undef DO_
}

void DurationFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.accesslog.DurationFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.filter.accesslog.ComparisonFilter comparison = 1;
  if (this->has_comparison()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->comparison_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.accesslog.DurationFilter)
}

::google::protobuf::uint8* DurationFilter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.accesslog.DurationFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.filter.accesslog.ComparisonFilter comparison = 1;
  if (this->has_comparison()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->comparison_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.accesslog.DurationFilter)
  return target;
}

size_t DurationFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.accesslog.DurationFilter)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .envoy.api.v2.filter.accesslog.ComparisonFilter comparison = 1;
  if (this->has_comparison()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->comparison_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DurationFilter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.accesslog.DurationFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const DurationFilter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DurationFilter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.accesslog.DurationFilter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.accesslog.DurationFilter)
    MergeFrom(*source);
  }
}

void DurationFilter::MergeFrom(const DurationFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.accesslog.DurationFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_comparison()) {
    mutable_comparison()->::envoy::api::v2::filter::accesslog::ComparisonFilter::MergeFrom(from.comparison());
  }
}

void DurationFilter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.accesslog.DurationFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DurationFilter::CopyFrom(const DurationFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.accesslog.DurationFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DurationFilter::IsInitialized() const {
  return true;
}

void DurationFilter::Swap(DurationFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DurationFilter::InternalSwap(DurationFilter* other) {
  using std::swap;
  swap(comparison_, other->comparison_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DurationFilter::GetMetadata() const {
  protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NotHealthCheckFilter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotHealthCheckFilter::NotHealthCheckFilter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsNotHealthCheckFilter();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.accesslog.NotHealthCheckFilter)
}
NotHealthCheckFilter::NotHealthCheckFilter(const NotHealthCheckFilter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.accesslog.NotHealthCheckFilter)
}

void NotHealthCheckFilter::SharedCtor() {
  _cached_size_ = 0;
}

NotHealthCheckFilter::~NotHealthCheckFilter() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.accesslog.NotHealthCheckFilter)
  SharedDtor();
}

void NotHealthCheckFilter::SharedDtor() {
}

void NotHealthCheckFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotHealthCheckFilter::descriptor() {
  ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NotHealthCheckFilter& NotHealthCheckFilter::default_instance() {
  ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsNotHealthCheckFilter();
  return *internal_default_instance();
}

NotHealthCheckFilter* NotHealthCheckFilter::New(::google::protobuf::Arena* arena) const {
  NotHealthCheckFilter* n = new NotHealthCheckFilter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NotHealthCheckFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.accesslog.NotHealthCheckFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool NotHealthCheckFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.accesslog.NotHealthCheckFilter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.accesslog.NotHealthCheckFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.accesslog.NotHealthCheckFilter)
  return false;
#undef DO_
}

void NotHealthCheckFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.accesslog.NotHealthCheckFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.accesslog.NotHealthCheckFilter)
}

::google::protobuf::uint8* NotHealthCheckFilter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.accesslog.NotHealthCheckFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.accesslog.NotHealthCheckFilter)
  return target;
}

size_t NotHealthCheckFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.accesslog.NotHealthCheckFilter)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotHealthCheckFilter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.accesslog.NotHealthCheckFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const NotHealthCheckFilter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NotHealthCheckFilter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.accesslog.NotHealthCheckFilter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.accesslog.NotHealthCheckFilter)
    MergeFrom(*source);
  }
}

void NotHealthCheckFilter::MergeFrom(const NotHealthCheckFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.accesslog.NotHealthCheckFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void NotHealthCheckFilter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.accesslog.NotHealthCheckFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotHealthCheckFilter::CopyFrom(const NotHealthCheckFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.accesslog.NotHealthCheckFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotHealthCheckFilter::IsInitialized() const {
  return true;
}

void NotHealthCheckFilter::Swap(NotHealthCheckFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NotHealthCheckFilter::InternalSwap(NotHealthCheckFilter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NotHealthCheckFilter::GetMetadata() const {
  protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TraceableFilter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TraceableFilter::TraceableFilter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsTraceableFilter();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.accesslog.TraceableFilter)
}
TraceableFilter::TraceableFilter(const TraceableFilter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.accesslog.TraceableFilter)
}

void TraceableFilter::SharedCtor() {
  _cached_size_ = 0;
}

TraceableFilter::~TraceableFilter() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.accesslog.TraceableFilter)
  SharedDtor();
}

void TraceableFilter::SharedDtor() {
}

void TraceableFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TraceableFilter::descriptor() {
  ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TraceableFilter& TraceableFilter::default_instance() {
  ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsTraceableFilter();
  return *internal_default_instance();
}

TraceableFilter* TraceableFilter::New(::google::protobuf::Arena* arena) const {
  TraceableFilter* n = new TraceableFilter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TraceableFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.accesslog.TraceableFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool TraceableFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.accesslog.TraceableFilter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.accesslog.TraceableFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.accesslog.TraceableFilter)
  return false;
#undef DO_
}

void TraceableFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.accesslog.TraceableFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.accesslog.TraceableFilter)
}

::google::protobuf::uint8* TraceableFilter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.accesslog.TraceableFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.accesslog.TraceableFilter)
  return target;
}

size_t TraceableFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.accesslog.TraceableFilter)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TraceableFilter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.accesslog.TraceableFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const TraceableFilter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TraceableFilter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.accesslog.TraceableFilter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.accesslog.TraceableFilter)
    MergeFrom(*source);
  }
}

void TraceableFilter::MergeFrom(const TraceableFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.accesslog.TraceableFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TraceableFilter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.accesslog.TraceableFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TraceableFilter::CopyFrom(const TraceableFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.accesslog.TraceableFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceableFilter::IsInitialized() const {
  return true;
}

void TraceableFilter::Swap(TraceableFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TraceableFilter::InternalSwap(TraceableFilter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TraceableFilter::GetMetadata() const {
  protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RuntimeFilter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RuntimeFilter::kRuntimeKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RuntimeFilter::RuntimeFilter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsRuntimeFilter();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.accesslog.RuntimeFilter)
}
RuntimeFilter::RuntimeFilter(const RuntimeFilter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  runtime_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.runtime_key().size() > 0) {
    runtime_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.runtime_key_);
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.accesslog.RuntimeFilter)
}

void RuntimeFilter::SharedCtor() {
  runtime_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

RuntimeFilter::~RuntimeFilter() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.accesslog.RuntimeFilter)
  SharedDtor();
}

void RuntimeFilter::SharedDtor() {
  runtime_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RuntimeFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RuntimeFilter::descriptor() {
  ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RuntimeFilter& RuntimeFilter::default_instance() {
  ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsRuntimeFilter();
  return *internal_default_instance();
}

RuntimeFilter* RuntimeFilter::New(::google::protobuf::Arena* arena) const {
  RuntimeFilter* n = new RuntimeFilter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RuntimeFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.accesslog.RuntimeFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  runtime_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool RuntimeFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.accesslog.RuntimeFilter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string runtime_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_runtime_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->runtime_key().data(), static_cast<int>(this->runtime_key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.filter.accesslog.RuntimeFilter.runtime_key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.accesslog.RuntimeFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.accesslog.RuntimeFilter)
  return false;
#undef DO_
}

void RuntimeFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.accesslog.RuntimeFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string runtime_key = 1;
  if (this->runtime_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->runtime_key().data(), static_cast<int>(this->runtime_key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.accesslog.RuntimeFilter.runtime_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->runtime_key(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.accesslog.RuntimeFilter)
}

::google::protobuf::uint8* RuntimeFilter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.accesslog.RuntimeFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string runtime_key = 1;
  if (this->runtime_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->runtime_key().data(), static_cast<int>(this->runtime_key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.accesslog.RuntimeFilter.runtime_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->runtime_key(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.accesslog.RuntimeFilter)
  return target;
}

size_t RuntimeFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.accesslog.RuntimeFilter)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string runtime_key = 1;
  if (this->runtime_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->runtime_key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RuntimeFilter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.accesslog.RuntimeFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const RuntimeFilter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RuntimeFilter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.accesslog.RuntimeFilter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.accesslog.RuntimeFilter)
    MergeFrom(*source);
  }
}

void RuntimeFilter::MergeFrom(const RuntimeFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.accesslog.RuntimeFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.runtime_key().size() > 0) {

    runtime_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.runtime_key_);
  }
}

void RuntimeFilter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.accesslog.RuntimeFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuntimeFilter::CopyFrom(const RuntimeFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.accesslog.RuntimeFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuntimeFilter::IsInitialized() const {
  return true;
}

void RuntimeFilter::Swap(RuntimeFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RuntimeFilter::InternalSwap(RuntimeFilter* other) {
  using std::swap;
  runtime_key_.Swap(&other->runtime_key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RuntimeFilter::GetMetadata() const {
  protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AndFilter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AndFilter::kFiltersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AndFilter::AndFilter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsAccessLogFilter();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.accesslog.AndFilter)
}
AndFilter::AndFilter(const AndFilter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      filters_(from.filters_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.accesslog.AndFilter)
}

void AndFilter::SharedCtor() {
  _cached_size_ = 0;
}

AndFilter::~AndFilter() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.accesslog.AndFilter)
  SharedDtor();
}

void AndFilter::SharedDtor() {
}

void AndFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AndFilter::descriptor() {
  ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AndFilter& AndFilter::default_instance() {
  ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsAccessLogFilter();
  return *internal_default_instance();
}

AndFilter* AndFilter::New(::google::protobuf::Arena* arena) const {
  AndFilter* n = new AndFilter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AndFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.accesslog.AndFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filters_.Clear();
  _internal_metadata_.Clear();
}

bool AndFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.accesslog.AndFilter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .envoy.api.v2.filter.accesslog.AccessLogFilter filters = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_filters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.accesslog.AndFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.accesslog.AndFilter)
  return false;
#undef DO_
}

void AndFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.accesslog.AndFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .envoy.api.v2.filter.accesslog.AccessLogFilter filters = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->filters_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->filters(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.accesslog.AndFilter)
}

::google::protobuf::uint8* AndFilter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.accesslog.AndFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .envoy.api.v2.filter.accesslog.AccessLogFilter filters = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->filters_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->filters(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.accesslog.AndFilter)
  return target;
}

size_t AndFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.accesslog.AndFilter)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .envoy.api.v2.filter.accesslog.AccessLogFilter filters = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->filters_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->filters(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AndFilter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.accesslog.AndFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const AndFilter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AndFilter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.accesslog.AndFilter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.accesslog.AndFilter)
    MergeFrom(*source);
  }
}

void AndFilter::MergeFrom(const AndFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.accesslog.AndFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  filters_.MergeFrom(from.filters_);
}

void AndFilter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.accesslog.AndFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AndFilter::CopyFrom(const AndFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.accesslog.AndFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AndFilter::IsInitialized() const {
  return true;
}

void AndFilter::Swap(AndFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AndFilter::InternalSwap(AndFilter* other) {
  using std::swap;
  filters_.InternalSwap(&other->filters_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AndFilter::GetMetadata() const {
  protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OrFilter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OrFilter::kFiltersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OrFilter::OrFilter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsAccessLogFilter();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.accesslog.OrFilter)
}
OrFilter::OrFilter(const OrFilter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      filters_(from.filters_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.accesslog.OrFilter)
}

void OrFilter::SharedCtor() {
  _cached_size_ = 0;
}

OrFilter::~OrFilter() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.accesslog.OrFilter)
  SharedDtor();
}

void OrFilter::SharedDtor() {
}

void OrFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrFilter::descriptor() {
  ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OrFilter& OrFilter::default_instance() {
  ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsAccessLogFilter();
  return *internal_default_instance();
}

OrFilter* OrFilter::New(::google::protobuf::Arena* arena) const {
  OrFilter* n = new OrFilter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OrFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.accesslog.OrFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filters_.Clear();
  _internal_metadata_.Clear();
}

bool OrFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.accesslog.OrFilter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .envoy.api.v2.filter.accesslog.AccessLogFilter filters = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_filters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.accesslog.OrFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.accesslog.OrFilter)
  return false;
#undef DO_
}

void OrFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.accesslog.OrFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .envoy.api.v2.filter.accesslog.AccessLogFilter filters = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->filters_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->filters(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.accesslog.OrFilter)
}

::google::protobuf::uint8* OrFilter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.accesslog.OrFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .envoy.api.v2.filter.accesslog.AccessLogFilter filters = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->filters_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->filters(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.accesslog.OrFilter)
  return target;
}

size_t OrFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.accesslog.OrFilter)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .envoy.api.v2.filter.accesslog.AccessLogFilter filters = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->filters_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->filters(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrFilter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.accesslog.OrFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const OrFilter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OrFilter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.accesslog.OrFilter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.accesslog.OrFilter)
    MergeFrom(*source);
  }
}

void OrFilter::MergeFrom(const OrFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.accesslog.OrFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  filters_.MergeFrom(from.filters_);
}

void OrFilter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.accesslog.OrFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrFilter::CopyFrom(const OrFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.accesslog.OrFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrFilter::IsInitialized() const {
  return true;
}

void OrFilter::Swap(OrFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OrFilter::InternalSwap(OrFilter* other) {
  using std::swap;
  filters_.InternalSwap(&other->filters_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OrFilter::GetMetadata() const {
  protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AccessLogFilter::InitAsDefaultInstance() {
  ::envoy::api::v2::filter::accesslog::_AccessLogFilter_default_instance_.status_code_filter_ = const_cast< ::envoy::api::v2::filter::accesslog::StatusCodeFilter*>(
      ::envoy::api::v2::filter::accesslog::StatusCodeFilter::internal_default_instance());
  ::envoy::api::v2::filter::accesslog::_AccessLogFilter_default_instance_.duration_filter_ = const_cast< ::envoy::api::v2::filter::accesslog::DurationFilter*>(
      ::envoy::api::v2::filter::accesslog::DurationFilter::internal_default_instance());
  ::envoy::api::v2::filter::accesslog::_AccessLogFilter_default_instance_.not_health_check_filter_ = const_cast< ::envoy::api::v2::filter::accesslog::NotHealthCheckFilter*>(
      ::envoy::api::v2::filter::accesslog::NotHealthCheckFilter::internal_default_instance());
  ::envoy::api::v2::filter::accesslog::_AccessLogFilter_default_instance_.traceable_filter_ = const_cast< ::envoy::api::v2::filter::accesslog::TraceableFilter*>(
      ::envoy::api::v2::filter::accesslog::TraceableFilter::internal_default_instance());
  ::envoy::api::v2::filter::accesslog::_AccessLogFilter_default_instance_.runtime_filter_ = const_cast< ::envoy::api::v2::filter::accesslog::RuntimeFilter*>(
      ::envoy::api::v2::filter::accesslog::RuntimeFilter::internal_default_instance());
  ::envoy::api::v2::filter::accesslog::_AccessLogFilter_default_instance_.and_filter_ = const_cast< ::envoy::api::v2::filter::accesslog::AndFilter*>(
      ::envoy::api::v2::filter::accesslog::AndFilter::internal_default_instance());
  ::envoy::api::v2::filter::accesslog::_AccessLogFilter_default_instance_.or_filter_ = const_cast< ::envoy::api::v2::filter::accesslog::OrFilter*>(
      ::envoy::api::v2::filter::accesslog::OrFilter::internal_default_instance());
}
void AccessLogFilter::set_allocated_status_code_filter(::envoy::api::v2::filter::accesslog::StatusCodeFilter* status_code_filter) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_filter_specifier();
  if (status_code_filter) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      status_code_filter = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status_code_filter, submessage_arena);
    }
    set_has_status_code_filter();
    filter_specifier_.status_code_filter_ = status_code_filter;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.accesslog.AccessLogFilter.status_code_filter)
}
void AccessLogFilter::set_allocated_duration_filter(::envoy::api::v2::filter::accesslog::DurationFilter* duration_filter) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_filter_specifier();
  if (duration_filter) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      duration_filter = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, duration_filter, submessage_arena);
    }
    set_has_duration_filter();
    filter_specifier_.duration_filter_ = duration_filter;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.accesslog.AccessLogFilter.duration_filter)
}
void AccessLogFilter::set_allocated_not_health_check_filter(::envoy::api::v2::filter::accesslog::NotHealthCheckFilter* not_health_check_filter) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_filter_specifier();
  if (not_health_check_filter) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      not_health_check_filter = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, not_health_check_filter, submessage_arena);
    }
    set_has_not_health_check_filter();
    filter_specifier_.not_health_check_filter_ = not_health_check_filter;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.accesslog.AccessLogFilter.not_health_check_filter)
}
void AccessLogFilter::set_allocated_traceable_filter(::envoy::api::v2::filter::accesslog::TraceableFilter* traceable_filter) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_filter_specifier();
  if (traceable_filter) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      traceable_filter = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, traceable_filter, submessage_arena);
    }
    set_has_traceable_filter();
    filter_specifier_.traceable_filter_ = traceable_filter;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.accesslog.AccessLogFilter.traceable_filter)
}
void AccessLogFilter::set_allocated_runtime_filter(::envoy::api::v2::filter::accesslog::RuntimeFilter* runtime_filter) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_filter_specifier();
  if (runtime_filter) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      runtime_filter = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, runtime_filter, submessage_arena);
    }
    set_has_runtime_filter();
    filter_specifier_.runtime_filter_ = runtime_filter;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.accesslog.AccessLogFilter.runtime_filter)
}
void AccessLogFilter::set_allocated_and_filter(::envoy::api::v2::filter::accesslog::AndFilter* and_filter) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_filter_specifier();
  if (and_filter) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      and_filter = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, and_filter, submessage_arena);
    }
    set_has_and_filter();
    filter_specifier_.and_filter_ = and_filter;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.accesslog.AccessLogFilter.and_filter)
}
void AccessLogFilter::set_allocated_or_filter(::envoy::api::v2::filter::accesslog::OrFilter* or_filter) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_filter_specifier();
  if (or_filter) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      or_filter = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, or_filter, submessage_arena);
    }
    set_has_or_filter();
    filter_specifier_.or_filter_ = or_filter;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.accesslog.AccessLogFilter.or_filter)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccessLogFilter::kStatusCodeFilterFieldNumber;
const int AccessLogFilter::kDurationFilterFieldNumber;
const int AccessLogFilter::kNotHealthCheckFilterFieldNumber;
const int AccessLogFilter::kTraceableFilterFieldNumber;
const int AccessLogFilter::kRuntimeFilterFieldNumber;
const int AccessLogFilter::kAndFilterFieldNumber;
const int AccessLogFilter::kOrFilterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccessLogFilter::AccessLogFilter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsAccessLogFilter();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.accesslog.AccessLogFilter)
}
AccessLogFilter::AccessLogFilter(const AccessLogFilter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_filter_specifier();
  switch (from.filter_specifier_case()) {
    case kStatusCodeFilter: {
      mutable_status_code_filter()->::envoy::api::v2::filter::accesslog::StatusCodeFilter::MergeFrom(from.status_code_filter());
      break;
    }
    case kDurationFilter: {
      mutable_duration_filter()->::envoy::api::v2::filter::accesslog::DurationFilter::MergeFrom(from.duration_filter());
      break;
    }
    case kNotHealthCheckFilter: {
      mutable_not_health_check_filter()->::envoy::api::v2::filter::accesslog::NotHealthCheckFilter::MergeFrom(from.not_health_check_filter());
      break;
    }
    case kTraceableFilter: {
      mutable_traceable_filter()->::envoy::api::v2::filter::accesslog::TraceableFilter::MergeFrom(from.traceable_filter());
      break;
    }
    case kRuntimeFilter: {
      mutable_runtime_filter()->::envoy::api::v2::filter::accesslog::RuntimeFilter::MergeFrom(from.runtime_filter());
      break;
    }
    case kAndFilter: {
      mutable_and_filter()->::envoy::api::v2::filter::accesslog::AndFilter::MergeFrom(from.and_filter());
      break;
    }
    case kOrFilter: {
      mutable_or_filter()->::envoy::api::v2::filter::accesslog::OrFilter::MergeFrom(from.or_filter());
      break;
    }
    case FILTER_SPECIFIER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.accesslog.AccessLogFilter)
}

void AccessLogFilter::SharedCtor() {
  clear_has_filter_specifier();
  _cached_size_ = 0;
}

AccessLogFilter::~AccessLogFilter() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.accesslog.AccessLogFilter)
  SharedDtor();
}

void AccessLogFilter::SharedDtor() {
  if (has_filter_specifier()) {
    clear_filter_specifier();
  }
}

void AccessLogFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccessLogFilter::descriptor() {
  ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccessLogFilter& AccessLogFilter::default_instance() {
  ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsAccessLogFilter();
  return *internal_default_instance();
}

AccessLogFilter* AccessLogFilter::New(::google::protobuf::Arena* arena) const {
  AccessLogFilter* n = new AccessLogFilter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AccessLogFilter::clear_filter_specifier() {
// @@protoc_insertion_point(one_of_clear_start:envoy.api.v2.filter.accesslog.AccessLogFilter)
  switch (filter_specifier_case()) {
    case kStatusCodeFilter: {
      delete filter_specifier_.status_code_filter_;
      break;
    }
    case kDurationFilter: {
      delete filter_specifier_.duration_filter_;
      break;
    }
    case kNotHealthCheckFilter: {
      delete filter_specifier_.not_health_check_filter_;
      break;
    }
    case kTraceableFilter: {
      delete filter_specifier_.traceable_filter_;
      break;
    }
    case kRuntimeFilter: {
      delete filter_specifier_.runtime_filter_;
      break;
    }
    case kAndFilter: {
      delete filter_specifier_.and_filter_;
      break;
    }
    case kOrFilter: {
      delete filter_specifier_.or_filter_;
      break;
    }
    case FILTER_SPECIFIER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FILTER_SPECIFIER_NOT_SET;
}


void AccessLogFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.accesslog.AccessLogFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_filter_specifier();
  _internal_metadata_.Clear();
}

bool AccessLogFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.accesslog.AccessLogFilter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.filter.accesslog.StatusCodeFilter status_code_filter = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_status_code_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.filter.accesslog.DurationFilter duration_filter = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_duration_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.filter.accesslog.NotHealthCheckFilter not_health_check_filter = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_not_health_check_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.filter.accesslog.TraceableFilter traceable_filter = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_traceable_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.filter.accesslog.RuntimeFilter runtime_filter = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_runtime_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.filter.accesslog.AndFilter and_filter = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_and_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.filter.accesslog.OrFilter or_filter = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_or_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.accesslog.AccessLogFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.accesslog.AccessLogFilter)
  return false;
#undef DO_
}

void AccessLogFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.accesslog.AccessLogFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.filter.accesslog.StatusCodeFilter status_code_filter = 1;
  if (has_status_code_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *filter_specifier_.status_code_filter_, output);
  }

  // .envoy.api.v2.filter.accesslog.DurationFilter duration_filter = 2;
  if (has_duration_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *filter_specifier_.duration_filter_, output);
  }

  // .envoy.api.v2.filter.accesslog.NotHealthCheckFilter not_health_check_filter = 3;
  if (has_not_health_check_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *filter_specifier_.not_health_check_filter_, output);
  }

  // .envoy.api.v2.filter.accesslog.TraceableFilter traceable_filter = 4;
  if (has_traceable_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *filter_specifier_.traceable_filter_, output);
  }

  // .envoy.api.v2.filter.accesslog.RuntimeFilter runtime_filter = 5;
  if (has_runtime_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *filter_specifier_.runtime_filter_, output);
  }

  // .envoy.api.v2.filter.accesslog.AndFilter and_filter = 6;
  if (has_and_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *filter_specifier_.and_filter_, output);
  }

  // .envoy.api.v2.filter.accesslog.OrFilter or_filter = 7;
  if (has_or_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *filter_specifier_.or_filter_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.accesslog.AccessLogFilter)
}

::google::protobuf::uint8* AccessLogFilter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.accesslog.AccessLogFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.filter.accesslog.StatusCodeFilter status_code_filter = 1;
  if (has_status_code_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *filter_specifier_.status_code_filter_, deterministic, target);
  }

  // .envoy.api.v2.filter.accesslog.DurationFilter duration_filter = 2;
  if (has_duration_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *filter_specifier_.duration_filter_, deterministic, target);
  }

  // .envoy.api.v2.filter.accesslog.NotHealthCheckFilter not_health_check_filter = 3;
  if (has_not_health_check_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *filter_specifier_.not_health_check_filter_, deterministic, target);
  }

  // .envoy.api.v2.filter.accesslog.TraceableFilter traceable_filter = 4;
  if (has_traceable_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *filter_specifier_.traceable_filter_, deterministic, target);
  }

  // .envoy.api.v2.filter.accesslog.RuntimeFilter runtime_filter = 5;
  if (has_runtime_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *filter_specifier_.runtime_filter_, deterministic, target);
  }

  // .envoy.api.v2.filter.accesslog.AndFilter and_filter = 6;
  if (has_and_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *filter_specifier_.and_filter_, deterministic, target);
  }

  // .envoy.api.v2.filter.accesslog.OrFilter or_filter = 7;
  if (has_or_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *filter_specifier_.or_filter_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.accesslog.AccessLogFilter)
  return target;
}

size_t AccessLogFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.accesslog.AccessLogFilter)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (filter_specifier_case()) {
    // .envoy.api.v2.filter.accesslog.StatusCodeFilter status_code_filter = 1;
    case kStatusCodeFilter: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *filter_specifier_.status_code_filter_);
      break;
    }
    // .envoy.api.v2.filter.accesslog.DurationFilter duration_filter = 2;
    case kDurationFilter: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *filter_specifier_.duration_filter_);
      break;
    }
    // .envoy.api.v2.filter.accesslog.NotHealthCheckFilter not_health_check_filter = 3;
    case kNotHealthCheckFilter: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *filter_specifier_.not_health_check_filter_);
      break;
    }
    // .envoy.api.v2.filter.accesslog.TraceableFilter traceable_filter = 4;
    case kTraceableFilter: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *filter_specifier_.traceable_filter_);
      break;
    }
    // .envoy.api.v2.filter.accesslog.RuntimeFilter runtime_filter = 5;
    case kRuntimeFilter: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *filter_specifier_.runtime_filter_);
      break;
    }
    // .envoy.api.v2.filter.accesslog.AndFilter and_filter = 6;
    case kAndFilter: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *filter_specifier_.and_filter_);
      break;
    }
    // .envoy.api.v2.filter.accesslog.OrFilter or_filter = 7;
    case kOrFilter: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *filter_specifier_.or_filter_);
      break;
    }
    case FILTER_SPECIFIER_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccessLogFilter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.accesslog.AccessLogFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const AccessLogFilter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccessLogFilter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.accesslog.AccessLogFilter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.accesslog.AccessLogFilter)
    MergeFrom(*source);
  }
}

void AccessLogFilter::MergeFrom(const AccessLogFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.accesslog.AccessLogFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.filter_specifier_case()) {
    case kStatusCodeFilter: {
      mutable_status_code_filter()->::envoy::api::v2::filter::accesslog::StatusCodeFilter::MergeFrom(from.status_code_filter());
      break;
    }
    case kDurationFilter: {
      mutable_duration_filter()->::envoy::api::v2::filter::accesslog::DurationFilter::MergeFrom(from.duration_filter());
      break;
    }
    case kNotHealthCheckFilter: {
      mutable_not_health_check_filter()->::envoy::api::v2::filter::accesslog::NotHealthCheckFilter::MergeFrom(from.not_health_check_filter());
      break;
    }
    case kTraceableFilter: {
      mutable_traceable_filter()->::envoy::api::v2::filter::accesslog::TraceableFilter::MergeFrom(from.traceable_filter());
      break;
    }
    case kRuntimeFilter: {
      mutable_runtime_filter()->::envoy::api::v2::filter::accesslog::RuntimeFilter::MergeFrom(from.runtime_filter());
      break;
    }
    case kAndFilter: {
      mutable_and_filter()->::envoy::api::v2::filter::accesslog::AndFilter::MergeFrom(from.and_filter());
      break;
    }
    case kOrFilter: {
      mutable_or_filter()->::envoy::api::v2::filter::accesslog::OrFilter::MergeFrom(from.or_filter());
      break;
    }
    case FILTER_SPECIFIER_NOT_SET: {
      break;
    }
  }
}

void AccessLogFilter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.accesslog.AccessLogFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccessLogFilter::CopyFrom(const AccessLogFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.accesslog.AccessLogFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccessLogFilter::IsInitialized() const {
  return true;
}

void AccessLogFilter::Swap(AccessLogFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccessLogFilter::InternalSwap(AccessLogFilter* other) {
  using std::swap;
  swap(filter_specifier_, other->filter_specifier_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AccessLogFilter::GetMetadata() const {
  protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FileAccessLog::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileAccessLog::kPathFieldNumber;
const int FileAccessLog::kFormatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileAccessLog::FileAccessLog()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsFileAccessLog();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.accesslog.FileAccessLog)
}
FileAccessLog::FileAccessLog(const FileAccessLog& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  format_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.format().size() > 0) {
    format_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.format_);
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.accesslog.FileAccessLog)
}

void FileAccessLog::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  format_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

FileAccessLog::~FileAccessLog() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.accesslog.FileAccessLog)
  SharedDtor();
}

void FileAccessLog::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  format_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FileAccessLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileAccessLog::descriptor() {
  ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FileAccessLog& FileAccessLog::default_instance() {
  ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsFileAccessLog();
  return *internal_default_instance();
}

FileAccessLog* FileAccessLog::New(::google::protobuf::Arena* arena) const {
  FileAccessLog* n = new FileAccessLog;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FileAccessLog::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.accesslog.FileAccessLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool FileAccessLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.accesslog.FileAccessLog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.filter.accesslog.FileAccessLog.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string format = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_format()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->format().data(), static_cast<int>(this->format().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.filter.accesslog.FileAccessLog.format"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.accesslog.FileAccessLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.accesslog.FileAccessLog)
  return false;
#undef DO_
}

void FileAccessLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.accesslog.FileAccessLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.accesslog.FileAccessLog.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // string format = 2;
  if (this->format().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->format().data(), static_cast<int>(this->format().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.accesslog.FileAccessLog.format");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->format(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.accesslog.FileAccessLog)
}

::google::protobuf::uint8* FileAccessLog::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.accesslog.FileAccessLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.accesslog.FileAccessLog.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // string format = 2;
  if (this->format().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->format().data(), static_cast<int>(this->format().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.accesslog.FileAccessLog.format");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->format(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.accesslog.FileAccessLog)
  return target;
}

size_t FileAccessLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.accesslog.FileAccessLog)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // string format = 2;
  if (this->format().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->format());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileAccessLog::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.accesslog.FileAccessLog)
  GOOGLE_DCHECK_NE(&from, this);
  const FileAccessLog* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FileAccessLog>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.accesslog.FileAccessLog)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.accesslog.FileAccessLog)
    MergeFrom(*source);
  }
}

void FileAccessLog::MergeFrom(const FileAccessLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.accesslog.FileAccessLog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.format().size() > 0) {

    format_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.format_);
  }
}

void FileAccessLog::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.accesslog.FileAccessLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileAccessLog::CopyFrom(const FileAccessLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.accesslog.FileAccessLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileAccessLog::IsInitialized() const {
  return true;
}

void FileAccessLog::Swap(FileAccessLog* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileAccessLog::InternalSwap(FileAccessLog* other) {
  using std::swap;
  path_.Swap(&other->path_);
  format_.Swap(&other->format_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FileAccessLog::GetMetadata() const {
  protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AccessLogServiceConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccessLogServiceConfig::kLogNameFieldNumber;
const int AccessLogServiceConfig::kClusterNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccessLogServiceConfig::AccessLogServiceConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsAccessLogServiceConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.accesslog.AccessLogServiceConfig)
}
AccessLogServiceConfig::AccessLogServiceConfig(const AccessLogServiceConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  log_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.log_name().size() > 0) {
    log_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.log_name_);
  }
  cluster_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_name().size() > 0) {
    cluster_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_name_);
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.accesslog.AccessLogServiceConfig)
}

void AccessLogServiceConfig::SharedCtor() {
  log_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

AccessLogServiceConfig::~AccessLogServiceConfig() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.accesslog.AccessLogServiceConfig)
  SharedDtor();
}

void AccessLogServiceConfig::SharedDtor() {
  log_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AccessLogServiceConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccessLogServiceConfig::descriptor() {
  ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccessLogServiceConfig& AccessLogServiceConfig::default_instance() {
  ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsAccessLogServiceConfig();
  return *internal_default_instance();
}

AccessLogServiceConfig* AccessLogServiceConfig::New(::google::protobuf::Arena* arena) const {
  AccessLogServiceConfig* n = new AccessLogServiceConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AccessLogServiceConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.accesslog.AccessLogServiceConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  log_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool AccessLogServiceConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.accesslog.AccessLogServiceConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string log_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->log_name().data(), static_cast<int>(this->log_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.filter.accesslog.AccessLogServiceConfig.log_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_name().data(), static_cast<int>(this->cluster_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.filter.accesslog.AccessLogServiceConfig.cluster_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.accesslog.AccessLogServiceConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.accesslog.AccessLogServiceConfig)
  return false;
#undef DO_
}

void AccessLogServiceConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.accesslog.AccessLogServiceConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string log_name = 1;
  if (this->log_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->log_name().data(), static_cast<int>(this->log_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.accesslog.AccessLogServiceConfig.log_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->log_name(), output);
  }

  // string cluster_name = 2;
  if (this->cluster_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_name().data(), static_cast<int>(this->cluster_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.accesslog.AccessLogServiceConfig.cluster_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cluster_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.accesslog.AccessLogServiceConfig)
}

::google::protobuf::uint8* AccessLogServiceConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.accesslog.AccessLogServiceConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string log_name = 1;
  if (this->log_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->log_name().data(), static_cast<int>(this->log_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.accesslog.AccessLogServiceConfig.log_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->log_name(), target);
  }

  // string cluster_name = 2;
  if (this->cluster_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_name().data(), static_cast<int>(this->cluster_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.accesslog.AccessLogServiceConfig.cluster_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cluster_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.accesslog.AccessLogServiceConfig)
  return target;
}

size_t AccessLogServiceConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.accesslog.AccessLogServiceConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string log_name = 1;
  if (this->log_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->log_name());
  }

  // string cluster_name = 2;
  if (this->cluster_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccessLogServiceConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.accesslog.AccessLogServiceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const AccessLogServiceConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccessLogServiceConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.accesslog.AccessLogServiceConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.accesslog.AccessLogServiceConfig)
    MergeFrom(*source);
  }
}

void AccessLogServiceConfig::MergeFrom(const AccessLogServiceConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.accesslog.AccessLogServiceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.log_name().size() > 0) {

    log_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.log_name_);
  }
  if (from.cluster_name().size() > 0) {

    cluster_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_name_);
  }
}

void AccessLogServiceConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.accesslog.AccessLogServiceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccessLogServiceConfig::CopyFrom(const AccessLogServiceConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.accesslog.AccessLogServiceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccessLogServiceConfig::IsInitialized() const {
  return true;
}

void AccessLogServiceConfig::Swap(AccessLogServiceConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccessLogServiceConfig::InternalSwap(AccessLogServiceConfig* other) {
  using std::swap;
  log_name_.Swap(&other->log_name_);
  cluster_name_.Swap(&other->cluster_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AccessLogServiceConfig::GetMetadata() const {
  protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StreamAccessLogsMessage_Identifier::InitAsDefaultInstance() {
  ::envoy::api::v2::filter::accesslog::_StreamAccessLogsMessage_Identifier_default_instance_._instance.get_mutable()->node_ = const_cast< ::envoy::api::v2::Node*>(
      ::envoy::api::v2::Node::internal_default_instance());
}
void StreamAccessLogsMessage_Identifier::clear_node() {
  if (GetArenaNoVirtual() == NULL && node_ != NULL) {
    delete node_;
  }
  node_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamAccessLogsMessage_Identifier::kNodeFieldNumber;
const int StreamAccessLogsMessage_Identifier::kLogNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamAccessLogsMessage_Identifier::StreamAccessLogsMessage_Identifier()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsStreamAccessLogsMessage_Identifier();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.Identifier)
}
StreamAccessLogsMessage_Identifier::StreamAccessLogsMessage_Identifier(const StreamAccessLogsMessage_Identifier& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  log_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.log_name().size() > 0) {
    log_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.log_name_);
  }
  if (from.has_node()) {
    node_ = new ::envoy::api::v2::Node(*from.node_);
  } else {
    node_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.Identifier)
}

void StreamAccessLogsMessage_Identifier::SharedCtor() {
  log_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_ = NULL;
  _cached_size_ = 0;
}

StreamAccessLogsMessage_Identifier::~StreamAccessLogsMessage_Identifier() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.Identifier)
  SharedDtor();
}

void StreamAccessLogsMessage_Identifier::SharedDtor() {
  log_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete node_;
}

void StreamAccessLogsMessage_Identifier::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamAccessLogsMessage_Identifier::descriptor() {
  ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StreamAccessLogsMessage_Identifier& StreamAccessLogsMessage_Identifier::default_instance() {
  ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsStreamAccessLogsMessage_Identifier();
  return *internal_default_instance();
}

StreamAccessLogsMessage_Identifier* StreamAccessLogsMessage_Identifier::New(::google::protobuf::Arena* arena) const {
  StreamAccessLogsMessage_Identifier* n = new StreamAccessLogsMessage_Identifier;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StreamAccessLogsMessage_Identifier::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.Identifier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  log_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && node_ != NULL) {
    delete node_;
  }
  node_ = NULL;
  _internal_metadata_.Clear();
}

bool StreamAccessLogsMessage_Identifier::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.Identifier)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.Node node = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string log_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->log_name().data(), static_cast<int>(this->log_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.Identifier.log_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.Identifier)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.Identifier)
  return false;
#undef DO_
}

void StreamAccessLogsMessage_Identifier::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.Identifier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.Node node = 1;
  if (this->has_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->node_, output);
  }

  // string log_name = 2;
  if (this->log_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->log_name().data(), static_cast<int>(this->log_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.Identifier.log_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->log_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.Identifier)
}

::google::protobuf::uint8* StreamAccessLogsMessage_Identifier::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.Identifier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.Node node = 1;
  if (this->has_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->node_, deterministic, target);
  }

  // string log_name = 2;
  if (this->log_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->log_name().data(), static_cast<int>(this->log_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.Identifier.log_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->log_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.Identifier)
  return target;
}

size_t StreamAccessLogsMessage_Identifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.Identifier)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string log_name = 2;
  if (this->log_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->log_name());
  }

  // .envoy.api.v2.Node node = 1;
  if (this->has_node()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->node_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamAccessLogsMessage_Identifier::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.Identifier)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamAccessLogsMessage_Identifier* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamAccessLogsMessage_Identifier>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.Identifier)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.Identifier)
    MergeFrom(*source);
  }
}

void StreamAccessLogsMessage_Identifier::MergeFrom(const StreamAccessLogsMessage_Identifier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.Identifier)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.log_name().size() > 0) {

    log_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.log_name_);
  }
  if (from.has_node()) {
    mutable_node()->::envoy::api::v2::Node::MergeFrom(from.node());
  }
}

void StreamAccessLogsMessage_Identifier::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.Identifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamAccessLogsMessage_Identifier::CopyFrom(const StreamAccessLogsMessage_Identifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.Identifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamAccessLogsMessage_Identifier::IsInitialized() const {
  return true;
}

void StreamAccessLogsMessage_Identifier::Swap(StreamAccessLogsMessage_Identifier* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StreamAccessLogsMessage_Identifier::InternalSwap(StreamAccessLogsMessage_Identifier* other) {
  using std::swap;
  log_name_.Swap(&other->log_name_);
  swap(node_, other->node_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamAccessLogsMessage_Identifier::GetMetadata() const {
  protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StreamAccessLogsMessage_HTTPAccessLogEntries::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamAccessLogsMessage_HTTPAccessLogEntries::kLogEntryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamAccessLogsMessage_HTTPAccessLogEntries::StreamAccessLogsMessage_HTTPAccessLogEntries()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsStreamAccessLogsMessage_HTTPAccessLogEntries();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.HTTPAccessLogEntries)
}
StreamAccessLogsMessage_HTTPAccessLogEntries::StreamAccessLogsMessage_HTTPAccessLogEntries(const StreamAccessLogsMessage_HTTPAccessLogEntries& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      log_entry_(from.log_entry_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.HTTPAccessLogEntries)
}

void StreamAccessLogsMessage_HTTPAccessLogEntries::SharedCtor() {
  _cached_size_ = 0;
}

StreamAccessLogsMessage_HTTPAccessLogEntries::~StreamAccessLogsMessage_HTTPAccessLogEntries() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.HTTPAccessLogEntries)
  SharedDtor();
}

void StreamAccessLogsMessage_HTTPAccessLogEntries::SharedDtor() {
}

void StreamAccessLogsMessage_HTTPAccessLogEntries::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamAccessLogsMessage_HTTPAccessLogEntries::descriptor() {
  ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StreamAccessLogsMessage_HTTPAccessLogEntries& StreamAccessLogsMessage_HTTPAccessLogEntries::default_instance() {
  ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsStreamAccessLogsMessage_HTTPAccessLogEntries();
  return *internal_default_instance();
}

StreamAccessLogsMessage_HTTPAccessLogEntries* StreamAccessLogsMessage_HTTPAccessLogEntries::New(::google::protobuf::Arena* arena) const {
  StreamAccessLogsMessage_HTTPAccessLogEntries* n = new StreamAccessLogsMessage_HTTPAccessLogEntries;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StreamAccessLogsMessage_HTTPAccessLogEntries::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.HTTPAccessLogEntries)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  log_entry_.Clear();
  _internal_metadata_.Clear();
}

bool StreamAccessLogsMessage_HTTPAccessLogEntries::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.HTTPAccessLogEntries)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .envoy.api.v2.filter.accesslog.HTTPAccessLogEntry log_entry = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_log_entry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.HTTPAccessLogEntries)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.HTTPAccessLogEntries)
  return false;
#undef DO_
}

void StreamAccessLogsMessage_HTTPAccessLogEntries::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.HTTPAccessLogEntries)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .envoy.api.v2.filter.accesslog.HTTPAccessLogEntry log_entry = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->log_entry_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->log_entry(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.HTTPAccessLogEntries)
}

::google::protobuf::uint8* StreamAccessLogsMessage_HTTPAccessLogEntries::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.HTTPAccessLogEntries)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .envoy.api.v2.filter.accesslog.HTTPAccessLogEntry log_entry = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->log_entry_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->log_entry(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.HTTPAccessLogEntries)
  return target;
}

size_t StreamAccessLogsMessage_HTTPAccessLogEntries::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.HTTPAccessLogEntries)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .envoy.api.v2.filter.accesslog.HTTPAccessLogEntry log_entry = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->log_entry_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->log_entry(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamAccessLogsMessage_HTTPAccessLogEntries::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.HTTPAccessLogEntries)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamAccessLogsMessage_HTTPAccessLogEntries* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamAccessLogsMessage_HTTPAccessLogEntries>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.HTTPAccessLogEntries)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.HTTPAccessLogEntries)
    MergeFrom(*source);
  }
}

void StreamAccessLogsMessage_HTTPAccessLogEntries::MergeFrom(const StreamAccessLogsMessage_HTTPAccessLogEntries& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.HTTPAccessLogEntries)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  log_entry_.MergeFrom(from.log_entry_);
}

void StreamAccessLogsMessage_HTTPAccessLogEntries::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.HTTPAccessLogEntries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamAccessLogsMessage_HTTPAccessLogEntries::CopyFrom(const StreamAccessLogsMessage_HTTPAccessLogEntries& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.HTTPAccessLogEntries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamAccessLogsMessage_HTTPAccessLogEntries::IsInitialized() const {
  return true;
}

void StreamAccessLogsMessage_HTTPAccessLogEntries::Swap(StreamAccessLogsMessage_HTTPAccessLogEntries* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StreamAccessLogsMessage_HTTPAccessLogEntries::InternalSwap(StreamAccessLogsMessage_HTTPAccessLogEntries* other) {
  using std::swap;
  log_entry_.InternalSwap(&other->log_entry_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamAccessLogsMessage_HTTPAccessLogEntries::GetMetadata() const {
  protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StreamAccessLogsMessage_TCPAccessLogEntries::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamAccessLogsMessage_TCPAccessLogEntries::kLogEntryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamAccessLogsMessage_TCPAccessLogEntries::StreamAccessLogsMessage_TCPAccessLogEntries()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsStreamAccessLogsMessage_TCPAccessLogEntries();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.TCPAccessLogEntries)
}
StreamAccessLogsMessage_TCPAccessLogEntries::StreamAccessLogsMessage_TCPAccessLogEntries(const StreamAccessLogsMessage_TCPAccessLogEntries& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      log_entry_(from.log_entry_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.TCPAccessLogEntries)
}

void StreamAccessLogsMessage_TCPAccessLogEntries::SharedCtor() {
  _cached_size_ = 0;
}

StreamAccessLogsMessage_TCPAccessLogEntries::~StreamAccessLogsMessage_TCPAccessLogEntries() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.TCPAccessLogEntries)
  SharedDtor();
}

void StreamAccessLogsMessage_TCPAccessLogEntries::SharedDtor() {
}

void StreamAccessLogsMessage_TCPAccessLogEntries::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamAccessLogsMessage_TCPAccessLogEntries::descriptor() {
  ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StreamAccessLogsMessage_TCPAccessLogEntries& StreamAccessLogsMessage_TCPAccessLogEntries::default_instance() {
  ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsStreamAccessLogsMessage_TCPAccessLogEntries();
  return *internal_default_instance();
}

StreamAccessLogsMessage_TCPAccessLogEntries* StreamAccessLogsMessage_TCPAccessLogEntries::New(::google::protobuf::Arena* arena) const {
  StreamAccessLogsMessage_TCPAccessLogEntries* n = new StreamAccessLogsMessage_TCPAccessLogEntries;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StreamAccessLogsMessage_TCPAccessLogEntries::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.TCPAccessLogEntries)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  log_entry_.Clear();
  _internal_metadata_.Clear();
}

bool StreamAccessLogsMessage_TCPAccessLogEntries::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.TCPAccessLogEntries)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .envoy.api.v2.filter.accesslog.TCPAccessLogEntry log_entry = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_log_entry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.TCPAccessLogEntries)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.TCPAccessLogEntries)
  return false;
#undef DO_
}

void StreamAccessLogsMessage_TCPAccessLogEntries::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.TCPAccessLogEntries)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .envoy.api.v2.filter.accesslog.TCPAccessLogEntry log_entry = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->log_entry_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->log_entry(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.TCPAccessLogEntries)
}

::google::protobuf::uint8* StreamAccessLogsMessage_TCPAccessLogEntries::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.TCPAccessLogEntries)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .envoy.api.v2.filter.accesslog.TCPAccessLogEntry log_entry = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->log_entry_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->log_entry(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.TCPAccessLogEntries)
  return target;
}

size_t StreamAccessLogsMessage_TCPAccessLogEntries::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.TCPAccessLogEntries)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .envoy.api.v2.filter.accesslog.TCPAccessLogEntry log_entry = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->log_entry_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->log_entry(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamAccessLogsMessage_TCPAccessLogEntries::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.TCPAccessLogEntries)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamAccessLogsMessage_TCPAccessLogEntries* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamAccessLogsMessage_TCPAccessLogEntries>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.TCPAccessLogEntries)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.TCPAccessLogEntries)
    MergeFrom(*source);
  }
}

void StreamAccessLogsMessage_TCPAccessLogEntries::MergeFrom(const StreamAccessLogsMessage_TCPAccessLogEntries& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.TCPAccessLogEntries)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  log_entry_.MergeFrom(from.log_entry_);
}

void StreamAccessLogsMessage_TCPAccessLogEntries::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.TCPAccessLogEntries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamAccessLogsMessage_TCPAccessLogEntries::CopyFrom(const StreamAccessLogsMessage_TCPAccessLogEntries& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.TCPAccessLogEntries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamAccessLogsMessage_TCPAccessLogEntries::IsInitialized() const {
  return true;
}

void StreamAccessLogsMessage_TCPAccessLogEntries::Swap(StreamAccessLogsMessage_TCPAccessLogEntries* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StreamAccessLogsMessage_TCPAccessLogEntries::InternalSwap(StreamAccessLogsMessage_TCPAccessLogEntries* other) {
  using std::swap;
  log_entry_.InternalSwap(&other->log_entry_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamAccessLogsMessage_TCPAccessLogEntries::GetMetadata() const {
  protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StreamAccessLogsMessage::InitAsDefaultInstance() {
  ::envoy::api::v2::filter::accesslog::_StreamAccessLogsMessage_default_instance_._instance.get_mutable()->identifier_ = const_cast< ::envoy::api::v2::filter::accesslog::StreamAccessLogsMessage_Identifier*>(
      ::envoy::api::v2::filter::accesslog::StreamAccessLogsMessage_Identifier::internal_default_instance());
  ::envoy::api::v2::filter::accesslog::_StreamAccessLogsMessage_default_instance_.http_logs_ = const_cast< ::envoy::api::v2::filter::accesslog::StreamAccessLogsMessage_HTTPAccessLogEntries*>(
      ::envoy::api::v2::filter::accesslog::StreamAccessLogsMessage_HTTPAccessLogEntries::internal_default_instance());
  ::envoy::api::v2::filter::accesslog::_StreamAccessLogsMessage_default_instance_.tcp_logs_ = const_cast< ::envoy::api::v2::filter::accesslog::StreamAccessLogsMessage_TCPAccessLogEntries*>(
      ::envoy::api::v2::filter::accesslog::StreamAccessLogsMessage_TCPAccessLogEntries::internal_default_instance());
}
void StreamAccessLogsMessage::set_allocated_http_logs(::envoy::api::v2::filter::accesslog::StreamAccessLogsMessage_HTTPAccessLogEntries* http_logs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_log_entries();
  if (http_logs) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      http_logs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, http_logs, submessage_arena);
    }
    set_has_http_logs();
    log_entries_.http_logs_ = http_logs;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.http_logs)
}
void StreamAccessLogsMessage::set_allocated_tcp_logs(::envoy::api::v2::filter::accesslog::StreamAccessLogsMessage_TCPAccessLogEntries* tcp_logs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_log_entries();
  if (tcp_logs) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tcp_logs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tcp_logs, submessage_arena);
    }
    set_has_tcp_logs();
    log_entries_.tcp_logs_ = tcp_logs;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.tcp_logs)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamAccessLogsMessage::kIdentifierFieldNumber;
const int StreamAccessLogsMessage::kHttpLogsFieldNumber;
const int StreamAccessLogsMessage::kTcpLogsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamAccessLogsMessage::StreamAccessLogsMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsStreamAccessLogsMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage)
}
StreamAccessLogsMessage::StreamAccessLogsMessage(const StreamAccessLogsMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_identifier()) {
    identifier_ = new ::envoy::api::v2::filter::accesslog::StreamAccessLogsMessage_Identifier(*from.identifier_);
  } else {
    identifier_ = NULL;
  }
  clear_has_log_entries();
  switch (from.log_entries_case()) {
    case kHttpLogs: {
      mutable_http_logs()->::envoy::api::v2::filter::accesslog::StreamAccessLogsMessage_HTTPAccessLogEntries::MergeFrom(from.http_logs());
      break;
    }
    case kTcpLogs: {
      mutable_tcp_logs()->::envoy::api::v2::filter::accesslog::StreamAccessLogsMessage_TCPAccessLogEntries::MergeFrom(from.tcp_logs());
      break;
    }
    case LOG_ENTRIES_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage)
}

void StreamAccessLogsMessage::SharedCtor() {
  identifier_ = NULL;
  clear_has_log_entries();
  _cached_size_ = 0;
}

StreamAccessLogsMessage::~StreamAccessLogsMessage() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage)
  SharedDtor();
}

void StreamAccessLogsMessage::SharedDtor() {
  if (this != internal_default_instance()) delete identifier_;
  if (has_log_entries()) {
    clear_log_entries();
  }
}

void StreamAccessLogsMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamAccessLogsMessage::descriptor() {
  ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StreamAccessLogsMessage& StreamAccessLogsMessage::default_instance() {
  ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsStreamAccessLogsMessage();
  return *internal_default_instance();
}

StreamAccessLogsMessage* StreamAccessLogsMessage::New(::google::protobuf::Arena* arena) const {
  StreamAccessLogsMessage* n = new StreamAccessLogsMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StreamAccessLogsMessage::clear_log_entries() {
// @@protoc_insertion_point(one_of_clear_start:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage)
  switch (log_entries_case()) {
    case kHttpLogs: {
      delete log_entries_.http_logs_;
      break;
    }
    case kTcpLogs: {
      delete log_entries_.tcp_logs_;
      break;
    }
    case LOG_ENTRIES_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LOG_ENTRIES_NOT_SET;
}


void StreamAccessLogsMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && identifier_ != NULL) {
    delete identifier_;
  }
  identifier_ = NULL;
  clear_log_entries();
  _internal_metadata_.Clear();
}

bool StreamAccessLogsMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.Identifier identifier = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_identifier()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.HTTPAccessLogEntries http_logs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_http_logs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.TCPAccessLogEntries tcp_logs = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tcp_logs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage)
  return false;
#undef DO_
}

void StreamAccessLogsMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.Identifier identifier = 1;
  if (this->has_identifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->identifier_, output);
  }

  // .envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.HTTPAccessLogEntries http_logs = 2;
  if (has_http_logs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *log_entries_.http_logs_, output);
  }

  // .envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.TCPAccessLogEntries tcp_logs = 3;
  if (has_tcp_logs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *log_entries_.tcp_logs_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage)
}

::google::protobuf::uint8* StreamAccessLogsMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.Identifier identifier = 1;
  if (this->has_identifier()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->identifier_, deterministic, target);
  }

  // .envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.HTTPAccessLogEntries http_logs = 2;
  if (has_http_logs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *log_entries_.http_logs_, deterministic, target);
  }

  // .envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.TCPAccessLogEntries tcp_logs = 3;
  if (has_tcp_logs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *log_entries_.tcp_logs_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage)
  return target;
}

size_t StreamAccessLogsMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.Identifier identifier = 1;
  if (this->has_identifier()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->identifier_);
  }

  switch (log_entries_case()) {
    // .envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.HTTPAccessLogEntries http_logs = 2;
    case kHttpLogs: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *log_entries_.http_logs_);
      break;
    }
    // .envoy.api.v2.filter.accesslog.StreamAccessLogsMessage.TCPAccessLogEntries tcp_logs = 3;
    case kTcpLogs: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *log_entries_.tcp_logs_);
      break;
    }
    case LOG_ENTRIES_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamAccessLogsMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamAccessLogsMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamAccessLogsMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage)
    MergeFrom(*source);
  }
}

void StreamAccessLogsMessage::MergeFrom(const StreamAccessLogsMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_identifier()) {
    mutable_identifier()->::envoy::api::v2::filter::accesslog::StreamAccessLogsMessage_Identifier::MergeFrom(from.identifier());
  }
  switch (from.log_entries_case()) {
    case kHttpLogs: {
      mutable_http_logs()->::envoy::api::v2::filter::accesslog::StreamAccessLogsMessage_HTTPAccessLogEntries::MergeFrom(from.http_logs());
      break;
    }
    case kTcpLogs: {
      mutable_tcp_logs()->::envoy::api::v2::filter::accesslog::StreamAccessLogsMessage_TCPAccessLogEntries::MergeFrom(from.tcp_logs());
      break;
    }
    case LOG_ENTRIES_NOT_SET: {
      break;
    }
  }
}

void StreamAccessLogsMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamAccessLogsMessage::CopyFrom(const StreamAccessLogsMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.accesslog.StreamAccessLogsMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamAccessLogsMessage::IsInitialized() const {
  return true;
}

void StreamAccessLogsMessage::Swap(StreamAccessLogsMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StreamAccessLogsMessage::InternalSwap(StreamAccessLogsMessage* other) {
  using std::swap;
  swap(identifier_, other->identifier_);
  swap(log_entries_, other->log_entries_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamAccessLogsMessage::GetMetadata() const {
  protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StreamAccessLogsResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamAccessLogsResponse::StreamAccessLogsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsStreamAccessLogsResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.accesslog.StreamAccessLogsResponse)
}
StreamAccessLogsResponse::StreamAccessLogsResponse(const StreamAccessLogsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.accesslog.StreamAccessLogsResponse)
}

void StreamAccessLogsResponse::SharedCtor() {
  _cached_size_ = 0;
}

StreamAccessLogsResponse::~StreamAccessLogsResponse() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.accesslog.StreamAccessLogsResponse)
  SharedDtor();
}

void StreamAccessLogsResponse::SharedDtor() {
}

void StreamAccessLogsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamAccessLogsResponse::descriptor() {
  ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StreamAccessLogsResponse& StreamAccessLogsResponse::default_instance() {
  ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsStreamAccessLogsResponse();
  return *internal_default_instance();
}

StreamAccessLogsResponse* StreamAccessLogsResponse::New(::google::protobuf::Arena* arena) const {
  StreamAccessLogsResponse* n = new StreamAccessLogsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StreamAccessLogsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.accesslog.StreamAccessLogsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool StreamAccessLogsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.accesslog.StreamAccessLogsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.accesslog.StreamAccessLogsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.accesslog.StreamAccessLogsResponse)
  return false;
#undef DO_
}

void StreamAccessLogsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.accesslog.StreamAccessLogsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.accesslog.StreamAccessLogsResponse)
}

::google::protobuf::uint8* StreamAccessLogsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.accesslog.StreamAccessLogsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.accesslog.StreamAccessLogsResponse)
  return target;
}

size_t StreamAccessLogsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.accesslog.StreamAccessLogsResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamAccessLogsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.accesslog.StreamAccessLogsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamAccessLogsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamAccessLogsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.accesslog.StreamAccessLogsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.accesslog.StreamAccessLogsResponse)
    MergeFrom(*source);
  }
}

void StreamAccessLogsResponse::MergeFrom(const StreamAccessLogsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.accesslog.StreamAccessLogsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void StreamAccessLogsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.accesslog.StreamAccessLogsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamAccessLogsResponse::CopyFrom(const StreamAccessLogsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.accesslog.StreamAccessLogsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamAccessLogsResponse::IsInitialized() const {
  return true;
}

void StreamAccessLogsResponse::Swap(StreamAccessLogsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StreamAccessLogsResponse::InternalSwap(StreamAccessLogsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamAccessLogsResponse::GetMetadata() const {
  protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AccessLog::InitAsDefaultInstance() {
  ::envoy::api::v2::filter::accesslog::_AccessLog_default_instance_._instance.get_mutable()->filter_ = const_cast< ::envoy::api::v2::filter::accesslog::AccessLogFilter*>(
      ::envoy::api::v2::filter::accesslog::AccessLogFilter::internal_default_instance());
  ::envoy::api::v2::filter::accesslog::_AccessLog_default_instance_._instance.get_mutable()->config_ = const_cast< ::google::protobuf::Struct*>(
      ::google::protobuf::Struct::internal_default_instance());
}
void AccessLog::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccessLog::kNameFieldNumber;
const int AccessLog::kFilterFieldNumber;
const int AccessLog::kConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccessLog::AccessLog()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsAccessLog();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.accesslog.AccessLog)
}
AccessLog::AccessLog(const AccessLog& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_filter()) {
    filter_ = new ::envoy::api::v2::filter::accesslog::AccessLogFilter(*from.filter_);
  } else {
    filter_ = NULL;
  }
  if (from.has_config()) {
    config_ = new ::google::protobuf::Struct(*from.config_);
  } else {
    config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.accesslog.AccessLog)
}

void AccessLog::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&filter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&config_) -
      reinterpret_cast<char*>(&filter_)) + sizeof(config_));
  _cached_size_ = 0;
}

AccessLog::~AccessLog() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.accesslog.AccessLog)
  SharedDtor();
}

void AccessLog::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete filter_;
  if (this != internal_default_instance()) delete config_;
}

void AccessLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccessLog::descriptor() {
  ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccessLog& AccessLog::default_instance() {
  ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::InitDefaultsAccessLog();
  return *internal_default_instance();
}

AccessLog* AccessLog::New(::google::protobuf::Arena* arena) const {
  AccessLog* n = new AccessLog;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AccessLog::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.accesslog.AccessLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && filter_ != NULL) {
    delete filter_;
  }
  filter_ = NULL;
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  _internal_metadata_.Clear();
}

bool AccessLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.accesslog.AccessLog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.filter.accesslog.AccessLog.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.filter.accesslog.AccessLogFilter filter = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Struct config = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.accesslog.AccessLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.accesslog.AccessLog)
  return false;
#undef DO_
}

void AccessLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.accesslog.AccessLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.accesslog.AccessLog.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .envoy.api.v2.filter.accesslog.AccessLogFilter filter = 2;
  if (this->has_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->filter_, output);
  }

  // .google.protobuf.Struct config = 3;
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->config_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.accesslog.AccessLog)
}

::google::protobuf::uint8* AccessLog::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.accesslog.AccessLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.accesslog.AccessLog.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .envoy.api.v2.filter.accesslog.AccessLogFilter filter = 2;
  if (this->has_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->filter_, deterministic, target);
  }

  // .google.protobuf.Struct config = 3;
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->config_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.accesslog.AccessLog)
  return target;
}

size_t AccessLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.accesslog.AccessLog)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .envoy.api.v2.filter.accesslog.AccessLogFilter filter = 2;
  if (this->has_filter()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->filter_);
  }

  // .google.protobuf.Struct config = 3;
  if (this->has_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccessLog::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.accesslog.AccessLog)
  GOOGLE_DCHECK_NE(&from, this);
  const AccessLog* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccessLog>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.accesslog.AccessLog)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.accesslog.AccessLog)
    MergeFrom(*source);
  }
}

void AccessLog::MergeFrom(const AccessLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.accesslog.AccessLog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_filter()) {
    mutable_filter()->::envoy::api::v2::filter::accesslog::AccessLogFilter::MergeFrom(from.filter());
  }
  if (from.has_config()) {
    mutable_config()->::google::protobuf::Struct::MergeFrom(from.config());
  }
}

void AccessLog::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.accesslog.AccessLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccessLog::CopyFrom(const AccessLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.accesslog.AccessLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccessLog::IsInitialized() const {
  return true;
}

void AccessLog::Swap(AccessLog* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccessLog::InternalSwap(AccessLog* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(filter_, other->filter_);
  swap(config_, other->config_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AccessLog::GetMetadata() const {
  protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace accesslog
}  // namespace filter
}  // namespace v2
}  // namespace api
}  // namespace envoy

// @@protoc_insertion_point(global_scope)
