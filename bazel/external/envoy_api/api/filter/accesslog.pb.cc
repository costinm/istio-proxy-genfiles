// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/filter/accesslog.proto

#include "api/filter/accesslog.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace envoy {
namespace api {
namespace v2 {
namespace filter {
class ComparisonFilterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ComparisonFilter>
      _instance;
} _ComparisonFilter_default_instance_;
class StatusCodeFilterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StatusCodeFilter>
      _instance;
} _StatusCodeFilter_default_instance_;
class DurationFilterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DurationFilter>
      _instance;
} _DurationFilter_default_instance_;
class NotHealthCheckFilterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NotHealthCheckFilter>
      _instance;
} _NotHealthCheckFilter_default_instance_;
class TraceableFilterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TraceableFilter>
      _instance;
} _TraceableFilter_default_instance_;
class RuntimeFilterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RuntimeFilter>
      _instance;
} _RuntimeFilter_default_instance_;
class AndFilterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AndFilter>
      _instance;
} _AndFilter_default_instance_;
class OrFilterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OrFilter>
      _instance;
} _OrFilter_default_instance_;
class AccessLogFilterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AccessLogFilter>
      _instance;
  const ::envoy::api::v2::filter::StatusCodeFilter* status_code_filter_;
  const ::envoy::api::v2::filter::DurationFilter* duration_filter_;
  const ::envoy::api::v2::filter::NotHealthCheckFilter* not_health_check_filter_;
  const ::envoy::api::v2::filter::TraceableFilter* traceable_filter_;
  const ::envoy::api::v2::filter::RuntimeFilter* runtime_filter_;
  const ::envoy::api::v2::filter::AndFilter* and_filter_;
  const ::envoy::api::v2::filter::OrFilter* or_filter_;
} _AccessLogFilter_default_instance_;
class FileAccessLogDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FileAccessLog>
      _instance;
} _FileAccessLog_default_instance_;
class AccessLogDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AccessLog>
      _instance;
} _AccessLog_default_instance_;
}  // namespace filter
}  // namespace v2
}  // namespace api
}  // namespace envoy
namespace protobuf_api_2ffilter_2faccesslog_2eproto {
void InitDefaultsComparisonFilterImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_api_2fbase_2eproto::InitDefaultsRuntimeUInt32();
  {
    void* ptr = &::envoy::api::v2::filter::_ComparisonFilter_default_instance_;
    new (ptr) ::envoy::api::v2::filter::ComparisonFilter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::filter::ComparisonFilter::InitAsDefaultInstance();
}

void InitDefaultsComparisonFilter() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsComparisonFilterImpl);
}

void InitDefaultsStatusCodeFilterImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_api_2ffilter_2faccesslog_2eproto::InitDefaultsComparisonFilter();
  {
    void* ptr = &::envoy::api::v2::filter::_StatusCodeFilter_default_instance_;
    new (ptr) ::envoy::api::v2::filter::StatusCodeFilter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::filter::StatusCodeFilter::InitAsDefaultInstance();
}

void InitDefaultsStatusCodeFilter() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStatusCodeFilterImpl);
}

void InitDefaultsDurationFilterImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_api_2ffilter_2faccesslog_2eproto::InitDefaultsComparisonFilter();
  {
    void* ptr = &::envoy::api::v2::filter::_DurationFilter_default_instance_;
    new (ptr) ::envoy::api::v2::filter::DurationFilter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::filter::DurationFilter::InitAsDefaultInstance();
}

void InitDefaultsDurationFilter() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDurationFilterImpl);
}

void InitDefaultsNotHealthCheckFilterImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::envoy::api::v2::filter::_NotHealthCheckFilter_default_instance_;
    new (ptr) ::envoy::api::v2::filter::NotHealthCheckFilter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::filter::NotHealthCheckFilter::InitAsDefaultInstance();
}

void InitDefaultsNotHealthCheckFilter() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsNotHealthCheckFilterImpl);
}

void InitDefaultsTraceableFilterImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::envoy::api::v2::filter::_TraceableFilter_default_instance_;
    new (ptr) ::envoy::api::v2::filter::TraceableFilter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::filter::TraceableFilter::InitAsDefaultInstance();
}

void InitDefaultsTraceableFilter() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTraceableFilterImpl);
}

void InitDefaultsRuntimeFilterImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::envoy::api::v2::filter::_RuntimeFilter_default_instance_;
    new (ptr) ::envoy::api::v2::filter::RuntimeFilter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::filter::RuntimeFilter::InitAsDefaultInstance();
}

void InitDefaultsRuntimeFilter() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRuntimeFilterImpl);
}

void InitDefaultsAccessLogFilterImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_api_2ffilter_2faccesslog_2eproto::InitDefaultsStatusCodeFilter();
  protobuf_api_2ffilter_2faccesslog_2eproto::InitDefaultsDurationFilter();
  protobuf_api_2ffilter_2faccesslog_2eproto::InitDefaultsNotHealthCheckFilter();
  protobuf_api_2ffilter_2faccesslog_2eproto::InitDefaultsTraceableFilter();
  protobuf_api_2ffilter_2faccesslog_2eproto::InitDefaultsRuntimeFilter();
  {
    void* ptr = &::envoy::api::v2::filter::_AndFilter_default_instance_;
    new (ptr) ::envoy::api::v2::filter::AndFilter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::envoy::api::v2::filter::_OrFilter_default_instance_;
    new (ptr) ::envoy::api::v2::filter::OrFilter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::envoy::api::v2::filter::_AccessLogFilter_default_instance_;
    new (ptr) ::envoy::api::v2::filter::AccessLogFilter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::filter::AndFilter::InitAsDefaultInstance();
  ::envoy::api::v2::filter::OrFilter::InitAsDefaultInstance();
  ::envoy::api::v2::filter::AccessLogFilter::InitAsDefaultInstance();
}

void InitDefaultsAccessLogFilter() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAccessLogFilterImpl);
}

void InitDefaultsFileAccessLogImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::envoy::api::v2::filter::_FileAccessLog_default_instance_;
    new (ptr) ::envoy::api::v2::filter::FileAccessLog();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::filter::FileAccessLog::InitAsDefaultInstance();
}

void InitDefaultsFileAccessLog() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFileAccessLogImpl);
}

void InitDefaultsAccessLogImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_api_2ffilter_2faccesslog_2eproto::InitDefaultsAccessLogFilter();
  protobuf_google_2fprotobuf_2fstruct_2eproto::InitDefaultsListValue();
  {
    void* ptr = &::envoy::api::v2::filter::_AccessLog_default_instance_;
    new (ptr) ::envoy::api::v2::filter::AccessLog();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::filter::AccessLog::InitAsDefaultInstance();
}

void InitDefaultsAccessLog() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAccessLogImpl);
}

::google::protobuf::Metadata file_level_metadata[11];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::ComparisonFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::ComparisonFilter, op_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::ComparisonFilter, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::StatusCodeFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::StatusCodeFilter, comparison_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::DurationFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::DurationFilter, comparison_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::NotHealthCheckFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::TraceableFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::RuntimeFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::RuntimeFilter, runtime_key_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::AndFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::AndFilter, filters_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::OrFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::OrFilter, filters_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::AccessLogFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::AccessLogFilter, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::envoy::api::v2::filter::AccessLogFilterDefaultTypeInternal, status_code_filter_),
  offsetof(::envoy::api::v2::filter::AccessLogFilterDefaultTypeInternal, duration_filter_),
  offsetof(::envoy::api::v2::filter::AccessLogFilterDefaultTypeInternal, not_health_check_filter_),
  offsetof(::envoy::api::v2::filter::AccessLogFilterDefaultTypeInternal, traceable_filter_),
  offsetof(::envoy::api::v2::filter::AccessLogFilterDefaultTypeInternal, runtime_filter_),
  offsetof(::envoy::api::v2::filter::AccessLogFilterDefaultTypeInternal, and_filter_),
  offsetof(::envoy::api::v2::filter::AccessLogFilterDefaultTypeInternal, or_filter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::AccessLogFilter, filter_specifier_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::FileAccessLog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::FileAccessLog, path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::FileAccessLog, format_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::AccessLog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::AccessLog, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::AccessLog, filter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::AccessLog, config_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::envoy::api::v2::filter::ComparisonFilter)},
  { 7, -1, sizeof(::envoy::api::v2::filter::StatusCodeFilter)},
  { 13, -1, sizeof(::envoy::api::v2::filter::DurationFilter)},
  { 19, -1, sizeof(::envoy::api::v2::filter::NotHealthCheckFilter)},
  { 24, -1, sizeof(::envoy::api::v2::filter::TraceableFilter)},
  { 29, -1, sizeof(::envoy::api::v2::filter::RuntimeFilter)},
  { 35, -1, sizeof(::envoy::api::v2::filter::AndFilter)},
  { 41, -1, sizeof(::envoy::api::v2::filter::OrFilter)},
  { 47, -1, sizeof(::envoy::api::v2::filter::AccessLogFilter)},
  { 60, -1, sizeof(::envoy::api::v2::filter::FileAccessLog)},
  { 67, -1, sizeof(::envoy::api::v2::filter::AccessLog)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::filter::_ComparisonFilter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::filter::_StatusCodeFilter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::filter::_DurationFilter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::filter::_NotHealthCheckFilter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::filter::_TraceableFilter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::filter::_RuntimeFilter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::filter::_AndFilter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::filter::_OrFilter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::filter::_AccessLogFilter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::filter::_FileAccessLog_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::filter::_AccessLog_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "api/filter/accesslog.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 11);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\032api/filter/accesslog.proto\022\023envoy.api."
      "v2.filter\032\016api/base.proto\032\034google/protob"
      "uf/struct.proto\"\212\001\n\020ComparisonFilter\0224\n\002"
      "op\030\001 \001(\0162(.envoy.api.v2.filter.Compariso"
      "nFilter.Op\022*\n\005value\030\002 \001(\0132\033.envoy.api.v2"
      ".RuntimeUInt32\"\024\n\002Op\022\006\n\002EQ\020\000\022\006\n\002GE\020\001\"M\n\020"
      "StatusCodeFilter\0229\n\ncomparison\030\001 \001(\0132%.e"
      "nvoy.api.v2.filter.ComparisonFilter\"K\n\016D"
      "urationFilter\0229\n\ncomparison\030\001 \001(\0132%.envo"
      "y.api.v2.filter.ComparisonFilter\"\026\n\024NotH"
      "ealthCheckFilter\"\021\n\017TraceableFilter\"$\n\rR"
      "untimeFilter\022\023\n\013runtime_key\030\001 \001(\t\"B\n\tAnd"
      "Filter\0225\n\007filters\030\001 \003(\0132$.envoy.api.v2.f"
      "ilter.AccessLogFilter\"A\n\010OrFilter\0225\n\007fil"
      "ters\030\002 \003(\0132$.envoy.api.v2.filter.AccessL"
      "ogFilter\"\342\003\n\017AccessLogFilter\022C\n\022status_c"
      "ode_filter\030\001 \001(\0132%.envoy.api.v2.filter.S"
      "tatusCodeFilterH\000\022>\n\017duration_filter\030\002 \001"
      "(\0132#.envoy.api.v2.filter.DurationFilterH"
      "\000\022L\n\027not_health_check_filter\030\003 \001(\0132).env"
      "oy.api.v2.filter.NotHealthCheckFilterH\000\022"
      "@\n\020traceable_filter\030\004 \001(\0132$.envoy.api.v2"
      ".filter.TraceableFilterH\000\022<\n\016runtime_fil"
      "ter\030\005 \001(\0132\".envoy.api.v2.filter.RuntimeF"
      "ilterH\000\0224\n\nand_filter\030\006 \001(\0132\036.envoy.api."
      "v2.filter.AndFilterH\000\0222\n\tor_filter\030\007 \001(\013"
      "2\035.envoy.api.v2.filter.OrFilterH\000B\022\n\020fil"
      "ter_specifier\"-\n\rFileAccessLog\022\014\n\004path\030\001"
      " \001(\t\022\016\n\006format\030\002 \001(\t\"x\n\tAccessLog\022\014\n\004nam"
      "e\030\001 \001(\t\0224\n\006filter\030\002 \001(\0132$.envoy.api.v2.f"
      "ilter.AccessLogFilter\022\'\n\006config\030\003 \001(\0132\027."
      "google.protobuf.Structb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1270);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "api/filter/accesslog.proto", &protobuf_RegisterTypes);
  ::protobuf_api_2fbase_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2fstruct_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_api_2ffilter_2faccesslog_2eproto
namespace envoy {
namespace api {
namespace v2 {
namespace filter {
const ::google::protobuf::EnumDescriptor* ComparisonFilter_Op_descriptor() {
  protobuf_api_2ffilter_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2faccesslog_2eproto::file_level_enum_descriptors[0];
}
bool ComparisonFilter_Op_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ComparisonFilter_Op ComparisonFilter::EQ;
const ComparisonFilter_Op ComparisonFilter::GE;
const ComparisonFilter_Op ComparisonFilter::Op_MIN;
const ComparisonFilter_Op ComparisonFilter::Op_MAX;
const int ComparisonFilter::Op_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void ComparisonFilter::InitAsDefaultInstance() {
  ::envoy::api::v2::filter::_ComparisonFilter_default_instance_._instance.get_mutable()->value_ = const_cast< ::envoy::api::v2::RuntimeUInt32*>(
      ::envoy::api::v2::RuntimeUInt32::internal_default_instance());
}
void ComparisonFilter::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ComparisonFilter::kOpFieldNumber;
const int ComparisonFilter::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ComparisonFilter::ComparisonFilter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2ffilter_2faccesslog_2eproto::InitDefaultsComparisonFilter();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.ComparisonFilter)
}
ComparisonFilter::ComparisonFilter(const ComparisonFilter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_value()) {
    value_ = new ::envoy::api::v2::RuntimeUInt32(*from.value_);
  } else {
    value_ = NULL;
  }
  op_ = from.op_;
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.ComparisonFilter)
}

void ComparisonFilter::SharedCtor() {
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&op_) -
      reinterpret_cast<char*>(&value_)) + sizeof(op_));
  _cached_size_ = 0;
}

ComparisonFilter::~ComparisonFilter() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.ComparisonFilter)
  SharedDtor();
}

void ComparisonFilter::SharedDtor() {
  if (this != internal_default_instance()) delete value_;
}

void ComparisonFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComparisonFilter::descriptor() {
  ::protobuf_api_2ffilter_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ComparisonFilter& ComparisonFilter::default_instance() {
  ::protobuf_api_2ffilter_2faccesslog_2eproto::InitDefaultsComparisonFilter();
  return *internal_default_instance();
}

ComparisonFilter* ComparisonFilter::New(::google::protobuf::Arena* arena) const {
  ComparisonFilter* n = new ComparisonFilter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ComparisonFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.ComparisonFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
  op_ = 0;
  _internal_metadata_.Clear();
}

bool ComparisonFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.ComparisonFilter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.filter.ComparisonFilter.Op op = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_op(static_cast< ::envoy::api::v2::filter::ComparisonFilter_Op >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.RuntimeUInt32 value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.ComparisonFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.ComparisonFilter)
  return false;
#undef DO_
}

void ComparisonFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.ComparisonFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.filter.ComparisonFilter.Op op = 1;
  if (this->op() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->op(), output);
  }

  // .envoy.api.v2.RuntimeUInt32 value = 2;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->value_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.ComparisonFilter)
}

::google::protobuf::uint8* ComparisonFilter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.ComparisonFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.filter.ComparisonFilter.Op op = 1;
  if (this->op() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->op(), target);
  }

  // .envoy.api.v2.RuntimeUInt32 value = 2;
  if (this->has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->value_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.ComparisonFilter)
  return target;
}

size_t ComparisonFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.ComparisonFilter)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .envoy.api.v2.RuntimeUInt32 value = 2;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->value_);
  }

  // .envoy.api.v2.filter.ComparisonFilter.Op op = 1;
  if (this->op() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->op());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComparisonFilter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.ComparisonFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const ComparisonFilter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ComparisonFilter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.ComparisonFilter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.ComparisonFilter)
    MergeFrom(*source);
  }
}

void ComparisonFilter::MergeFrom(const ComparisonFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.ComparisonFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_value()) {
    mutable_value()->::envoy::api::v2::RuntimeUInt32::MergeFrom(from.value());
  }
  if (from.op() != 0) {
    set_op(from.op());
  }
}

void ComparisonFilter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.ComparisonFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComparisonFilter::CopyFrom(const ComparisonFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.ComparisonFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComparisonFilter::IsInitialized() const {
  return true;
}

void ComparisonFilter::Swap(ComparisonFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ComparisonFilter::InternalSwap(ComparisonFilter* other) {
  using std::swap;
  swap(value_, other->value_);
  swap(op_, other->op_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ComparisonFilter::GetMetadata() const {
  protobuf_api_2ffilter_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StatusCodeFilter::InitAsDefaultInstance() {
  ::envoy::api::v2::filter::_StatusCodeFilter_default_instance_._instance.get_mutable()->comparison_ = const_cast< ::envoy::api::v2::filter::ComparisonFilter*>(
      ::envoy::api::v2::filter::ComparisonFilter::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StatusCodeFilter::kComparisonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StatusCodeFilter::StatusCodeFilter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2ffilter_2faccesslog_2eproto::InitDefaultsStatusCodeFilter();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.StatusCodeFilter)
}
StatusCodeFilter::StatusCodeFilter(const StatusCodeFilter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_comparison()) {
    comparison_ = new ::envoy::api::v2::filter::ComparisonFilter(*from.comparison_);
  } else {
    comparison_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.StatusCodeFilter)
}

void StatusCodeFilter::SharedCtor() {
  comparison_ = NULL;
  _cached_size_ = 0;
}

StatusCodeFilter::~StatusCodeFilter() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.StatusCodeFilter)
  SharedDtor();
}

void StatusCodeFilter::SharedDtor() {
  if (this != internal_default_instance()) delete comparison_;
}

void StatusCodeFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusCodeFilter::descriptor() {
  ::protobuf_api_2ffilter_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StatusCodeFilter& StatusCodeFilter::default_instance() {
  ::protobuf_api_2ffilter_2faccesslog_2eproto::InitDefaultsStatusCodeFilter();
  return *internal_default_instance();
}

StatusCodeFilter* StatusCodeFilter::New(::google::protobuf::Arena* arena) const {
  StatusCodeFilter* n = new StatusCodeFilter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StatusCodeFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.StatusCodeFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && comparison_ != NULL) {
    delete comparison_;
  }
  comparison_ = NULL;
  _internal_metadata_.Clear();
}

bool StatusCodeFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.StatusCodeFilter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.filter.ComparisonFilter comparison = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_comparison()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.StatusCodeFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.StatusCodeFilter)
  return false;
#undef DO_
}

void StatusCodeFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.StatusCodeFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.filter.ComparisonFilter comparison = 1;
  if (this->has_comparison()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->comparison_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.StatusCodeFilter)
}

::google::protobuf::uint8* StatusCodeFilter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.StatusCodeFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.filter.ComparisonFilter comparison = 1;
  if (this->has_comparison()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->comparison_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.StatusCodeFilter)
  return target;
}

size_t StatusCodeFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.StatusCodeFilter)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .envoy.api.v2.filter.ComparisonFilter comparison = 1;
  if (this->has_comparison()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->comparison_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusCodeFilter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.StatusCodeFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const StatusCodeFilter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StatusCodeFilter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.StatusCodeFilter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.StatusCodeFilter)
    MergeFrom(*source);
  }
}

void StatusCodeFilter::MergeFrom(const StatusCodeFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.StatusCodeFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_comparison()) {
    mutable_comparison()->::envoy::api::v2::filter::ComparisonFilter::MergeFrom(from.comparison());
  }
}

void StatusCodeFilter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.StatusCodeFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusCodeFilter::CopyFrom(const StatusCodeFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.StatusCodeFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusCodeFilter::IsInitialized() const {
  return true;
}

void StatusCodeFilter::Swap(StatusCodeFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StatusCodeFilter::InternalSwap(StatusCodeFilter* other) {
  using std::swap;
  swap(comparison_, other->comparison_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StatusCodeFilter::GetMetadata() const {
  protobuf_api_2ffilter_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DurationFilter::InitAsDefaultInstance() {
  ::envoy::api::v2::filter::_DurationFilter_default_instance_._instance.get_mutable()->comparison_ = const_cast< ::envoy::api::v2::filter::ComparisonFilter*>(
      ::envoy::api::v2::filter::ComparisonFilter::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DurationFilter::kComparisonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DurationFilter::DurationFilter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2ffilter_2faccesslog_2eproto::InitDefaultsDurationFilter();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.DurationFilter)
}
DurationFilter::DurationFilter(const DurationFilter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_comparison()) {
    comparison_ = new ::envoy::api::v2::filter::ComparisonFilter(*from.comparison_);
  } else {
    comparison_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.DurationFilter)
}

void DurationFilter::SharedCtor() {
  comparison_ = NULL;
  _cached_size_ = 0;
}

DurationFilter::~DurationFilter() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.DurationFilter)
  SharedDtor();
}

void DurationFilter::SharedDtor() {
  if (this != internal_default_instance()) delete comparison_;
}

void DurationFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DurationFilter::descriptor() {
  ::protobuf_api_2ffilter_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DurationFilter& DurationFilter::default_instance() {
  ::protobuf_api_2ffilter_2faccesslog_2eproto::InitDefaultsDurationFilter();
  return *internal_default_instance();
}

DurationFilter* DurationFilter::New(::google::protobuf::Arena* arena) const {
  DurationFilter* n = new DurationFilter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DurationFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.DurationFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && comparison_ != NULL) {
    delete comparison_;
  }
  comparison_ = NULL;
  _internal_metadata_.Clear();
}

bool DurationFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.DurationFilter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.filter.ComparisonFilter comparison = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_comparison()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.DurationFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.DurationFilter)
  return false;
#undef DO_
}

void DurationFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.DurationFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.filter.ComparisonFilter comparison = 1;
  if (this->has_comparison()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->comparison_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.DurationFilter)
}

::google::protobuf::uint8* DurationFilter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.DurationFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.filter.ComparisonFilter comparison = 1;
  if (this->has_comparison()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->comparison_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.DurationFilter)
  return target;
}

size_t DurationFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.DurationFilter)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .envoy.api.v2.filter.ComparisonFilter comparison = 1;
  if (this->has_comparison()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->comparison_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DurationFilter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.DurationFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const DurationFilter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DurationFilter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.DurationFilter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.DurationFilter)
    MergeFrom(*source);
  }
}

void DurationFilter::MergeFrom(const DurationFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.DurationFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_comparison()) {
    mutable_comparison()->::envoy::api::v2::filter::ComparisonFilter::MergeFrom(from.comparison());
  }
}

void DurationFilter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.DurationFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DurationFilter::CopyFrom(const DurationFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.DurationFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DurationFilter::IsInitialized() const {
  return true;
}

void DurationFilter::Swap(DurationFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DurationFilter::InternalSwap(DurationFilter* other) {
  using std::swap;
  swap(comparison_, other->comparison_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DurationFilter::GetMetadata() const {
  protobuf_api_2ffilter_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NotHealthCheckFilter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotHealthCheckFilter::NotHealthCheckFilter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2ffilter_2faccesslog_2eproto::InitDefaultsNotHealthCheckFilter();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.NotHealthCheckFilter)
}
NotHealthCheckFilter::NotHealthCheckFilter(const NotHealthCheckFilter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.NotHealthCheckFilter)
}

void NotHealthCheckFilter::SharedCtor() {
  _cached_size_ = 0;
}

NotHealthCheckFilter::~NotHealthCheckFilter() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.NotHealthCheckFilter)
  SharedDtor();
}

void NotHealthCheckFilter::SharedDtor() {
}

void NotHealthCheckFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotHealthCheckFilter::descriptor() {
  ::protobuf_api_2ffilter_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NotHealthCheckFilter& NotHealthCheckFilter::default_instance() {
  ::protobuf_api_2ffilter_2faccesslog_2eproto::InitDefaultsNotHealthCheckFilter();
  return *internal_default_instance();
}

NotHealthCheckFilter* NotHealthCheckFilter::New(::google::protobuf::Arena* arena) const {
  NotHealthCheckFilter* n = new NotHealthCheckFilter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NotHealthCheckFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.NotHealthCheckFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool NotHealthCheckFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.NotHealthCheckFilter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.NotHealthCheckFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.NotHealthCheckFilter)
  return false;
#undef DO_
}

void NotHealthCheckFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.NotHealthCheckFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.NotHealthCheckFilter)
}

::google::protobuf::uint8* NotHealthCheckFilter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.NotHealthCheckFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.NotHealthCheckFilter)
  return target;
}

size_t NotHealthCheckFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.NotHealthCheckFilter)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotHealthCheckFilter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.NotHealthCheckFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const NotHealthCheckFilter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NotHealthCheckFilter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.NotHealthCheckFilter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.NotHealthCheckFilter)
    MergeFrom(*source);
  }
}

void NotHealthCheckFilter::MergeFrom(const NotHealthCheckFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.NotHealthCheckFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void NotHealthCheckFilter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.NotHealthCheckFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotHealthCheckFilter::CopyFrom(const NotHealthCheckFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.NotHealthCheckFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotHealthCheckFilter::IsInitialized() const {
  return true;
}

void NotHealthCheckFilter::Swap(NotHealthCheckFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NotHealthCheckFilter::InternalSwap(NotHealthCheckFilter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NotHealthCheckFilter::GetMetadata() const {
  protobuf_api_2ffilter_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TraceableFilter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TraceableFilter::TraceableFilter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2ffilter_2faccesslog_2eproto::InitDefaultsTraceableFilter();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.TraceableFilter)
}
TraceableFilter::TraceableFilter(const TraceableFilter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.TraceableFilter)
}

void TraceableFilter::SharedCtor() {
  _cached_size_ = 0;
}

TraceableFilter::~TraceableFilter() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.TraceableFilter)
  SharedDtor();
}

void TraceableFilter::SharedDtor() {
}

void TraceableFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TraceableFilter::descriptor() {
  ::protobuf_api_2ffilter_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TraceableFilter& TraceableFilter::default_instance() {
  ::protobuf_api_2ffilter_2faccesslog_2eproto::InitDefaultsTraceableFilter();
  return *internal_default_instance();
}

TraceableFilter* TraceableFilter::New(::google::protobuf::Arena* arena) const {
  TraceableFilter* n = new TraceableFilter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TraceableFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.TraceableFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool TraceableFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.TraceableFilter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.TraceableFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.TraceableFilter)
  return false;
#undef DO_
}

void TraceableFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.TraceableFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.TraceableFilter)
}

::google::protobuf::uint8* TraceableFilter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.TraceableFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.TraceableFilter)
  return target;
}

size_t TraceableFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.TraceableFilter)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TraceableFilter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.TraceableFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const TraceableFilter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TraceableFilter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.TraceableFilter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.TraceableFilter)
    MergeFrom(*source);
  }
}

void TraceableFilter::MergeFrom(const TraceableFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.TraceableFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TraceableFilter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.TraceableFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TraceableFilter::CopyFrom(const TraceableFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.TraceableFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceableFilter::IsInitialized() const {
  return true;
}

void TraceableFilter::Swap(TraceableFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TraceableFilter::InternalSwap(TraceableFilter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TraceableFilter::GetMetadata() const {
  protobuf_api_2ffilter_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RuntimeFilter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RuntimeFilter::kRuntimeKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RuntimeFilter::RuntimeFilter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2ffilter_2faccesslog_2eproto::InitDefaultsRuntimeFilter();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.RuntimeFilter)
}
RuntimeFilter::RuntimeFilter(const RuntimeFilter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  runtime_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.runtime_key().size() > 0) {
    runtime_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.runtime_key_);
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.RuntimeFilter)
}

void RuntimeFilter::SharedCtor() {
  runtime_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

RuntimeFilter::~RuntimeFilter() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.RuntimeFilter)
  SharedDtor();
}

void RuntimeFilter::SharedDtor() {
  runtime_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RuntimeFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RuntimeFilter::descriptor() {
  ::protobuf_api_2ffilter_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RuntimeFilter& RuntimeFilter::default_instance() {
  ::protobuf_api_2ffilter_2faccesslog_2eproto::InitDefaultsRuntimeFilter();
  return *internal_default_instance();
}

RuntimeFilter* RuntimeFilter::New(::google::protobuf::Arena* arena) const {
  RuntimeFilter* n = new RuntimeFilter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RuntimeFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.RuntimeFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  runtime_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool RuntimeFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.RuntimeFilter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string runtime_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_runtime_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->runtime_key().data(), static_cast<int>(this->runtime_key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.filter.RuntimeFilter.runtime_key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.RuntimeFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.RuntimeFilter)
  return false;
#undef DO_
}

void RuntimeFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.RuntimeFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string runtime_key = 1;
  if (this->runtime_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->runtime_key().data(), static_cast<int>(this->runtime_key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.RuntimeFilter.runtime_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->runtime_key(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.RuntimeFilter)
}

::google::protobuf::uint8* RuntimeFilter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.RuntimeFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string runtime_key = 1;
  if (this->runtime_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->runtime_key().data(), static_cast<int>(this->runtime_key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.RuntimeFilter.runtime_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->runtime_key(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.RuntimeFilter)
  return target;
}

size_t RuntimeFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.RuntimeFilter)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string runtime_key = 1;
  if (this->runtime_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->runtime_key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RuntimeFilter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.RuntimeFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const RuntimeFilter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RuntimeFilter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.RuntimeFilter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.RuntimeFilter)
    MergeFrom(*source);
  }
}

void RuntimeFilter::MergeFrom(const RuntimeFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.RuntimeFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.runtime_key().size() > 0) {

    runtime_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.runtime_key_);
  }
}

void RuntimeFilter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.RuntimeFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuntimeFilter::CopyFrom(const RuntimeFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.RuntimeFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuntimeFilter::IsInitialized() const {
  return true;
}

void RuntimeFilter::Swap(RuntimeFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RuntimeFilter::InternalSwap(RuntimeFilter* other) {
  using std::swap;
  runtime_key_.Swap(&other->runtime_key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RuntimeFilter::GetMetadata() const {
  protobuf_api_2ffilter_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AndFilter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AndFilter::kFiltersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AndFilter::AndFilter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2ffilter_2faccesslog_2eproto::InitDefaultsAccessLogFilter();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.AndFilter)
}
AndFilter::AndFilter(const AndFilter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      filters_(from.filters_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.AndFilter)
}

void AndFilter::SharedCtor() {
  _cached_size_ = 0;
}

AndFilter::~AndFilter() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.AndFilter)
  SharedDtor();
}

void AndFilter::SharedDtor() {
}

void AndFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AndFilter::descriptor() {
  ::protobuf_api_2ffilter_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AndFilter& AndFilter::default_instance() {
  ::protobuf_api_2ffilter_2faccesslog_2eproto::InitDefaultsAccessLogFilter();
  return *internal_default_instance();
}

AndFilter* AndFilter::New(::google::protobuf::Arena* arena) const {
  AndFilter* n = new AndFilter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AndFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.AndFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filters_.Clear();
  _internal_metadata_.Clear();
}

bool AndFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.AndFilter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .envoy.api.v2.filter.AccessLogFilter filters = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_filters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.AndFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.AndFilter)
  return false;
#undef DO_
}

void AndFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.AndFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .envoy.api.v2.filter.AccessLogFilter filters = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->filters_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->filters(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.AndFilter)
}

::google::protobuf::uint8* AndFilter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.AndFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .envoy.api.v2.filter.AccessLogFilter filters = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->filters_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->filters(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.AndFilter)
  return target;
}

size_t AndFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.AndFilter)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .envoy.api.v2.filter.AccessLogFilter filters = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->filters_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->filters(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AndFilter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.AndFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const AndFilter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AndFilter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.AndFilter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.AndFilter)
    MergeFrom(*source);
  }
}

void AndFilter::MergeFrom(const AndFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.AndFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  filters_.MergeFrom(from.filters_);
}

void AndFilter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.AndFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AndFilter::CopyFrom(const AndFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.AndFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AndFilter::IsInitialized() const {
  return true;
}

void AndFilter::Swap(AndFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AndFilter::InternalSwap(AndFilter* other) {
  using std::swap;
  filters_.InternalSwap(&other->filters_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AndFilter::GetMetadata() const {
  protobuf_api_2ffilter_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OrFilter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OrFilter::kFiltersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OrFilter::OrFilter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2ffilter_2faccesslog_2eproto::InitDefaultsAccessLogFilter();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.OrFilter)
}
OrFilter::OrFilter(const OrFilter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      filters_(from.filters_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.OrFilter)
}

void OrFilter::SharedCtor() {
  _cached_size_ = 0;
}

OrFilter::~OrFilter() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.OrFilter)
  SharedDtor();
}

void OrFilter::SharedDtor() {
}

void OrFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrFilter::descriptor() {
  ::protobuf_api_2ffilter_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OrFilter& OrFilter::default_instance() {
  ::protobuf_api_2ffilter_2faccesslog_2eproto::InitDefaultsAccessLogFilter();
  return *internal_default_instance();
}

OrFilter* OrFilter::New(::google::protobuf::Arena* arena) const {
  OrFilter* n = new OrFilter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OrFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.OrFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filters_.Clear();
  _internal_metadata_.Clear();
}

bool OrFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.OrFilter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .envoy.api.v2.filter.AccessLogFilter filters = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_filters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.OrFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.OrFilter)
  return false;
#undef DO_
}

void OrFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.OrFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .envoy.api.v2.filter.AccessLogFilter filters = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->filters_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->filters(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.OrFilter)
}

::google::protobuf::uint8* OrFilter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.OrFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .envoy.api.v2.filter.AccessLogFilter filters = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->filters_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->filters(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.OrFilter)
  return target;
}

size_t OrFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.OrFilter)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .envoy.api.v2.filter.AccessLogFilter filters = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->filters_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->filters(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrFilter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.OrFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const OrFilter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OrFilter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.OrFilter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.OrFilter)
    MergeFrom(*source);
  }
}

void OrFilter::MergeFrom(const OrFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.OrFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  filters_.MergeFrom(from.filters_);
}

void OrFilter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.OrFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrFilter::CopyFrom(const OrFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.OrFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrFilter::IsInitialized() const {
  return true;
}

void OrFilter::Swap(OrFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OrFilter::InternalSwap(OrFilter* other) {
  using std::swap;
  filters_.InternalSwap(&other->filters_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OrFilter::GetMetadata() const {
  protobuf_api_2ffilter_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AccessLogFilter::InitAsDefaultInstance() {
  ::envoy::api::v2::filter::_AccessLogFilter_default_instance_.status_code_filter_ = const_cast< ::envoy::api::v2::filter::StatusCodeFilter*>(
      ::envoy::api::v2::filter::StatusCodeFilter::internal_default_instance());
  ::envoy::api::v2::filter::_AccessLogFilter_default_instance_.duration_filter_ = const_cast< ::envoy::api::v2::filter::DurationFilter*>(
      ::envoy::api::v2::filter::DurationFilter::internal_default_instance());
  ::envoy::api::v2::filter::_AccessLogFilter_default_instance_.not_health_check_filter_ = const_cast< ::envoy::api::v2::filter::NotHealthCheckFilter*>(
      ::envoy::api::v2::filter::NotHealthCheckFilter::internal_default_instance());
  ::envoy::api::v2::filter::_AccessLogFilter_default_instance_.traceable_filter_ = const_cast< ::envoy::api::v2::filter::TraceableFilter*>(
      ::envoy::api::v2::filter::TraceableFilter::internal_default_instance());
  ::envoy::api::v2::filter::_AccessLogFilter_default_instance_.runtime_filter_ = const_cast< ::envoy::api::v2::filter::RuntimeFilter*>(
      ::envoy::api::v2::filter::RuntimeFilter::internal_default_instance());
  ::envoy::api::v2::filter::_AccessLogFilter_default_instance_.and_filter_ = const_cast< ::envoy::api::v2::filter::AndFilter*>(
      ::envoy::api::v2::filter::AndFilter::internal_default_instance());
  ::envoy::api::v2::filter::_AccessLogFilter_default_instance_.or_filter_ = const_cast< ::envoy::api::v2::filter::OrFilter*>(
      ::envoy::api::v2::filter::OrFilter::internal_default_instance());
}
void AccessLogFilter::set_allocated_status_code_filter(::envoy::api::v2::filter::StatusCodeFilter* status_code_filter) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_filter_specifier();
  if (status_code_filter) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      status_code_filter = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status_code_filter, submessage_arena);
    }
    set_has_status_code_filter();
    filter_specifier_.status_code_filter_ = status_code_filter;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.AccessLogFilter.status_code_filter)
}
void AccessLogFilter::set_allocated_duration_filter(::envoy::api::v2::filter::DurationFilter* duration_filter) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_filter_specifier();
  if (duration_filter) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      duration_filter = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, duration_filter, submessage_arena);
    }
    set_has_duration_filter();
    filter_specifier_.duration_filter_ = duration_filter;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.AccessLogFilter.duration_filter)
}
void AccessLogFilter::set_allocated_not_health_check_filter(::envoy::api::v2::filter::NotHealthCheckFilter* not_health_check_filter) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_filter_specifier();
  if (not_health_check_filter) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      not_health_check_filter = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, not_health_check_filter, submessage_arena);
    }
    set_has_not_health_check_filter();
    filter_specifier_.not_health_check_filter_ = not_health_check_filter;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.AccessLogFilter.not_health_check_filter)
}
void AccessLogFilter::set_allocated_traceable_filter(::envoy::api::v2::filter::TraceableFilter* traceable_filter) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_filter_specifier();
  if (traceable_filter) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      traceable_filter = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, traceable_filter, submessage_arena);
    }
    set_has_traceable_filter();
    filter_specifier_.traceable_filter_ = traceable_filter;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.AccessLogFilter.traceable_filter)
}
void AccessLogFilter::set_allocated_runtime_filter(::envoy::api::v2::filter::RuntimeFilter* runtime_filter) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_filter_specifier();
  if (runtime_filter) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      runtime_filter = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, runtime_filter, submessage_arena);
    }
    set_has_runtime_filter();
    filter_specifier_.runtime_filter_ = runtime_filter;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.AccessLogFilter.runtime_filter)
}
void AccessLogFilter::set_allocated_and_filter(::envoy::api::v2::filter::AndFilter* and_filter) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_filter_specifier();
  if (and_filter) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      and_filter = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, and_filter, submessage_arena);
    }
    set_has_and_filter();
    filter_specifier_.and_filter_ = and_filter;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.AccessLogFilter.and_filter)
}
void AccessLogFilter::set_allocated_or_filter(::envoy::api::v2::filter::OrFilter* or_filter) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_filter_specifier();
  if (or_filter) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      or_filter = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, or_filter, submessage_arena);
    }
    set_has_or_filter();
    filter_specifier_.or_filter_ = or_filter;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.AccessLogFilter.or_filter)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccessLogFilter::kStatusCodeFilterFieldNumber;
const int AccessLogFilter::kDurationFilterFieldNumber;
const int AccessLogFilter::kNotHealthCheckFilterFieldNumber;
const int AccessLogFilter::kTraceableFilterFieldNumber;
const int AccessLogFilter::kRuntimeFilterFieldNumber;
const int AccessLogFilter::kAndFilterFieldNumber;
const int AccessLogFilter::kOrFilterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccessLogFilter::AccessLogFilter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2ffilter_2faccesslog_2eproto::InitDefaultsAccessLogFilter();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.AccessLogFilter)
}
AccessLogFilter::AccessLogFilter(const AccessLogFilter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_filter_specifier();
  switch (from.filter_specifier_case()) {
    case kStatusCodeFilter: {
      mutable_status_code_filter()->::envoy::api::v2::filter::StatusCodeFilter::MergeFrom(from.status_code_filter());
      break;
    }
    case kDurationFilter: {
      mutable_duration_filter()->::envoy::api::v2::filter::DurationFilter::MergeFrom(from.duration_filter());
      break;
    }
    case kNotHealthCheckFilter: {
      mutable_not_health_check_filter()->::envoy::api::v2::filter::NotHealthCheckFilter::MergeFrom(from.not_health_check_filter());
      break;
    }
    case kTraceableFilter: {
      mutable_traceable_filter()->::envoy::api::v2::filter::TraceableFilter::MergeFrom(from.traceable_filter());
      break;
    }
    case kRuntimeFilter: {
      mutable_runtime_filter()->::envoy::api::v2::filter::RuntimeFilter::MergeFrom(from.runtime_filter());
      break;
    }
    case kAndFilter: {
      mutable_and_filter()->::envoy::api::v2::filter::AndFilter::MergeFrom(from.and_filter());
      break;
    }
    case kOrFilter: {
      mutable_or_filter()->::envoy::api::v2::filter::OrFilter::MergeFrom(from.or_filter());
      break;
    }
    case FILTER_SPECIFIER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.AccessLogFilter)
}

void AccessLogFilter::SharedCtor() {
  clear_has_filter_specifier();
  _cached_size_ = 0;
}

AccessLogFilter::~AccessLogFilter() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.AccessLogFilter)
  SharedDtor();
}

void AccessLogFilter::SharedDtor() {
  if (has_filter_specifier()) {
    clear_filter_specifier();
  }
}

void AccessLogFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccessLogFilter::descriptor() {
  ::protobuf_api_2ffilter_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccessLogFilter& AccessLogFilter::default_instance() {
  ::protobuf_api_2ffilter_2faccesslog_2eproto::InitDefaultsAccessLogFilter();
  return *internal_default_instance();
}

AccessLogFilter* AccessLogFilter::New(::google::protobuf::Arena* arena) const {
  AccessLogFilter* n = new AccessLogFilter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AccessLogFilter::clear_filter_specifier() {
// @@protoc_insertion_point(one_of_clear_start:envoy.api.v2.filter.AccessLogFilter)
  switch (filter_specifier_case()) {
    case kStatusCodeFilter: {
      delete filter_specifier_.status_code_filter_;
      break;
    }
    case kDurationFilter: {
      delete filter_specifier_.duration_filter_;
      break;
    }
    case kNotHealthCheckFilter: {
      delete filter_specifier_.not_health_check_filter_;
      break;
    }
    case kTraceableFilter: {
      delete filter_specifier_.traceable_filter_;
      break;
    }
    case kRuntimeFilter: {
      delete filter_specifier_.runtime_filter_;
      break;
    }
    case kAndFilter: {
      delete filter_specifier_.and_filter_;
      break;
    }
    case kOrFilter: {
      delete filter_specifier_.or_filter_;
      break;
    }
    case FILTER_SPECIFIER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FILTER_SPECIFIER_NOT_SET;
}


void AccessLogFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.AccessLogFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_filter_specifier();
  _internal_metadata_.Clear();
}

bool AccessLogFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.AccessLogFilter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.filter.StatusCodeFilter status_code_filter = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_status_code_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.filter.DurationFilter duration_filter = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_duration_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.filter.NotHealthCheckFilter not_health_check_filter = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_not_health_check_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.filter.TraceableFilter traceable_filter = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_traceable_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.filter.RuntimeFilter runtime_filter = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_runtime_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.filter.AndFilter and_filter = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_and_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.filter.OrFilter or_filter = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_or_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.AccessLogFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.AccessLogFilter)
  return false;
#undef DO_
}

void AccessLogFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.AccessLogFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.filter.StatusCodeFilter status_code_filter = 1;
  if (has_status_code_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *filter_specifier_.status_code_filter_, output);
  }

  // .envoy.api.v2.filter.DurationFilter duration_filter = 2;
  if (has_duration_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *filter_specifier_.duration_filter_, output);
  }

  // .envoy.api.v2.filter.NotHealthCheckFilter not_health_check_filter = 3;
  if (has_not_health_check_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *filter_specifier_.not_health_check_filter_, output);
  }

  // .envoy.api.v2.filter.TraceableFilter traceable_filter = 4;
  if (has_traceable_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *filter_specifier_.traceable_filter_, output);
  }

  // .envoy.api.v2.filter.RuntimeFilter runtime_filter = 5;
  if (has_runtime_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *filter_specifier_.runtime_filter_, output);
  }

  // .envoy.api.v2.filter.AndFilter and_filter = 6;
  if (has_and_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *filter_specifier_.and_filter_, output);
  }

  // .envoy.api.v2.filter.OrFilter or_filter = 7;
  if (has_or_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *filter_specifier_.or_filter_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.AccessLogFilter)
}

::google::protobuf::uint8* AccessLogFilter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.AccessLogFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.filter.StatusCodeFilter status_code_filter = 1;
  if (has_status_code_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *filter_specifier_.status_code_filter_, deterministic, target);
  }

  // .envoy.api.v2.filter.DurationFilter duration_filter = 2;
  if (has_duration_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *filter_specifier_.duration_filter_, deterministic, target);
  }

  // .envoy.api.v2.filter.NotHealthCheckFilter not_health_check_filter = 3;
  if (has_not_health_check_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *filter_specifier_.not_health_check_filter_, deterministic, target);
  }

  // .envoy.api.v2.filter.TraceableFilter traceable_filter = 4;
  if (has_traceable_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *filter_specifier_.traceable_filter_, deterministic, target);
  }

  // .envoy.api.v2.filter.RuntimeFilter runtime_filter = 5;
  if (has_runtime_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *filter_specifier_.runtime_filter_, deterministic, target);
  }

  // .envoy.api.v2.filter.AndFilter and_filter = 6;
  if (has_and_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *filter_specifier_.and_filter_, deterministic, target);
  }

  // .envoy.api.v2.filter.OrFilter or_filter = 7;
  if (has_or_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *filter_specifier_.or_filter_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.AccessLogFilter)
  return target;
}

size_t AccessLogFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.AccessLogFilter)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (filter_specifier_case()) {
    // .envoy.api.v2.filter.StatusCodeFilter status_code_filter = 1;
    case kStatusCodeFilter: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *filter_specifier_.status_code_filter_);
      break;
    }
    // .envoy.api.v2.filter.DurationFilter duration_filter = 2;
    case kDurationFilter: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *filter_specifier_.duration_filter_);
      break;
    }
    // .envoy.api.v2.filter.NotHealthCheckFilter not_health_check_filter = 3;
    case kNotHealthCheckFilter: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *filter_specifier_.not_health_check_filter_);
      break;
    }
    // .envoy.api.v2.filter.TraceableFilter traceable_filter = 4;
    case kTraceableFilter: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *filter_specifier_.traceable_filter_);
      break;
    }
    // .envoy.api.v2.filter.RuntimeFilter runtime_filter = 5;
    case kRuntimeFilter: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *filter_specifier_.runtime_filter_);
      break;
    }
    // .envoy.api.v2.filter.AndFilter and_filter = 6;
    case kAndFilter: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *filter_specifier_.and_filter_);
      break;
    }
    // .envoy.api.v2.filter.OrFilter or_filter = 7;
    case kOrFilter: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *filter_specifier_.or_filter_);
      break;
    }
    case FILTER_SPECIFIER_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccessLogFilter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.AccessLogFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const AccessLogFilter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccessLogFilter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.AccessLogFilter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.AccessLogFilter)
    MergeFrom(*source);
  }
}

void AccessLogFilter::MergeFrom(const AccessLogFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.AccessLogFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.filter_specifier_case()) {
    case kStatusCodeFilter: {
      mutable_status_code_filter()->::envoy::api::v2::filter::StatusCodeFilter::MergeFrom(from.status_code_filter());
      break;
    }
    case kDurationFilter: {
      mutable_duration_filter()->::envoy::api::v2::filter::DurationFilter::MergeFrom(from.duration_filter());
      break;
    }
    case kNotHealthCheckFilter: {
      mutable_not_health_check_filter()->::envoy::api::v2::filter::NotHealthCheckFilter::MergeFrom(from.not_health_check_filter());
      break;
    }
    case kTraceableFilter: {
      mutable_traceable_filter()->::envoy::api::v2::filter::TraceableFilter::MergeFrom(from.traceable_filter());
      break;
    }
    case kRuntimeFilter: {
      mutable_runtime_filter()->::envoy::api::v2::filter::RuntimeFilter::MergeFrom(from.runtime_filter());
      break;
    }
    case kAndFilter: {
      mutable_and_filter()->::envoy::api::v2::filter::AndFilter::MergeFrom(from.and_filter());
      break;
    }
    case kOrFilter: {
      mutable_or_filter()->::envoy::api::v2::filter::OrFilter::MergeFrom(from.or_filter());
      break;
    }
    case FILTER_SPECIFIER_NOT_SET: {
      break;
    }
  }
}

void AccessLogFilter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.AccessLogFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccessLogFilter::CopyFrom(const AccessLogFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.AccessLogFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccessLogFilter::IsInitialized() const {
  return true;
}

void AccessLogFilter::Swap(AccessLogFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccessLogFilter::InternalSwap(AccessLogFilter* other) {
  using std::swap;
  swap(filter_specifier_, other->filter_specifier_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AccessLogFilter::GetMetadata() const {
  protobuf_api_2ffilter_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FileAccessLog::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileAccessLog::kPathFieldNumber;
const int FileAccessLog::kFormatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileAccessLog::FileAccessLog()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2ffilter_2faccesslog_2eproto::InitDefaultsFileAccessLog();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.FileAccessLog)
}
FileAccessLog::FileAccessLog(const FileAccessLog& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  format_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.format().size() > 0) {
    format_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.format_);
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.FileAccessLog)
}

void FileAccessLog::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  format_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

FileAccessLog::~FileAccessLog() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.FileAccessLog)
  SharedDtor();
}

void FileAccessLog::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  format_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FileAccessLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileAccessLog::descriptor() {
  ::protobuf_api_2ffilter_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FileAccessLog& FileAccessLog::default_instance() {
  ::protobuf_api_2ffilter_2faccesslog_2eproto::InitDefaultsFileAccessLog();
  return *internal_default_instance();
}

FileAccessLog* FileAccessLog::New(::google::protobuf::Arena* arena) const {
  FileAccessLog* n = new FileAccessLog;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FileAccessLog::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.FileAccessLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool FileAccessLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.FileAccessLog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.filter.FileAccessLog.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string format = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_format()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->format().data(), static_cast<int>(this->format().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.filter.FileAccessLog.format"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.FileAccessLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.FileAccessLog)
  return false;
#undef DO_
}

void FileAccessLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.FileAccessLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.FileAccessLog.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // string format = 2;
  if (this->format().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->format().data(), static_cast<int>(this->format().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.FileAccessLog.format");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->format(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.FileAccessLog)
}

::google::protobuf::uint8* FileAccessLog::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.FileAccessLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.FileAccessLog.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // string format = 2;
  if (this->format().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->format().data(), static_cast<int>(this->format().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.FileAccessLog.format");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->format(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.FileAccessLog)
  return target;
}

size_t FileAccessLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.FileAccessLog)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // string format = 2;
  if (this->format().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->format());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileAccessLog::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.FileAccessLog)
  GOOGLE_DCHECK_NE(&from, this);
  const FileAccessLog* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FileAccessLog>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.FileAccessLog)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.FileAccessLog)
    MergeFrom(*source);
  }
}

void FileAccessLog::MergeFrom(const FileAccessLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.FileAccessLog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.format().size() > 0) {

    format_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.format_);
  }
}

void FileAccessLog::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.FileAccessLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileAccessLog::CopyFrom(const FileAccessLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.FileAccessLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileAccessLog::IsInitialized() const {
  return true;
}

void FileAccessLog::Swap(FileAccessLog* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileAccessLog::InternalSwap(FileAccessLog* other) {
  using std::swap;
  path_.Swap(&other->path_);
  format_.Swap(&other->format_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FileAccessLog::GetMetadata() const {
  protobuf_api_2ffilter_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AccessLog::InitAsDefaultInstance() {
  ::envoy::api::v2::filter::_AccessLog_default_instance_._instance.get_mutable()->filter_ = const_cast< ::envoy::api::v2::filter::AccessLogFilter*>(
      ::envoy::api::v2::filter::AccessLogFilter::internal_default_instance());
  ::envoy::api::v2::filter::_AccessLog_default_instance_._instance.get_mutable()->config_ = const_cast< ::google::protobuf::Struct*>(
      ::google::protobuf::Struct::internal_default_instance());
}
void AccessLog::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccessLog::kNameFieldNumber;
const int AccessLog::kFilterFieldNumber;
const int AccessLog::kConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccessLog::AccessLog()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2ffilter_2faccesslog_2eproto::InitDefaultsAccessLog();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.AccessLog)
}
AccessLog::AccessLog(const AccessLog& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_filter()) {
    filter_ = new ::envoy::api::v2::filter::AccessLogFilter(*from.filter_);
  } else {
    filter_ = NULL;
  }
  if (from.has_config()) {
    config_ = new ::google::protobuf::Struct(*from.config_);
  } else {
    config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.AccessLog)
}

void AccessLog::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&filter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&config_) -
      reinterpret_cast<char*>(&filter_)) + sizeof(config_));
  _cached_size_ = 0;
}

AccessLog::~AccessLog() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.AccessLog)
  SharedDtor();
}

void AccessLog::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete filter_;
  if (this != internal_default_instance()) delete config_;
}

void AccessLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccessLog::descriptor() {
  ::protobuf_api_2ffilter_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccessLog& AccessLog::default_instance() {
  ::protobuf_api_2ffilter_2faccesslog_2eproto::InitDefaultsAccessLog();
  return *internal_default_instance();
}

AccessLog* AccessLog::New(::google::protobuf::Arena* arena) const {
  AccessLog* n = new AccessLog;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AccessLog::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.AccessLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && filter_ != NULL) {
    delete filter_;
  }
  filter_ = NULL;
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  _internal_metadata_.Clear();
}

bool AccessLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.AccessLog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.filter.AccessLog.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.filter.AccessLogFilter filter = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Struct config = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.AccessLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.AccessLog)
  return false;
#undef DO_
}

void AccessLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.AccessLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.AccessLog.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .envoy.api.v2.filter.AccessLogFilter filter = 2;
  if (this->has_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->filter_, output);
  }

  // .google.protobuf.Struct config = 3;
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->config_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.AccessLog)
}

::google::protobuf::uint8* AccessLog::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.AccessLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.AccessLog.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .envoy.api.v2.filter.AccessLogFilter filter = 2;
  if (this->has_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->filter_, deterministic, target);
  }

  // .google.protobuf.Struct config = 3;
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->config_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.AccessLog)
  return target;
}

size_t AccessLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.AccessLog)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .envoy.api.v2.filter.AccessLogFilter filter = 2;
  if (this->has_filter()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->filter_);
  }

  // .google.protobuf.Struct config = 3;
  if (this->has_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccessLog::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.AccessLog)
  GOOGLE_DCHECK_NE(&from, this);
  const AccessLog* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccessLog>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.AccessLog)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.AccessLog)
    MergeFrom(*source);
  }
}

void AccessLog::MergeFrom(const AccessLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.AccessLog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_filter()) {
    mutable_filter()->::envoy::api::v2::filter::AccessLogFilter::MergeFrom(from.filter());
  }
  if (from.has_config()) {
    mutable_config()->::google::protobuf::Struct::MergeFrom(from.config());
  }
}

void AccessLog::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.AccessLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccessLog::CopyFrom(const AccessLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.AccessLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccessLog::IsInitialized() const {
  return true;
}

void AccessLog::Swap(AccessLog* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccessLog::InternalSwap(AccessLog* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(filter_, other->filter_);
  swap(config_, other->config_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AccessLog::GetMetadata() const {
  protobuf_api_2ffilter_2faccesslog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2faccesslog_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace filter
}  // namespace v2
}  // namespace api
}  // namespace envoy

// @@protoc_insertion_point(global_scope)
