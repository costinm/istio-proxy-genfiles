// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/filter/network/redis_proxy.proto

#include "api/filter/network/redis_proxy.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace envoy {
namespace api {
namespace v2 {
namespace filter {
namespace network {
class RedisProxy_ConnPoolSettingsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RedisProxy_ConnPoolSettings>
      _instance;
} _RedisProxy_ConnPoolSettings_default_instance_;
class RedisProxyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RedisProxy>
      _instance;
} _RedisProxy_default_instance_;
}  // namespace network
}  // namespace filter
}  // namespace v2
}  // namespace api
}  // namespace envoy
namespace protobuf_api_2ffilter_2fnetwork_2fredis_5fproxy_2eproto {
void InitDefaultsRedisProxy_ConnPoolSettingsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprotobuf_2fduration_2eproto::InitDefaultsDuration();
  {
    void* ptr = &::envoy::api::v2::filter::network::_RedisProxy_ConnPoolSettings_default_instance_;
    new (ptr) ::envoy::api::v2::filter::network::RedisProxy_ConnPoolSettings();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::filter::network::RedisProxy_ConnPoolSettings::InitAsDefaultInstance();
}

void InitDefaultsRedisProxy_ConnPoolSettings() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRedisProxy_ConnPoolSettingsImpl);
}

void InitDefaultsRedisProxyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_api_2ffilter_2fnetwork_2fredis_5fproxy_2eproto::InitDefaultsRedisProxy_ConnPoolSettings();
  {
    void* ptr = &::envoy::api::v2::filter::network::_RedisProxy_default_instance_;
    new (ptr) ::envoy::api::v2::filter::network::RedisProxy();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::filter::network::RedisProxy::InitAsDefaultInstance();
}

void InitDefaultsRedisProxy() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRedisProxyImpl);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::network::RedisProxy_ConnPoolSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::network::RedisProxy_ConnPoolSettings, op_timeout_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::network::RedisProxy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::network::RedisProxy, stat_prefix_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::network::RedisProxy, cluster_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::network::RedisProxy, settings_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::envoy::api::v2::filter::network::RedisProxy_ConnPoolSettings)},
  { 6, -1, sizeof(::envoy::api::v2::filter::network::RedisProxy)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::filter::network::_RedisProxy_ConnPoolSettings_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::filter::network::_RedisProxy_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "api/filter/network/redis_proxy.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n$api/filter/network/redis_proxy.proto\022\033"
      "envoy.api.v2.filter.network\032\036google/prot"
      "obuf/duration.proto\"\301\001\n\nRedisProxy\022\023\n\013st"
      "at_prefix\030\001 \001(\t\022\017\n\007cluster\030\002 \001(\t\022J\n\010sett"
      "ings\030\003 \001(\01328.envoy.api.v2.filter.network"
      ".RedisProxy.ConnPoolSettings\032A\n\020ConnPool"
      "Settings\022-\n\nop_timeout\030\001 \001(\0132\031.google.pr"
      "otobuf.Durationb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 303);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "api/filter/network/redis_proxy.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2fduration_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_api_2ffilter_2fnetwork_2fredis_5fproxy_2eproto
namespace envoy {
namespace api {
namespace v2 {
namespace filter {
namespace network {

// ===================================================================

void RedisProxy_ConnPoolSettings::InitAsDefaultInstance() {
  ::envoy::api::v2::filter::network::_RedisProxy_ConnPoolSettings_default_instance_._instance.get_mutable()->op_timeout_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
}
void RedisProxy_ConnPoolSettings::clear_op_timeout() {
  if (GetArenaNoVirtual() == NULL && op_timeout_ != NULL) {
    delete op_timeout_;
  }
  op_timeout_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RedisProxy_ConnPoolSettings::kOpTimeoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RedisProxy_ConnPoolSettings::RedisProxy_ConnPoolSettings()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2ffilter_2fnetwork_2fredis_5fproxy_2eproto::InitDefaultsRedisProxy_ConnPoolSettings();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.network.RedisProxy.ConnPoolSettings)
}
RedisProxy_ConnPoolSettings::RedisProxy_ConnPoolSettings(const RedisProxy_ConnPoolSettings& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_op_timeout()) {
    op_timeout_ = new ::google::protobuf::Duration(*from.op_timeout_);
  } else {
    op_timeout_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.network.RedisProxy.ConnPoolSettings)
}

void RedisProxy_ConnPoolSettings::SharedCtor() {
  op_timeout_ = NULL;
  _cached_size_ = 0;
}

RedisProxy_ConnPoolSettings::~RedisProxy_ConnPoolSettings() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.network.RedisProxy.ConnPoolSettings)
  SharedDtor();
}

void RedisProxy_ConnPoolSettings::SharedDtor() {
  if (this != internal_default_instance()) delete op_timeout_;
}

void RedisProxy_ConnPoolSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedisProxy_ConnPoolSettings::descriptor() {
  ::protobuf_api_2ffilter_2fnetwork_2fredis_5fproxy_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2fnetwork_2fredis_5fproxy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RedisProxy_ConnPoolSettings& RedisProxy_ConnPoolSettings::default_instance() {
  ::protobuf_api_2ffilter_2fnetwork_2fredis_5fproxy_2eproto::InitDefaultsRedisProxy_ConnPoolSettings();
  return *internal_default_instance();
}

RedisProxy_ConnPoolSettings* RedisProxy_ConnPoolSettings::New(::google::protobuf::Arena* arena) const {
  RedisProxy_ConnPoolSettings* n = new RedisProxy_ConnPoolSettings;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RedisProxy_ConnPoolSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.network.RedisProxy.ConnPoolSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && op_timeout_ != NULL) {
    delete op_timeout_;
  }
  op_timeout_ = NULL;
  _internal_metadata_.Clear();
}

bool RedisProxy_ConnPoolSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.network.RedisProxy.ConnPoolSettings)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Duration op_timeout = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_op_timeout()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.network.RedisProxy.ConnPoolSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.network.RedisProxy.ConnPoolSettings)
  return false;
#undef DO_
}

void RedisProxy_ConnPoolSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.network.RedisProxy.ConnPoolSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Duration op_timeout = 1;
  if (this->has_op_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->op_timeout_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.network.RedisProxy.ConnPoolSettings)
}

::google::protobuf::uint8* RedisProxy_ConnPoolSettings::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.network.RedisProxy.ConnPoolSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Duration op_timeout = 1;
  if (this->has_op_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->op_timeout_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.network.RedisProxy.ConnPoolSettings)
  return target;
}

size_t RedisProxy_ConnPoolSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.network.RedisProxy.ConnPoolSettings)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.protobuf.Duration op_timeout = 1;
  if (this->has_op_timeout()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->op_timeout_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedisProxy_ConnPoolSettings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.network.RedisProxy.ConnPoolSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const RedisProxy_ConnPoolSettings* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RedisProxy_ConnPoolSettings>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.network.RedisProxy.ConnPoolSettings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.network.RedisProxy.ConnPoolSettings)
    MergeFrom(*source);
  }
}

void RedisProxy_ConnPoolSettings::MergeFrom(const RedisProxy_ConnPoolSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.network.RedisProxy.ConnPoolSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_op_timeout()) {
    mutable_op_timeout()->::google::protobuf::Duration::MergeFrom(from.op_timeout());
  }
}

void RedisProxy_ConnPoolSettings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.network.RedisProxy.ConnPoolSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedisProxy_ConnPoolSettings::CopyFrom(const RedisProxy_ConnPoolSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.network.RedisProxy.ConnPoolSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedisProxy_ConnPoolSettings::IsInitialized() const {
  return true;
}

void RedisProxy_ConnPoolSettings::Swap(RedisProxy_ConnPoolSettings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RedisProxy_ConnPoolSettings::InternalSwap(RedisProxy_ConnPoolSettings* other) {
  using std::swap;
  swap(op_timeout_, other->op_timeout_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RedisProxy_ConnPoolSettings::GetMetadata() const {
  protobuf_api_2ffilter_2fnetwork_2fredis_5fproxy_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2fnetwork_2fredis_5fproxy_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RedisProxy::InitAsDefaultInstance() {
  ::envoy::api::v2::filter::network::_RedisProxy_default_instance_._instance.get_mutable()->settings_ = const_cast< ::envoy::api::v2::filter::network::RedisProxy_ConnPoolSettings*>(
      ::envoy::api::v2::filter::network::RedisProxy_ConnPoolSettings::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RedisProxy::kStatPrefixFieldNumber;
const int RedisProxy::kClusterFieldNumber;
const int RedisProxy::kSettingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RedisProxy::RedisProxy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2ffilter_2fnetwork_2fredis_5fproxy_2eproto::InitDefaultsRedisProxy();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.network.RedisProxy)
}
RedisProxy::RedisProxy(const RedisProxy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stat_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stat_prefix().size() > 0) {
    stat_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stat_prefix_);
  }
  cluster_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster().size() > 0) {
    cluster_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_);
  }
  if (from.has_settings()) {
    settings_ = new ::envoy::api::v2::filter::network::RedisProxy_ConnPoolSettings(*from.settings_);
  } else {
    settings_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.network.RedisProxy)
}

void RedisProxy::SharedCtor() {
  stat_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  settings_ = NULL;
  _cached_size_ = 0;
}

RedisProxy::~RedisProxy() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.network.RedisProxy)
  SharedDtor();
}

void RedisProxy::SharedDtor() {
  stat_prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete settings_;
}

void RedisProxy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedisProxy::descriptor() {
  ::protobuf_api_2ffilter_2fnetwork_2fredis_5fproxy_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2fnetwork_2fredis_5fproxy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RedisProxy& RedisProxy::default_instance() {
  ::protobuf_api_2ffilter_2fnetwork_2fredis_5fproxy_2eproto::InitDefaultsRedisProxy();
  return *internal_default_instance();
}

RedisProxy* RedisProxy::New(::google::protobuf::Arena* arena) const {
  RedisProxy* n = new RedisProxy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RedisProxy::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.network.RedisProxy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stat_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && settings_ != NULL) {
    delete settings_;
  }
  settings_ = NULL;
  _internal_metadata_.Clear();
}

bool RedisProxy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.network.RedisProxy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string stat_prefix = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stat_prefix()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stat_prefix().data(), static_cast<int>(this->stat_prefix().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.filter.network.RedisProxy.stat_prefix"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster().data(), static_cast<int>(this->cluster().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.filter.network.RedisProxy.cluster"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.filter.network.RedisProxy.ConnPoolSettings settings = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.network.RedisProxy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.network.RedisProxy)
  return false;
#undef DO_
}

void RedisProxy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.network.RedisProxy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string stat_prefix = 1;
  if (this->stat_prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stat_prefix().data(), static_cast<int>(this->stat_prefix().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.network.RedisProxy.stat_prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stat_prefix(), output);
  }

  // string cluster = 2;
  if (this->cluster().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster().data(), static_cast<int>(this->cluster().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.network.RedisProxy.cluster");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cluster(), output);
  }

  // .envoy.api.v2.filter.network.RedisProxy.ConnPoolSettings settings = 3;
  if (this->has_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->settings_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.network.RedisProxy)
}

::google::protobuf::uint8* RedisProxy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.network.RedisProxy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string stat_prefix = 1;
  if (this->stat_prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stat_prefix().data(), static_cast<int>(this->stat_prefix().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.network.RedisProxy.stat_prefix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stat_prefix(), target);
  }

  // string cluster = 2;
  if (this->cluster().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster().data(), static_cast<int>(this->cluster().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.network.RedisProxy.cluster");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cluster(), target);
  }

  // .envoy.api.v2.filter.network.RedisProxy.ConnPoolSettings settings = 3;
  if (this->has_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->settings_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.network.RedisProxy)
  return target;
}

size_t RedisProxy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.network.RedisProxy)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string stat_prefix = 1;
  if (this->stat_prefix().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stat_prefix());
  }

  // string cluster = 2;
  if (this->cluster().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster());
  }

  // .envoy.api.v2.filter.network.RedisProxy.ConnPoolSettings settings = 3;
  if (this->has_settings()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->settings_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedisProxy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.network.RedisProxy)
  GOOGLE_DCHECK_NE(&from, this);
  const RedisProxy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RedisProxy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.network.RedisProxy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.network.RedisProxy)
    MergeFrom(*source);
  }
}

void RedisProxy::MergeFrom(const RedisProxy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.network.RedisProxy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stat_prefix().size() > 0) {

    stat_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stat_prefix_);
  }
  if (from.cluster().size() > 0) {

    cluster_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_);
  }
  if (from.has_settings()) {
    mutable_settings()->::envoy::api::v2::filter::network::RedisProxy_ConnPoolSettings::MergeFrom(from.settings());
  }
}

void RedisProxy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.network.RedisProxy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedisProxy::CopyFrom(const RedisProxy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.network.RedisProxy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedisProxy::IsInitialized() const {
  return true;
}

void RedisProxy::Swap(RedisProxy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RedisProxy::InternalSwap(RedisProxy* other) {
  using std::swap;
  stat_prefix_.Swap(&other->stat_prefix_);
  cluster_.Swap(&other->cluster_);
  swap(settings_, other->settings_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RedisProxy::GetMetadata() const {
  protobuf_api_2ffilter_2fnetwork_2fredis_5fproxy_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2fnetwork_2fredis_5fproxy_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace network
}  // namespace filter
}  // namespace v2
}  // namespace api
}  // namespace envoy

// @@protoc_insertion_point(global_scope)
