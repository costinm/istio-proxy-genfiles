// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/filter/network/mongo_proxy.proto

#include "api/filter/network/mongo_proxy.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace envoy {
namespace api {
namespace v2 {
namespace filter {
namespace network {
class MongoProxyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MongoProxy>
      _instance;
} _MongoProxy_default_instance_;
}  // namespace network
}  // namespace filter
}  // namespace v2
}  // namespace api
}  // namespace envoy
namespace protobuf_api_2ffilter_2fnetwork_2fmongo_5fproxy_2eproto {
void InitDefaultsMongoProxyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_api_2ffilter_2ffault_2eproto::InitDefaultsFaultDelay();
  {
    void* ptr = &::envoy::api::v2::filter::network::_MongoProxy_default_instance_;
    new (ptr) ::envoy::api::v2::filter::network::MongoProxy();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::filter::network::MongoProxy::InitAsDefaultInstance();
}

void InitDefaultsMongoProxy() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMongoProxyImpl);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::network::MongoProxy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::network::MongoProxy, stat_prefix_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::network::MongoProxy, access_log_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::network::MongoProxy, delay_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::envoy::api::v2::filter::network::MongoProxy)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::filter::network::_MongoProxy_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "api/filter/network/mongo_proxy.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n$api/filter/network/mongo_proxy.proto\022\033"
      "envoy.api.v2.filter.network\032\026api/filter/"
      "fault.proto\032\027validate/validate.proto\"p\n\n"
      "MongoProxy\022\036\n\013stat_prefix\030\001 \001(\tB\t\272\351\300\003\004r\002"
      "\020\001\022\022\n\naccess_log\030\002 \001(\t\022.\n\005delay\030\003 \001(\0132\037."
      "envoy.api.v2.filter.FaultDelayb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 238);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "api/filter/network/mongo_proxy.proto", &protobuf_RegisterTypes);
  ::protobuf_api_2ffilter_2ffault_2eproto::AddDescriptors();
  ::protobuf_validate_2fvalidate_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_api_2ffilter_2fnetwork_2fmongo_5fproxy_2eproto
namespace envoy {
namespace api {
namespace v2 {
namespace filter {
namespace network {

// ===================================================================

void MongoProxy::InitAsDefaultInstance() {
  ::envoy::api::v2::filter::network::_MongoProxy_default_instance_._instance.get_mutable()->delay_ = const_cast< ::envoy::api::v2::filter::FaultDelay*>(
      ::envoy::api::v2::filter::FaultDelay::internal_default_instance());
}
void MongoProxy::clear_delay() {
  if (GetArenaNoVirtual() == NULL && delay_ != NULL) {
    delete delay_;
  }
  delay_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MongoProxy::kStatPrefixFieldNumber;
const int MongoProxy::kAccessLogFieldNumber;
const int MongoProxy::kDelayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MongoProxy::MongoProxy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2ffilter_2fnetwork_2fmongo_5fproxy_2eproto::InitDefaultsMongoProxy();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.network.MongoProxy)
}
MongoProxy::MongoProxy(const MongoProxy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stat_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stat_prefix().size() > 0) {
    stat_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stat_prefix_);
  }
  access_log_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.access_log().size() > 0) {
    access_log_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.access_log_);
  }
  if (from.has_delay()) {
    delay_ = new ::envoy::api::v2::filter::FaultDelay(*from.delay_);
  } else {
    delay_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.network.MongoProxy)
}

void MongoProxy::SharedCtor() {
  stat_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  access_log_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  delay_ = NULL;
  _cached_size_ = 0;
}

MongoProxy::~MongoProxy() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.network.MongoProxy)
  SharedDtor();
}

void MongoProxy::SharedDtor() {
  stat_prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  access_log_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete delay_;
}

void MongoProxy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MongoProxy::descriptor() {
  ::protobuf_api_2ffilter_2fnetwork_2fmongo_5fproxy_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2fnetwork_2fmongo_5fproxy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MongoProxy& MongoProxy::default_instance() {
  ::protobuf_api_2ffilter_2fnetwork_2fmongo_5fproxy_2eproto::InitDefaultsMongoProxy();
  return *internal_default_instance();
}

MongoProxy* MongoProxy::New(::google::protobuf::Arena* arena) const {
  MongoProxy* n = new MongoProxy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MongoProxy::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.network.MongoProxy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stat_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  access_log_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && delay_ != NULL) {
    delete delay_;
  }
  delay_ = NULL;
  _internal_metadata_.Clear();
}

bool MongoProxy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.network.MongoProxy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string stat_prefix = 1 [(.validate.rules) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stat_prefix()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stat_prefix().data(), static_cast<int>(this->stat_prefix().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.filter.network.MongoProxy.stat_prefix"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string access_log = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_log()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->access_log().data(), static_cast<int>(this->access_log().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.filter.network.MongoProxy.access_log"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.filter.FaultDelay delay = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_delay()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.network.MongoProxy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.network.MongoProxy)
  return false;
#undef DO_
}

void MongoProxy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.network.MongoProxy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string stat_prefix = 1 [(.validate.rules) = {
  if (this->stat_prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stat_prefix().data(), static_cast<int>(this->stat_prefix().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.network.MongoProxy.stat_prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stat_prefix(), output);
  }

  // string access_log = 2;
  if (this->access_log().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->access_log().data(), static_cast<int>(this->access_log().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.network.MongoProxy.access_log");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->access_log(), output);
  }

  // .envoy.api.v2.filter.FaultDelay delay = 3;
  if (this->has_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->delay_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.network.MongoProxy)
}

::google::protobuf::uint8* MongoProxy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.network.MongoProxy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string stat_prefix = 1 [(.validate.rules) = {
  if (this->stat_prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stat_prefix().data(), static_cast<int>(this->stat_prefix().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.network.MongoProxy.stat_prefix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stat_prefix(), target);
  }

  // string access_log = 2;
  if (this->access_log().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->access_log().data(), static_cast<int>(this->access_log().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.network.MongoProxy.access_log");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->access_log(), target);
  }

  // .envoy.api.v2.filter.FaultDelay delay = 3;
  if (this->has_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->delay_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.network.MongoProxy)
  return target;
}

size_t MongoProxy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.network.MongoProxy)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string stat_prefix = 1 [(.validate.rules) = {
  if (this->stat_prefix().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stat_prefix());
  }

  // string access_log = 2;
  if (this->access_log().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->access_log());
  }

  // .envoy.api.v2.filter.FaultDelay delay = 3;
  if (this->has_delay()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->delay_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MongoProxy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.network.MongoProxy)
  GOOGLE_DCHECK_NE(&from, this);
  const MongoProxy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MongoProxy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.network.MongoProxy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.network.MongoProxy)
    MergeFrom(*source);
  }
}

void MongoProxy::MergeFrom(const MongoProxy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.network.MongoProxy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stat_prefix().size() > 0) {

    stat_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stat_prefix_);
  }
  if (from.access_log().size() > 0) {

    access_log_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.access_log_);
  }
  if (from.has_delay()) {
    mutable_delay()->::envoy::api::v2::filter::FaultDelay::MergeFrom(from.delay());
  }
}

void MongoProxy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.network.MongoProxy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MongoProxy::CopyFrom(const MongoProxy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.network.MongoProxy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MongoProxy::IsInitialized() const {
  return true;
}

void MongoProxy::Swap(MongoProxy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MongoProxy::InternalSwap(MongoProxy* other) {
  using std::swap;
  stat_prefix_.Swap(&other->stat_prefix_);
  access_log_.Swap(&other->access_log_);
  swap(delay_, other->delay_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MongoProxy::GetMetadata() const {
  protobuf_api_2ffilter_2fnetwork_2fmongo_5fproxy_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2fnetwork_2fmongo_5fproxy_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace network
}  // namespace filter
}  // namespace v2
}  // namespace api
}  // namespace envoy

// @@protoc_insertion_point(global_scope)
