// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/filter/fault.proto

#include "api/filter/fault.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace envoy {
namespace api {
namespace v2 {
namespace filter {
class FaultDelayDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FaultDelay>
      _instance;
  const ::google::protobuf::Duration* fixed_delay_;
} _FaultDelay_default_instance_;
}  // namespace filter
}  // namespace v2
}  // namespace api
}  // namespace envoy
namespace protobuf_api_2ffilter_2ffault_2eproto {
void InitDefaultsFaultDelayImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprotobuf_2fduration_2eproto::InitDefaultsDuration();
  {
    void* ptr = &::envoy::api::v2::filter::_FaultDelay_default_instance_;
    new (ptr) ::envoy::api::v2::filter::FaultDelay();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::filter::FaultDelay::InitAsDefaultInstance();
}

void InitDefaultsFaultDelay() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFaultDelayImpl);
}

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::FaultDelay, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::FaultDelay, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::FaultDelay, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::FaultDelay, percent_),
  offsetof(::envoy::api::v2::filter::FaultDelayDefaultTypeInternal, fixed_delay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::filter::FaultDelay, fault_delay_type_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::envoy::api::v2::filter::FaultDelay)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::filter::_FaultDelay_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "api/filter/fault.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\026api/filter/fault.proto\022\023envoy.api.v2.f"
      "ilter\032\036google/protobuf/duration.proto\032\027v"
      "alidate/validate.proto\"\325\001\n\nFaultDelay\022<\n"
      "\004type\030\001 \001(\0162..envoy.api.v2.filter.FaultD"
      "elay.FaultDelayType\022\032\n\007percent\030\002 \001(\rB\t\272\351"
      "\300\003\004*\002\030d\022<\n\013fixed_delay\030\003 \001(\0132\031.google.pr"
      "otobuf.DurationB\n\272\351\300\003\005\252\001\002*\000H\000\"\033\n\016FaultDe"
      "layType\022\t\n\005FIXED\020\000B\022\n\020fault_delay_typeB\010"
      "Z\006filterb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 336);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "api/filter/fault.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2fduration_2eproto::AddDescriptors();
  ::protobuf_validate_2fvalidate_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_api_2ffilter_2ffault_2eproto
namespace envoy {
namespace api {
namespace v2 {
namespace filter {
const ::google::protobuf::EnumDescriptor* FaultDelay_FaultDelayType_descriptor() {
  protobuf_api_2ffilter_2ffault_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2ffault_2eproto::file_level_enum_descriptors[0];
}
bool FaultDelay_FaultDelayType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const FaultDelay_FaultDelayType FaultDelay::FIXED;
const FaultDelay_FaultDelayType FaultDelay::FaultDelayType_MIN;
const FaultDelay_FaultDelayType FaultDelay::FaultDelayType_MAX;
const int FaultDelay::FaultDelayType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void FaultDelay::InitAsDefaultInstance() {
  ::envoy::api::v2::filter::_FaultDelay_default_instance_.fixed_delay_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
}
void FaultDelay::set_allocated_fixed_delay(::google::protobuf::Duration* fixed_delay) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_fault_delay_type();
  if (fixed_delay) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(fixed_delay)->GetArena();
    if (message_arena != submessage_arena) {
      fixed_delay = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fixed_delay, submessage_arena);
    }
    set_has_fixed_delay();
    fault_delay_type_.fixed_delay_ = fixed_delay;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.FaultDelay.fixed_delay)
}
void FaultDelay::clear_fixed_delay() {
  if (has_fixed_delay()) {
    delete fault_delay_type_.fixed_delay_;
    clear_has_fault_delay_type();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FaultDelay::kTypeFieldNumber;
const int FaultDelay::kPercentFieldNumber;
const int FaultDelay::kFixedDelayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FaultDelay::FaultDelay()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2ffilter_2ffault_2eproto::InitDefaultsFaultDelay();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.FaultDelay)
}
FaultDelay::FaultDelay(const FaultDelay& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&percent_) -
    reinterpret_cast<char*>(&type_)) + sizeof(percent_));
  clear_has_fault_delay_type();
  switch (from.fault_delay_type_case()) {
    case kFixedDelay: {
      mutable_fixed_delay()->::google::protobuf::Duration::MergeFrom(from.fixed_delay());
      break;
    }
    case FAULT_DELAY_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.FaultDelay)
}

void FaultDelay::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&percent_) -
      reinterpret_cast<char*>(&type_)) + sizeof(percent_));
  clear_has_fault_delay_type();
  _cached_size_ = 0;
}

FaultDelay::~FaultDelay() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.FaultDelay)
  SharedDtor();
}

void FaultDelay::SharedDtor() {
  if (has_fault_delay_type()) {
    clear_fault_delay_type();
  }
}

void FaultDelay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FaultDelay::descriptor() {
  ::protobuf_api_2ffilter_2ffault_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2ffault_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FaultDelay& FaultDelay::default_instance() {
  ::protobuf_api_2ffilter_2ffault_2eproto::InitDefaultsFaultDelay();
  return *internal_default_instance();
}

FaultDelay* FaultDelay::New(::google::protobuf::Arena* arena) const {
  FaultDelay* n = new FaultDelay;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FaultDelay::clear_fault_delay_type() {
// @@protoc_insertion_point(one_of_clear_start:envoy.api.v2.filter.FaultDelay)
  switch (fault_delay_type_case()) {
    case kFixedDelay: {
      delete fault_delay_type_.fixed_delay_;
      break;
    }
    case FAULT_DELAY_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FAULT_DELAY_TYPE_NOT_SET;
}


void FaultDelay::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.FaultDelay)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&percent_) -
      reinterpret_cast<char*>(&type_)) + sizeof(percent_));
  clear_fault_delay_type();
  _internal_metadata_.Clear();
}

bool FaultDelay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.FaultDelay)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.filter.FaultDelay.FaultDelayType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::envoy::api::v2::filter::FaultDelay_FaultDelayType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 percent = 2 [(.validate.rules) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &percent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration fixed_delay = 3 [(.validate.rules) = {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fixed_delay()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.FaultDelay)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.FaultDelay)
  return false;
#undef DO_
}

void FaultDelay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.FaultDelay)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.filter.FaultDelay.FaultDelayType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // uint32 percent = 2 [(.validate.rules) = {
  if (this->percent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->percent(), output);
  }

  // .google.protobuf.Duration fixed_delay = 3 [(.validate.rules) = {
  if (has_fixed_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *fault_delay_type_.fixed_delay_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.FaultDelay)
}

::google::protobuf::uint8* FaultDelay::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.FaultDelay)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.filter.FaultDelay.FaultDelayType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // uint32 percent = 2 [(.validate.rules) = {
  if (this->percent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->percent(), target);
  }

  // .google.protobuf.Duration fixed_delay = 3 [(.validate.rules) = {
  if (has_fixed_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *fault_delay_type_.fixed_delay_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.FaultDelay)
  return target;
}

size_t FaultDelay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.FaultDelay)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .envoy.api.v2.filter.FaultDelay.FaultDelayType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // uint32 percent = 2 [(.validate.rules) = {
  if (this->percent() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->percent());
  }

  switch (fault_delay_type_case()) {
    // .google.protobuf.Duration fixed_delay = 3 [(.validate.rules) = {
    case kFixedDelay: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *fault_delay_type_.fixed_delay_);
      break;
    }
    case FAULT_DELAY_TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FaultDelay::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.FaultDelay)
  GOOGLE_DCHECK_NE(&from, this);
  const FaultDelay* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FaultDelay>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.FaultDelay)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.FaultDelay)
    MergeFrom(*source);
  }
}

void FaultDelay::MergeFrom(const FaultDelay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.FaultDelay)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.percent() != 0) {
    set_percent(from.percent());
  }
  switch (from.fault_delay_type_case()) {
    case kFixedDelay: {
      mutable_fixed_delay()->::google::protobuf::Duration::MergeFrom(from.fixed_delay());
      break;
    }
    case FAULT_DELAY_TYPE_NOT_SET: {
      break;
    }
  }
}

void FaultDelay::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.FaultDelay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaultDelay::CopyFrom(const FaultDelay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.FaultDelay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaultDelay::IsInitialized() const {
  return true;
}

void FaultDelay::Swap(FaultDelay* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FaultDelay::InternalSwap(FaultDelay* other) {
  using std::swap;
  swap(type_, other->type_);
  swap(percent_, other->percent_);
  swap(fault_delay_type_, other->fault_delay_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FaultDelay::GetMetadata() const {
  protobuf_api_2ffilter_2ffault_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2ffilter_2ffault_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace filter
}  // namespace v2
}  // namespace api
}  // namespace envoy

// @@protoc_insertion_point(global_scope)
