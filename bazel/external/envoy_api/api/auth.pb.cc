// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/auth.proto

#include "api/auth.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace envoy {
namespace api {
namespace v2 {
class AuthAction_AndRuleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AuthAction_AndRule>
      _instance;
} _AuthAction_AndRule_default_instance_;
class AuthAction_OrRuleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AuthAction_OrRule>
      _instance;
} _AuthAction_OrRule_default_instance_;
class AuthAction_X509RuleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AuthAction_X509Rule>
      _instance;
} _AuthAction_X509Rule_default_instance_;
class AuthAction_RuleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AuthAction_Rule>
      _instance;
  const ::envoy::api::v2::AuthAction_AndRule* and_rule_;
  const ::envoy::api::v2::AuthAction_OrRule* or_rule_;
  const ::envoy::api::v2::AuthAction_X509Rule* x509_rule_;
} _AuthAction_Rule_default_instance_;
class AuthActionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AuthAction>
      _instance;
} _AuthAction_default_instance_;
}  // namespace v2
}  // namespace api
}  // namespace envoy
namespace protobuf_api_2fauth_2eproto {
void InitDefaultsAuthAction_AndRuleImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_api_2fauth_2eproto::InitDefaultsAuthAction_X509Rule();
  {
    void* ptr = &::envoy::api::v2::_AuthAction_AndRule_default_instance_;
    new (ptr) ::envoy::api::v2::AuthAction_AndRule();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::envoy::api::v2::_AuthAction_OrRule_default_instance_;
    new (ptr) ::envoy::api::v2::AuthAction_OrRule();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::envoy::api::v2::_AuthAction_Rule_default_instance_;
    new (ptr) ::envoy::api::v2::AuthAction_Rule();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::AuthAction_AndRule::InitAsDefaultInstance();
  ::envoy::api::v2::AuthAction_OrRule::InitAsDefaultInstance();
  ::envoy::api::v2::AuthAction_Rule::InitAsDefaultInstance();
}

void InitDefaultsAuthAction_AndRule() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAuthAction_AndRuleImpl);
}

void InitDefaultsAuthAction_X509RuleImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_api_2fsds_2eproto::InitDefaultsCertificateValidationContext();
  {
    void* ptr = &::envoy::api::v2::_AuthAction_X509Rule_default_instance_;
    new (ptr) ::envoy::api::v2::AuthAction_X509Rule();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::AuthAction_X509Rule::InitAsDefaultInstance();
}

void InitDefaultsAuthAction_X509Rule() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAuthAction_X509RuleImpl);
}

void InitDefaultsAuthActionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_api_2fauth_2eproto::InitDefaultsAuthAction_AndRule();
  {
    void* ptr = &::envoy::api::v2::_AuthAction_default_instance_;
    new (ptr) ::envoy::api::v2::AuthAction();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::AuthAction::InitAsDefaultInstance();
}

void InitDefaultsAuthAction() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAuthActionImpl);
}

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::AuthAction_AndRule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::AuthAction_AndRule, rules_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::AuthAction_OrRule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::AuthAction_OrRule, rules_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::AuthAction_X509Rule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::AuthAction_X509Rule, validation_context_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::AuthAction_Rule, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::AuthAction_Rule, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::envoy::api::v2::AuthAction_RuleDefaultTypeInternal, and_rule_),
  offsetof(::envoy::api::v2::AuthAction_RuleDefaultTypeInternal, or_rule_),
  offsetof(::envoy::api::v2::AuthAction_RuleDefaultTypeInternal, x509_rule_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::AuthAction_Rule, rule_specifier_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::AuthAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::AuthAction, action_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::AuthAction, rule_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::envoy::api::v2::AuthAction_AndRule)},
  { 6, -1, sizeof(::envoy::api::v2::AuthAction_OrRule)},
  { 12, -1, sizeof(::envoy::api::v2::AuthAction_X509Rule)},
  { 18, -1, sizeof(::envoy::api::v2::AuthAction_Rule)},
  { 27, -1, sizeof(::envoy::api::v2::AuthAction)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::_AuthAction_AndRule_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::_AuthAction_OrRule_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::_AuthAction_X509Rule_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::_AuthAction_Rule_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::_AuthAction_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "api/auth.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016api/auth.proto\022\014envoy.api.v2\032\rapi/sds."
      "proto\"\230\004\n\nAuthAction\0228\n\013action_type\030\001 \001("
      "\0162#.envoy.api.v2.AuthAction.ActionType\022+"
      "\n\004rule\030\002 \003(\0132\035.envoy.api.v2.AuthAction.R"
      "ule\0327\n\007AndRule\022,\n\005rules\030\001 \003(\0132\035.envoy.ap"
      "i.v2.AuthAction.Rule\0326\n\006OrRule\022,\n\005rules\030"
      "\001 \003(\0132\035.envoy.api.v2.AuthAction.Rule\032R\n\010"
      "X509Rule\022F\n\022validation_context\030\003 \001(\0132*.e"
      "nvoy.api.v2.CertificateValidationContext"
      "\032\272\001\n\004Rule\0224\n\010and_rule\030\001 \001(\0132 .envoy.api."
      "v2.AuthAction.AndRuleH\000\0222\n\007or_rule\030\002 \001(\013"
      "2\037.envoy.api.v2.AuthAction.OrRuleH\000\0226\n\tx"
      "509_rule\030\003 \001(\0132!.envoy.api.v2.AuthAction"
      ".X509RuleH\000B\020\n\016rule_specifier\"!\n\nActionT"
      "ype\022\t\n\005ALLOW\020\000\022\010\n\004DENY\020\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 592);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "api/auth.proto", &protobuf_RegisterTypes);
  ::protobuf_api_2fsds_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_api_2fauth_2eproto
namespace envoy {
namespace api {
namespace v2 {
const ::google::protobuf::EnumDescriptor* AuthAction_ActionType_descriptor() {
  protobuf_api_2fauth_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fauth_2eproto::file_level_enum_descriptors[0];
}
bool AuthAction_ActionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AuthAction_ActionType AuthAction::ALLOW;
const AuthAction_ActionType AuthAction::DENY;
const AuthAction_ActionType AuthAction::ActionType_MIN;
const AuthAction_ActionType AuthAction::ActionType_MAX;
const int AuthAction::ActionType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void AuthAction_AndRule::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthAction_AndRule::kRulesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthAction_AndRule::AuthAction_AndRule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2fauth_2eproto::InitDefaultsAuthAction_AndRule();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.AuthAction.AndRule)
}
AuthAction_AndRule::AuthAction_AndRule(const AuthAction_AndRule& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      rules_(from.rules_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.AuthAction.AndRule)
}

void AuthAction_AndRule::SharedCtor() {
  _cached_size_ = 0;
}

AuthAction_AndRule::~AuthAction_AndRule() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.AuthAction.AndRule)
  SharedDtor();
}

void AuthAction_AndRule::SharedDtor() {
}

void AuthAction_AndRule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthAction_AndRule::descriptor() {
  ::protobuf_api_2fauth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2fauth_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AuthAction_AndRule& AuthAction_AndRule::default_instance() {
  ::protobuf_api_2fauth_2eproto::InitDefaultsAuthAction_AndRule();
  return *internal_default_instance();
}

AuthAction_AndRule* AuthAction_AndRule::New(::google::protobuf::Arena* arena) const {
  AuthAction_AndRule* n = new AuthAction_AndRule;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthAction_AndRule::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.AuthAction.AndRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rules_.Clear();
  _internal_metadata_.Clear();
}

bool AuthAction_AndRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.AuthAction.AndRule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .envoy.api.v2.AuthAction.Rule rules = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_rules()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.AuthAction.AndRule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.AuthAction.AndRule)
  return false;
#undef DO_
}

void AuthAction_AndRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.AuthAction.AndRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .envoy.api.v2.AuthAction.Rule rules = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rules_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rules(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.AuthAction.AndRule)
}

::google::protobuf::uint8* AuthAction_AndRule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.AuthAction.AndRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .envoy.api.v2.AuthAction.Rule rules = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rules_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->rules(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.AuthAction.AndRule)
  return target;
}

size_t AuthAction_AndRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.AuthAction.AndRule)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .envoy.api.v2.AuthAction.Rule rules = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->rules_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->rules(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthAction_AndRule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.AuthAction.AndRule)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthAction_AndRule* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthAction_AndRule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.AuthAction.AndRule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.AuthAction.AndRule)
    MergeFrom(*source);
  }
}

void AuthAction_AndRule::MergeFrom(const AuthAction_AndRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.AuthAction.AndRule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rules_.MergeFrom(from.rules_);
}

void AuthAction_AndRule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.AuthAction.AndRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthAction_AndRule::CopyFrom(const AuthAction_AndRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.AuthAction.AndRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthAction_AndRule::IsInitialized() const {
  return true;
}

void AuthAction_AndRule::Swap(AuthAction_AndRule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthAction_AndRule::InternalSwap(AuthAction_AndRule* other) {
  using std::swap;
  rules_.InternalSwap(&other->rules_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthAction_AndRule::GetMetadata() const {
  protobuf_api_2fauth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2fauth_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AuthAction_OrRule::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthAction_OrRule::kRulesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthAction_OrRule::AuthAction_OrRule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2fauth_2eproto::InitDefaultsAuthAction_AndRule();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.AuthAction.OrRule)
}
AuthAction_OrRule::AuthAction_OrRule(const AuthAction_OrRule& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      rules_(from.rules_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.AuthAction.OrRule)
}

void AuthAction_OrRule::SharedCtor() {
  _cached_size_ = 0;
}

AuthAction_OrRule::~AuthAction_OrRule() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.AuthAction.OrRule)
  SharedDtor();
}

void AuthAction_OrRule::SharedDtor() {
}

void AuthAction_OrRule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthAction_OrRule::descriptor() {
  ::protobuf_api_2fauth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2fauth_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AuthAction_OrRule& AuthAction_OrRule::default_instance() {
  ::protobuf_api_2fauth_2eproto::InitDefaultsAuthAction_AndRule();
  return *internal_default_instance();
}

AuthAction_OrRule* AuthAction_OrRule::New(::google::protobuf::Arena* arena) const {
  AuthAction_OrRule* n = new AuthAction_OrRule;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthAction_OrRule::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.AuthAction.OrRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rules_.Clear();
  _internal_metadata_.Clear();
}

bool AuthAction_OrRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.AuthAction.OrRule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .envoy.api.v2.AuthAction.Rule rules = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_rules()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.AuthAction.OrRule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.AuthAction.OrRule)
  return false;
#undef DO_
}

void AuthAction_OrRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.AuthAction.OrRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .envoy.api.v2.AuthAction.Rule rules = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rules_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rules(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.AuthAction.OrRule)
}

::google::protobuf::uint8* AuthAction_OrRule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.AuthAction.OrRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .envoy.api.v2.AuthAction.Rule rules = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rules_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->rules(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.AuthAction.OrRule)
  return target;
}

size_t AuthAction_OrRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.AuthAction.OrRule)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .envoy.api.v2.AuthAction.Rule rules = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->rules_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->rules(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthAction_OrRule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.AuthAction.OrRule)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthAction_OrRule* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthAction_OrRule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.AuthAction.OrRule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.AuthAction.OrRule)
    MergeFrom(*source);
  }
}

void AuthAction_OrRule::MergeFrom(const AuthAction_OrRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.AuthAction.OrRule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rules_.MergeFrom(from.rules_);
}

void AuthAction_OrRule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.AuthAction.OrRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthAction_OrRule::CopyFrom(const AuthAction_OrRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.AuthAction.OrRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthAction_OrRule::IsInitialized() const {
  return true;
}

void AuthAction_OrRule::Swap(AuthAction_OrRule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthAction_OrRule::InternalSwap(AuthAction_OrRule* other) {
  using std::swap;
  rules_.InternalSwap(&other->rules_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthAction_OrRule::GetMetadata() const {
  protobuf_api_2fauth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2fauth_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AuthAction_X509Rule::InitAsDefaultInstance() {
  ::envoy::api::v2::_AuthAction_X509Rule_default_instance_._instance.get_mutable()->validation_context_ = const_cast< ::envoy::api::v2::CertificateValidationContext*>(
      ::envoy::api::v2::CertificateValidationContext::internal_default_instance());
}
void AuthAction_X509Rule::clear_validation_context() {
  if (GetArenaNoVirtual() == NULL && validation_context_ != NULL) {
    delete validation_context_;
  }
  validation_context_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthAction_X509Rule::kValidationContextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthAction_X509Rule::AuthAction_X509Rule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2fauth_2eproto::InitDefaultsAuthAction_X509Rule();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.AuthAction.X509Rule)
}
AuthAction_X509Rule::AuthAction_X509Rule(const AuthAction_X509Rule& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_validation_context()) {
    validation_context_ = new ::envoy::api::v2::CertificateValidationContext(*from.validation_context_);
  } else {
    validation_context_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.AuthAction.X509Rule)
}

void AuthAction_X509Rule::SharedCtor() {
  validation_context_ = NULL;
  _cached_size_ = 0;
}

AuthAction_X509Rule::~AuthAction_X509Rule() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.AuthAction.X509Rule)
  SharedDtor();
}

void AuthAction_X509Rule::SharedDtor() {
  if (this != internal_default_instance()) delete validation_context_;
}

void AuthAction_X509Rule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthAction_X509Rule::descriptor() {
  ::protobuf_api_2fauth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2fauth_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AuthAction_X509Rule& AuthAction_X509Rule::default_instance() {
  ::protobuf_api_2fauth_2eproto::InitDefaultsAuthAction_X509Rule();
  return *internal_default_instance();
}

AuthAction_X509Rule* AuthAction_X509Rule::New(::google::protobuf::Arena* arena) const {
  AuthAction_X509Rule* n = new AuthAction_X509Rule;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthAction_X509Rule::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.AuthAction.X509Rule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && validation_context_ != NULL) {
    delete validation_context_;
  }
  validation_context_ = NULL;
  _internal_metadata_.Clear();
}

bool AuthAction_X509Rule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.AuthAction.X509Rule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.CertificateValidationContext validation_context = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_validation_context()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.AuthAction.X509Rule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.AuthAction.X509Rule)
  return false;
#undef DO_
}

void AuthAction_X509Rule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.AuthAction.X509Rule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.CertificateValidationContext validation_context = 3;
  if (this->has_validation_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->validation_context_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.AuthAction.X509Rule)
}

::google::protobuf::uint8* AuthAction_X509Rule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.AuthAction.X509Rule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.CertificateValidationContext validation_context = 3;
  if (this->has_validation_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->validation_context_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.AuthAction.X509Rule)
  return target;
}

size_t AuthAction_X509Rule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.AuthAction.X509Rule)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .envoy.api.v2.CertificateValidationContext validation_context = 3;
  if (this->has_validation_context()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->validation_context_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthAction_X509Rule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.AuthAction.X509Rule)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthAction_X509Rule* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthAction_X509Rule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.AuthAction.X509Rule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.AuthAction.X509Rule)
    MergeFrom(*source);
  }
}

void AuthAction_X509Rule::MergeFrom(const AuthAction_X509Rule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.AuthAction.X509Rule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_validation_context()) {
    mutable_validation_context()->::envoy::api::v2::CertificateValidationContext::MergeFrom(from.validation_context());
  }
}

void AuthAction_X509Rule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.AuthAction.X509Rule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthAction_X509Rule::CopyFrom(const AuthAction_X509Rule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.AuthAction.X509Rule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthAction_X509Rule::IsInitialized() const {
  return true;
}

void AuthAction_X509Rule::Swap(AuthAction_X509Rule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthAction_X509Rule::InternalSwap(AuthAction_X509Rule* other) {
  using std::swap;
  swap(validation_context_, other->validation_context_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthAction_X509Rule::GetMetadata() const {
  protobuf_api_2fauth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2fauth_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AuthAction_Rule::InitAsDefaultInstance() {
  ::envoy::api::v2::_AuthAction_Rule_default_instance_.and_rule_ = const_cast< ::envoy::api::v2::AuthAction_AndRule*>(
      ::envoy::api::v2::AuthAction_AndRule::internal_default_instance());
  ::envoy::api::v2::_AuthAction_Rule_default_instance_.or_rule_ = const_cast< ::envoy::api::v2::AuthAction_OrRule*>(
      ::envoy::api::v2::AuthAction_OrRule::internal_default_instance());
  ::envoy::api::v2::_AuthAction_Rule_default_instance_.x509_rule_ = const_cast< ::envoy::api::v2::AuthAction_X509Rule*>(
      ::envoy::api::v2::AuthAction_X509Rule::internal_default_instance());
}
void AuthAction_Rule::set_allocated_and_rule(::envoy::api::v2::AuthAction_AndRule* and_rule) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_rule_specifier();
  if (and_rule) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      and_rule = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, and_rule, submessage_arena);
    }
    set_has_and_rule();
    rule_specifier_.and_rule_ = and_rule;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.AuthAction.Rule.and_rule)
}
void AuthAction_Rule::set_allocated_or_rule(::envoy::api::v2::AuthAction_OrRule* or_rule) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_rule_specifier();
  if (or_rule) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      or_rule = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, or_rule, submessage_arena);
    }
    set_has_or_rule();
    rule_specifier_.or_rule_ = or_rule;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.AuthAction.Rule.or_rule)
}
void AuthAction_Rule::set_allocated_x509_rule(::envoy::api::v2::AuthAction_X509Rule* x509_rule) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_rule_specifier();
  if (x509_rule) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      x509_rule = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, x509_rule, submessage_arena);
    }
    set_has_x509_rule();
    rule_specifier_.x509_rule_ = x509_rule;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.AuthAction.Rule.x509_rule)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthAction_Rule::kAndRuleFieldNumber;
const int AuthAction_Rule::kOrRuleFieldNumber;
const int AuthAction_Rule::kX509RuleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthAction_Rule::AuthAction_Rule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2fauth_2eproto::InitDefaultsAuthAction_AndRule();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.AuthAction.Rule)
}
AuthAction_Rule::AuthAction_Rule(const AuthAction_Rule& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_rule_specifier();
  switch (from.rule_specifier_case()) {
    case kAndRule: {
      mutable_and_rule()->::envoy::api::v2::AuthAction_AndRule::MergeFrom(from.and_rule());
      break;
    }
    case kOrRule: {
      mutable_or_rule()->::envoy::api::v2::AuthAction_OrRule::MergeFrom(from.or_rule());
      break;
    }
    case kX509Rule: {
      mutable_x509_rule()->::envoy::api::v2::AuthAction_X509Rule::MergeFrom(from.x509_rule());
      break;
    }
    case RULE_SPECIFIER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.AuthAction.Rule)
}

void AuthAction_Rule::SharedCtor() {
  clear_has_rule_specifier();
  _cached_size_ = 0;
}

AuthAction_Rule::~AuthAction_Rule() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.AuthAction.Rule)
  SharedDtor();
}

void AuthAction_Rule::SharedDtor() {
  if (has_rule_specifier()) {
    clear_rule_specifier();
  }
}

void AuthAction_Rule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthAction_Rule::descriptor() {
  ::protobuf_api_2fauth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2fauth_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AuthAction_Rule& AuthAction_Rule::default_instance() {
  ::protobuf_api_2fauth_2eproto::InitDefaultsAuthAction_AndRule();
  return *internal_default_instance();
}

AuthAction_Rule* AuthAction_Rule::New(::google::protobuf::Arena* arena) const {
  AuthAction_Rule* n = new AuthAction_Rule;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthAction_Rule::clear_rule_specifier() {
// @@protoc_insertion_point(one_of_clear_start:envoy.api.v2.AuthAction.Rule)
  switch (rule_specifier_case()) {
    case kAndRule: {
      delete rule_specifier_.and_rule_;
      break;
    }
    case kOrRule: {
      delete rule_specifier_.or_rule_;
      break;
    }
    case kX509Rule: {
      delete rule_specifier_.x509_rule_;
      break;
    }
    case RULE_SPECIFIER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RULE_SPECIFIER_NOT_SET;
}


void AuthAction_Rule::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.AuthAction.Rule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_rule_specifier();
  _internal_metadata_.Clear();
}

bool AuthAction_Rule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.AuthAction.Rule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.AuthAction.AndRule and_rule = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_and_rule()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.AuthAction.OrRule or_rule = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_or_rule()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.AuthAction.X509Rule x509_rule = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_x509_rule()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.AuthAction.Rule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.AuthAction.Rule)
  return false;
#undef DO_
}

void AuthAction_Rule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.AuthAction.Rule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.AuthAction.AndRule and_rule = 1;
  if (has_and_rule()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *rule_specifier_.and_rule_, output);
  }

  // .envoy.api.v2.AuthAction.OrRule or_rule = 2;
  if (has_or_rule()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *rule_specifier_.or_rule_, output);
  }

  // .envoy.api.v2.AuthAction.X509Rule x509_rule = 3;
  if (has_x509_rule()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *rule_specifier_.x509_rule_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.AuthAction.Rule)
}

::google::protobuf::uint8* AuthAction_Rule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.AuthAction.Rule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.AuthAction.AndRule and_rule = 1;
  if (has_and_rule()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *rule_specifier_.and_rule_, deterministic, target);
  }

  // .envoy.api.v2.AuthAction.OrRule or_rule = 2;
  if (has_or_rule()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *rule_specifier_.or_rule_, deterministic, target);
  }

  // .envoy.api.v2.AuthAction.X509Rule x509_rule = 3;
  if (has_x509_rule()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *rule_specifier_.x509_rule_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.AuthAction.Rule)
  return target;
}

size_t AuthAction_Rule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.AuthAction.Rule)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (rule_specifier_case()) {
    // .envoy.api.v2.AuthAction.AndRule and_rule = 1;
    case kAndRule: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rule_specifier_.and_rule_);
      break;
    }
    // .envoy.api.v2.AuthAction.OrRule or_rule = 2;
    case kOrRule: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rule_specifier_.or_rule_);
      break;
    }
    // .envoy.api.v2.AuthAction.X509Rule x509_rule = 3;
    case kX509Rule: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rule_specifier_.x509_rule_);
      break;
    }
    case RULE_SPECIFIER_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthAction_Rule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.AuthAction.Rule)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthAction_Rule* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthAction_Rule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.AuthAction.Rule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.AuthAction.Rule)
    MergeFrom(*source);
  }
}

void AuthAction_Rule::MergeFrom(const AuthAction_Rule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.AuthAction.Rule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.rule_specifier_case()) {
    case kAndRule: {
      mutable_and_rule()->::envoy::api::v2::AuthAction_AndRule::MergeFrom(from.and_rule());
      break;
    }
    case kOrRule: {
      mutable_or_rule()->::envoy::api::v2::AuthAction_OrRule::MergeFrom(from.or_rule());
      break;
    }
    case kX509Rule: {
      mutable_x509_rule()->::envoy::api::v2::AuthAction_X509Rule::MergeFrom(from.x509_rule());
      break;
    }
    case RULE_SPECIFIER_NOT_SET: {
      break;
    }
  }
}

void AuthAction_Rule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.AuthAction.Rule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthAction_Rule::CopyFrom(const AuthAction_Rule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.AuthAction.Rule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthAction_Rule::IsInitialized() const {
  return true;
}

void AuthAction_Rule::Swap(AuthAction_Rule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthAction_Rule::InternalSwap(AuthAction_Rule* other) {
  using std::swap;
  swap(rule_specifier_, other->rule_specifier_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthAction_Rule::GetMetadata() const {
  protobuf_api_2fauth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2fauth_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AuthAction::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthAction::kActionTypeFieldNumber;
const int AuthAction::kRuleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthAction::AuthAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2fauth_2eproto::InitDefaultsAuthAction();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.AuthAction)
}
AuthAction::AuthAction(const AuthAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      rule_(from.rule_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  action_type_ = from.action_type_;
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.AuthAction)
}

void AuthAction::SharedCtor() {
  action_type_ = 0;
  _cached_size_ = 0;
}

AuthAction::~AuthAction() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.AuthAction)
  SharedDtor();
}

void AuthAction::SharedDtor() {
}

void AuthAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthAction::descriptor() {
  ::protobuf_api_2fauth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2fauth_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AuthAction& AuthAction::default_instance() {
  ::protobuf_api_2fauth_2eproto::InitDefaultsAuthAction();
  return *internal_default_instance();
}

AuthAction* AuthAction::New(::google::protobuf::Arena* arena) const {
  AuthAction* n = new AuthAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthAction::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.AuthAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rule_.Clear();
  action_type_ = 0;
  _internal_metadata_.Clear();
}

bool AuthAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.AuthAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.AuthAction.ActionType action_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_action_type(static_cast< ::envoy::api::v2::AuthAction_ActionType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .envoy.api.v2.AuthAction.Rule rule = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_rule()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.AuthAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.AuthAction)
  return false;
#undef DO_
}

void AuthAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.AuthAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.AuthAction.ActionType action_type = 1;
  if (this->action_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->action_type(), output);
  }

  // repeated .envoy.api.v2.AuthAction.Rule rule = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rule_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rule(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.AuthAction)
}

::google::protobuf::uint8* AuthAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.AuthAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.AuthAction.ActionType action_type = 1;
  if (this->action_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->action_type(), target);
  }

  // repeated .envoy.api.v2.AuthAction.Rule rule = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rule_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->rule(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.AuthAction)
  return target;
}

size_t AuthAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.AuthAction)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .envoy.api.v2.AuthAction.Rule rule = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->rule_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->rule(static_cast<int>(i)));
    }
  }

  // .envoy.api.v2.AuthAction.ActionType action_type = 1;
  if (this->action_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->action_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.AuthAction)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.AuthAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.AuthAction)
    MergeFrom(*source);
  }
}

void AuthAction::MergeFrom(const AuthAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.AuthAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rule_.MergeFrom(from.rule_);
  if (from.action_type() != 0) {
    set_action_type(from.action_type());
  }
}

void AuthAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.AuthAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthAction::CopyFrom(const AuthAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.AuthAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthAction::IsInitialized() const {
  return true;
}

void AuthAction::Swap(AuthAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthAction::InternalSwap(AuthAction* other) {
  using std::swap;
  rule_.InternalSwap(&other->rule_);
  swap(action_type_, other->action_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthAction::GetMetadata() const {
  protobuf_api_2fauth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2fauth_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v2
}  // namespace api
}  // namespace envoy

// @@protoc_insertion_point(global_scope)
