// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/address.proto

#include "api/address.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
namespace envoy {
namespace api {
namespace v2 {
class PipeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Pipe>
      _instance;
} _Pipe_default_instance_;
class SocketAddressDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SocketAddress>
      _instance;
  ::google::protobuf::uint32 port_value_;
  ::google::protobuf::internal::ArenaStringPtr named_port_;
} _SocketAddress_default_instance_;
class BindConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BindConfig>
      _instance;
} _BindConfig_default_instance_;
class AddressDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Address>
      _instance;
  const ::envoy::api::v2::SocketAddress* socket_address_;
  const ::envoy::api::v2::Pipe* pipe_;
} _Address_default_instance_;
class CidrRangeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CidrRange>
      _instance;
} _CidrRange_default_instance_;
}  // namespace v2
}  // namespace api
}  // namespace envoy
namespace protobuf_api_2faddress_2eproto {
void InitDefaultsPipeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  {
    void* ptr = &::envoy::api::v2::_Pipe_default_instance_;
    new (ptr) ::envoy::api::v2::Pipe();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::Pipe::InitAsDefaultInstance();
}

void InitDefaultsPipe() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPipeImpl);
}

void InitDefaultsSocketAddressImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  {
    void* ptr = &::envoy::api::v2::_SocketAddress_default_instance_;
    new (ptr) ::envoy::api::v2::SocketAddress();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::SocketAddress::InitAsDefaultInstance();
}

void InitDefaultsSocketAddress() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSocketAddressImpl);
}

void InitDefaultsBindConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  protobuf_api_2faddress_2eproto::InitDefaultsSocketAddress();
  {
    void* ptr = &::envoy::api::v2::_BindConfig_default_instance_;
    new (ptr) ::envoy::api::v2::BindConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::BindConfig::InitAsDefaultInstance();
}

void InitDefaultsBindConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBindConfigImpl);
}

void InitDefaultsAddressImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  protobuf_api_2faddress_2eproto::InitDefaultsSocketAddress();
  protobuf_api_2faddress_2eproto::InitDefaultsPipe();
  {
    void* ptr = &::envoy::api::v2::_Address_default_instance_;
    new (ptr) ::envoy::api::v2::Address();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::Address::InitAsDefaultInstance();
}

void InitDefaultsAddress() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAddressImpl);
}

void InitDefaultsCidrRangeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  protobuf_google_2fprotobuf_2fwrappers_2eproto::InitDefaultsUInt32Value();
  {
    void* ptr = &::envoy::api::v2::_CidrRange_default_instance_;
    new (ptr) ::envoy::api::v2::CidrRange();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::CidrRange::InitAsDefaultInstance();
}

void InitDefaultsCidrRange() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCidrRangeImpl);
}

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::Pipe, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::Pipe, path_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::SocketAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::SocketAddress, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::SocketAddress, protocol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::SocketAddress, address_),
  offsetof(::envoy::api::v2::SocketAddressDefaultTypeInternal, port_value_),
  offsetof(::envoy::api::v2::SocketAddressDefaultTypeInternal, named_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::SocketAddress, resolver_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::SocketAddress, port_specifier_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::BindConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::BindConfig, source_address_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::Address, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::Address, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::envoy::api::v2::AddressDefaultTypeInternal, socket_address_),
  offsetof(::envoy::api::v2::AddressDefaultTypeInternal, pipe_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::Address, address_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::CidrRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::CidrRange, address_prefix_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::CidrRange, prefix_len_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::envoy::api::v2::Pipe)},
  { 6, -1, sizeof(::envoy::api::v2::SocketAddress)},
  { 17, -1, sizeof(::envoy::api::v2::BindConfig)},
  { 23, -1, sizeof(::envoy::api::v2::Address)},
  { 31, -1, sizeof(::envoy::api::v2::CidrRange)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::_Pipe_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::_SocketAddress_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::_BindConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::_Address_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::_CidrRange_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "api/address.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021api/address.proto\022\014envoy.api.v2\032\036googl"
      "e/protobuf/wrappers.proto\"\024\n\004Pipe\022\014\n\004pat"
      "h\030\001 \001(\t\"\313\001\n\rSocketAddress\0226\n\010protocol\030\001 "
      "\001(\0162$.envoy.api.v2.SocketAddress.Protoco"
      "l\022\017\n\007address\030\002 \001(\t\022\024\n\nport_value\030\003 \001(\rH\000"
      "\022\024\n\nnamed_port\030\004 \001(\tH\000\022\025\n\rresolver_name\030"
      "\005 \001(\t\"\034\n\010Protocol\022\007\n\003TCP\020\000\022\007\n\003UDP\020\001B\020\n\016p"
      "ort_specifier\"A\n\nBindConfig\0223\n\016source_ad"
      "dress\030\001 \001(\0132\033.envoy.api.v2.SocketAddress"
      "\"o\n\007Address\0225\n\016socket_address\030\001 \001(\0132\033.en"
      "voy.api.v2.SocketAddressH\000\022\"\n\004pipe\030\002 \001(\013"
      "2\022.envoy.api.v2.PipeH\000B\t\n\007address\"U\n\tCid"
      "rRange\022\026\n\016address_prefix\030\001 \001(\t\0220\n\nprefix"
      "_len\030\002 \001(\0132\034.google.protobuf.UInt32Value"
      "b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 568);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "api/address.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2fwrappers_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_api_2faddress_2eproto
namespace envoy {
namespace api {
namespace v2 {
const ::google::protobuf::EnumDescriptor* SocketAddress_Protocol_descriptor() {
  protobuf_api_2faddress_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2faddress_2eproto::file_level_enum_descriptors[0];
}
bool SocketAddress_Protocol_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SocketAddress_Protocol SocketAddress::TCP;
const SocketAddress_Protocol SocketAddress::UDP;
const SocketAddress_Protocol SocketAddress::Protocol_MIN;
const SocketAddress_Protocol SocketAddress::Protocol_MAX;
const int SocketAddress::Protocol_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Pipe::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Pipe::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Pipe::Pipe()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2faddress_2eproto::InitDefaultsPipe();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.Pipe)
}
Pipe::Pipe(const Pipe& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.Pipe)
}

void Pipe::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Pipe::~Pipe() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.Pipe)
  SharedDtor();
}

void Pipe::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Pipe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pipe::descriptor() {
  ::protobuf_api_2faddress_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2faddress_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Pipe& Pipe::default_instance() {
  ::protobuf_api_2faddress_2eproto::InitDefaultsPipe();
  return *internal_default_instance();
}

Pipe* Pipe::New(::google::protobuf::Arena* arena) const {
  Pipe* n = new Pipe;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Pipe::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.Pipe)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool Pipe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.Pipe)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.Pipe.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.Pipe)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.Pipe)
  return false;
#undef DO_
}

void Pipe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.Pipe)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.Pipe.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.Pipe)
}

::google::protobuf::uint8* Pipe::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.Pipe)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.Pipe.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.Pipe)
  return target;
}

size_t Pipe::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.Pipe)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pipe::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.Pipe)
  GOOGLE_DCHECK_NE(&from, this);
  const Pipe* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Pipe>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.Pipe)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.Pipe)
    MergeFrom(*source);
  }
}

void Pipe::MergeFrom(const Pipe& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.Pipe)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
}

void Pipe::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.Pipe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pipe::CopyFrom(const Pipe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.Pipe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pipe::IsInitialized() const {
  return true;
}

void Pipe::Swap(Pipe* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Pipe::InternalSwap(Pipe* other) {
  using std::swap;
  path_.Swap(&other->path_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Pipe::GetMetadata() const {
  protobuf_api_2faddress_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2faddress_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SocketAddress::InitAsDefaultInstance() {
  ::envoy::api::v2::_SocketAddress_default_instance_.port_value_ = 0u;
  ::envoy::api::v2::_SocketAddress_default_instance_.named_port_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SocketAddress::kProtocolFieldNumber;
const int SocketAddress::kAddressFieldNumber;
const int SocketAddress::kPortValueFieldNumber;
const int SocketAddress::kNamedPortFieldNumber;
const int SocketAddress::kResolverNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SocketAddress::SocketAddress()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2faddress_2eproto::InitDefaultsSocketAddress();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.SocketAddress)
}
SocketAddress::SocketAddress(const SocketAddress& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  resolver_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.resolver_name().size() > 0) {
    resolver_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resolver_name_);
  }
  protocol_ = from.protocol_;
  clear_has_port_specifier();
  switch (from.port_specifier_case()) {
    case kPortValue: {
      set_port_value(from.port_value());
      break;
    }
    case kNamedPort: {
      set_named_port(from.named_port());
      break;
    }
    case PORT_SPECIFIER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.SocketAddress)
}

void SocketAddress::SharedCtor() {
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resolver_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  protocol_ = 0;
  clear_has_port_specifier();
  _cached_size_ = 0;
}

SocketAddress::~SocketAddress() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.SocketAddress)
  SharedDtor();
}

void SocketAddress::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resolver_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_port_specifier()) {
    clear_port_specifier();
  }
}

void SocketAddress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SocketAddress::descriptor() {
  ::protobuf_api_2faddress_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2faddress_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SocketAddress& SocketAddress::default_instance() {
  ::protobuf_api_2faddress_2eproto::InitDefaultsSocketAddress();
  return *internal_default_instance();
}

SocketAddress* SocketAddress::New(::google::protobuf::Arena* arena) const {
  SocketAddress* n = new SocketAddress;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SocketAddress::clear_port_specifier() {
// @@protoc_insertion_point(one_of_clear_start:envoy.api.v2.SocketAddress)
  switch (port_specifier_case()) {
    case kPortValue: {
      // No need to clear
      break;
    }
    case kNamedPort: {
      port_specifier_.named_port_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case PORT_SPECIFIER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PORT_SPECIFIER_NOT_SET;
}


void SocketAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.SocketAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resolver_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  protocol_ = 0;
  clear_port_specifier();
  _internal_metadata_.Clear();
}

bool SocketAddress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.SocketAddress)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.SocketAddress.Protocol protocol = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_protocol(static_cast< ::envoy::api::v2::SocketAddress_Protocol >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string address = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.SocketAddress.address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 port_value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          clear_port_specifier();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_specifier_.port_value_)));
          set_has_port_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string named_port = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_named_port()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->named_port().data(), static_cast<int>(this->named_port().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.SocketAddress.named_port"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string resolver_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resolver_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->resolver_name().data(), static_cast<int>(this->resolver_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.SocketAddress.resolver_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.SocketAddress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.SocketAddress)
  return false;
#undef DO_
}

void SocketAddress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.SocketAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.SocketAddress.Protocol protocol = 1;
  if (this->protocol() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protocol(), output);
  }

  // string address = 2;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.SocketAddress.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->address(), output);
  }

  // uint32 port_value = 3;
  if (has_port_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->port_value(), output);
  }

  // string named_port = 4;
  if (has_named_port()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->named_port().data(), static_cast<int>(this->named_port().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.SocketAddress.named_port");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->named_port(), output);
  }

  // string resolver_name = 5;
  if (this->resolver_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->resolver_name().data(), static_cast<int>(this->resolver_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.SocketAddress.resolver_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->resolver_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.SocketAddress)
}

::google::protobuf::uint8* SocketAddress::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.SocketAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.SocketAddress.Protocol protocol = 1;
  if (this->protocol() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protocol(), target);
  }

  // string address = 2;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.SocketAddress.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->address(), target);
  }

  // uint32 port_value = 3;
  if (has_port_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->port_value(), target);
  }

  // string named_port = 4;
  if (has_named_port()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->named_port().data(), static_cast<int>(this->named_port().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.SocketAddress.named_port");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->named_port(), target);
  }

  // string resolver_name = 5;
  if (this->resolver_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->resolver_name().data(), static_cast<int>(this->resolver_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.SocketAddress.resolver_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->resolver_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.SocketAddress)
  return target;
}

size_t SocketAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.SocketAddress)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string address = 2;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  // string resolver_name = 5;
  if (this->resolver_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->resolver_name());
  }

  // .envoy.api.v2.SocketAddress.Protocol protocol = 1;
  if (this->protocol() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->protocol());
  }

  switch (port_specifier_case()) {
    // uint32 port_value = 3;
    case kPortValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port_value());
      break;
    }
    // string named_port = 4;
    case kNamedPort: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->named_port());
      break;
    }
    case PORT_SPECIFIER_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SocketAddress::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.SocketAddress)
  GOOGLE_DCHECK_NE(&from, this);
  const SocketAddress* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SocketAddress>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.SocketAddress)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.SocketAddress)
    MergeFrom(*source);
  }
}

void SocketAddress::MergeFrom(const SocketAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.SocketAddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.resolver_name().size() > 0) {

    resolver_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resolver_name_);
  }
  if (from.protocol() != 0) {
    set_protocol(from.protocol());
  }
  switch (from.port_specifier_case()) {
    case kPortValue: {
      set_port_value(from.port_value());
      break;
    }
    case kNamedPort: {
      set_named_port(from.named_port());
      break;
    }
    case PORT_SPECIFIER_NOT_SET: {
      break;
    }
  }
}

void SocketAddress::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.SocketAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SocketAddress::CopyFrom(const SocketAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.SocketAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocketAddress::IsInitialized() const {
  return true;
}

void SocketAddress::Swap(SocketAddress* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SocketAddress::InternalSwap(SocketAddress* other) {
  using std::swap;
  address_.Swap(&other->address_);
  resolver_name_.Swap(&other->resolver_name_);
  swap(protocol_, other->protocol_);
  swap(port_specifier_, other->port_specifier_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SocketAddress::GetMetadata() const {
  protobuf_api_2faddress_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2faddress_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BindConfig::InitAsDefaultInstance() {
  ::envoy::api::v2::_BindConfig_default_instance_._instance.get_mutable()->source_address_ = const_cast< ::envoy::api::v2::SocketAddress*>(
      ::envoy::api::v2::SocketAddress::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BindConfig::kSourceAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BindConfig::BindConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2faddress_2eproto::InitDefaultsBindConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.BindConfig)
}
BindConfig::BindConfig(const BindConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_source_address()) {
    source_address_ = new ::envoy::api::v2::SocketAddress(*from.source_address_);
  } else {
    source_address_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.BindConfig)
}

void BindConfig::SharedCtor() {
  source_address_ = NULL;
  _cached_size_ = 0;
}

BindConfig::~BindConfig() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.BindConfig)
  SharedDtor();
}

void BindConfig::SharedDtor() {
  if (this != internal_default_instance()) delete source_address_;
}

void BindConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BindConfig::descriptor() {
  ::protobuf_api_2faddress_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2faddress_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BindConfig& BindConfig::default_instance() {
  ::protobuf_api_2faddress_2eproto::InitDefaultsBindConfig();
  return *internal_default_instance();
}

BindConfig* BindConfig::New(::google::protobuf::Arena* arena) const {
  BindConfig* n = new BindConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BindConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.BindConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && source_address_ != NULL) {
    delete source_address_;
  }
  source_address_ = NULL;
  _internal_metadata_.Clear();
}

bool BindConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.BindConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.SocketAddress source_address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_source_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.BindConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.BindConfig)
  return false;
#undef DO_
}

void BindConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.BindConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.SocketAddress source_address = 1;
  if (this->has_source_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->source_address_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.BindConfig)
}

::google::protobuf::uint8* BindConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.BindConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.SocketAddress source_address = 1;
  if (this->has_source_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->source_address_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.BindConfig)
  return target;
}

size_t BindConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.BindConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .envoy.api.v2.SocketAddress source_address = 1;
  if (this->has_source_address()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->source_address_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BindConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.BindConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const BindConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BindConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.BindConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.BindConfig)
    MergeFrom(*source);
  }
}

void BindConfig::MergeFrom(const BindConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.BindConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_source_address()) {
    mutable_source_address()->::envoy::api::v2::SocketAddress::MergeFrom(from.source_address());
  }
}

void BindConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.BindConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BindConfig::CopyFrom(const BindConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.BindConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BindConfig::IsInitialized() const {
  return true;
}

void BindConfig::Swap(BindConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BindConfig::InternalSwap(BindConfig* other) {
  using std::swap;
  swap(source_address_, other->source_address_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BindConfig::GetMetadata() const {
  protobuf_api_2faddress_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2faddress_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Address::InitAsDefaultInstance() {
  ::envoy::api::v2::_Address_default_instance_.socket_address_ = const_cast< ::envoy::api::v2::SocketAddress*>(
      ::envoy::api::v2::SocketAddress::internal_default_instance());
  ::envoy::api::v2::_Address_default_instance_.pipe_ = const_cast< ::envoy::api::v2::Pipe*>(
      ::envoy::api::v2::Pipe::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Address::kSocketAddressFieldNumber;
const int Address::kPipeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Address::Address()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2faddress_2eproto::InitDefaultsAddress();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.Address)
}
Address::Address(const Address& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_address();
  switch (from.address_case()) {
    case kSocketAddress: {
      mutable_socket_address()->::envoy::api::v2::SocketAddress::MergeFrom(from.socket_address());
      break;
    }
    case kPipe: {
      mutable_pipe()->::envoy::api::v2::Pipe::MergeFrom(from.pipe());
      break;
    }
    case ADDRESS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.Address)
}

void Address::SharedCtor() {
  clear_has_address();
  _cached_size_ = 0;
}

Address::~Address() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.Address)
  SharedDtor();
}

void Address::SharedDtor() {
  if (has_address()) {
    clear_address();
  }
}

void Address::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Address::descriptor() {
  ::protobuf_api_2faddress_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2faddress_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Address& Address::default_instance() {
  ::protobuf_api_2faddress_2eproto::InitDefaultsAddress();
  return *internal_default_instance();
}

Address* Address::New(::google::protobuf::Arena* arena) const {
  Address* n = new Address;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Address::clear_address() {
// @@protoc_insertion_point(one_of_clear_start:envoy.api.v2.Address)
  switch (address_case()) {
    case kSocketAddress: {
      delete address_.socket_address_;
      break;
    }
    case kPipe: {
      delete address_.pipe_;
      break;
    }
    case ADDRESS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ADDRESS_NOT_SET;
}


void Address::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.Address)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_address();
  _internal_metadata_.Clear();
}

bool Address::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.Address)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.SocketAddress socket_address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_socket_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.Pipe pipe = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pipe()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.Address)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.Address)
  return false;
#undef DO_
}

void Address::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.Address)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.SocketAddress socket_address = 1;
  if (has_socket_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *address_.socket_address_, output);
  }

  // .envoy.api.v2.Pipe pipe = 2;
  if (has_pipe()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *address_.pipe_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.Address)
}

::google::protobuf::uint8* Address::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.Address)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.SocketAddress socket_address = 1;
  if (has_socket_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *address_.socket_address_, deterministic, target);
  }

  // .envoy.api.v2.Pipe pipe = 2;
  if (has_pipe()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *address_.pipe_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.Address)
  return target;
}

size_t Address::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.Address)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (address_case()) {
    // .envoy.api.v2.SocketAddress socket_address = 1;
    case kSocketAddress: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *address_.socket_address_);
      break;
    }
    // .envoy.api.v2.Pipe pipe = 2;
    case kPipe: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *address_.pipe_);
      break;
    }
    case ADDRESS_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Address::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.Address)
  GOOGLE_DCHECK_NE(&from, this);
  const Address* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Address>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.Address)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.Address)
    MergeFrom(*source);
  }
}

void Address::MergeFrom(const Address& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.Address)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.address_case()) {
    case kSocketAddress: {
      mutable_socket_address()->::envoy::api::v2::SocketAddress::MergeFrom(from.socket_address());
      break;
    }
    case kPipe: {
      mutable_pipe()->::envoy::api::v2::Pipe::MergeFrom(from.pipe());
      break;
    }
    case ADDRESS_NOT_SET: {
      break;
    }
  }
}

void Address::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.Address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Address::CopyFrom(const Address& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.Address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Address::IsInitialized() const {
  return true;
}

void Address::Swap(Address* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Address::InternalSwap(Address* other) {
  using std::swap;
  swap(address_, other->address_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Address::GetMetadata() const {
  protobuf_api_2faddress_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2faddress_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CidrRange::InitAsDefaultInstance() {
  ::envoy::api::v2::_CidrRange_default_instance_._instance.get_mutable()->prefix_len_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CidrRange::kAddressPrefixFieldNumber;
const int CidrRange::kPrefixLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CidrRange::CidrRange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2faddress_2eproto::InitDefaultsCidrRange();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.CidrRange)
}
CidrRange::CidrRange(const CidrRange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.address_prefix().size() > 0) {
    address_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_prefix_);
  }
  if (from.has_prefix_len()) {
    prefix_len_ = new ::google::protobuf::UInt32Value(*from.prefix_len_);
  } else {
    prefix_len_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.CidrRange)
}

void CidrRange::SharedCtor() {
  address_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prefix_len_ = NULL;
  _cached_size_ = 0;
}

CidrRange::~CidrRange() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.CidrRange)
  SharedDtor();
}

void CidrRange::SharedDtor() {
  address_prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete prefix_len_;
}

void CidrRange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CidrRange::descriptor() {
  ::protobuf_api_2faddress_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2faddress_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CidrRange& CidrRange::default_instance() {
  ::protobuf_api_2faddress_2eproto::InitDefaultsCidrRange();
  return *internal_default_instance();
}

CidrRange* CidrRange::New(::google::protobuf::Arena* arena) const {
  CidrRange* n = new CidrRange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CidrRange::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.CidrRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && prefix_len_ != NULL) {
    delete prefix_len_;
  }
  prefix_len_ = NULL;
  _internal_metadata_.Clear();
}

bool CidrRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.CidrRange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string address_prefix = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address_prefix()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address_prefix().data(), static_cast<int>(this->address_prefix().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.CidrRange.address_prefix"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.UInt32Value prefix_len = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prefix_len()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.CidrRange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.CidrRange)
  return false;
#undef DO_
}

void CidrRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.CidrRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address_prefix = 1;
  if (this->address_prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address_prefix().data(), static_cast<int>(this->address_prefix().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.CidrRange.address_prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->address_prefix(), output);
  }

  // .google.protobuf.UInt32Value prefix_len = 2;
  if (this->has_prefix_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->prefix_len_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.CidrRange)
}

::google::protobuf::uint8* CidrRange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.CidrRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address_prefix = 1;
  if (this->address_prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address_prefix().data(), static_cast<int>(this->address_prefix().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.CidrRange.address_prefix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->address_prefix(), target);
  }

  // .google.protobuf.UInt32Value prefix_len = 2;
  if (this->has_prefix_len()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->prefix_len_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.CidrRange)
  return target;
}

size_t CidrRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.CidrRange)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string address_prefix = 1;
  if (this->address_prefix().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address_prefix());
  }

  // .google.protobuf.UInt32Value prefix_len = 2;
  if (this->has_prefix_len()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->prefix_len_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CidrRange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.CidrRange)
  GOOGLE_DCHECK_NE(&from, this);
  const CidrRange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CidrRange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.CidrRange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.CidrRange)
    MergeFrom(*source);
  }
}

void CidrRange::MergeFrom(const CidrRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.CidrRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address_prefix().size() > 0) {

    address_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_prefix_);
  }
  if (from.has_prefix_len()) {
    mutable_prefix_len()->::google::protobuf::UInt32Value::MergeFrom(from.prefix_len());
  }
}

void CidrRange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.CidrRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CidrRange::CopyFrom(const CidrRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.CidrRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CidrRange::IsInitialized() const {
  return true;
}

void CidrRange::Swap(CidrRange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CidrRange::InternalSwap(CidrRange* other) {
  using std::swap;
  address_prefix_.Swap(&other->address_prefix_);
  swap(prefix_len_, other->prefix_len_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CidrRange::GetMetadata() const {
  protobuf_api_2faddress_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2faddress_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v2
}  // namespace api
}  // namespace envoy

// @@protoc_insertion_point(global_scope)
