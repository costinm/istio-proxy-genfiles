// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/sds.proto

#include "api/sds.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace envoy {
namespace api {
namespace v2 {
class DataSourceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DataSource>
      _instance;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::google::protobuf::internal::ArenaStringPtr inline__;
} _DataSource_default_instance_;
class TlsParametersDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TlsParameters>
      _instance;
} _TlsParameters_default_instance_;
class TlsCertificateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TlsCertificate>
      _instance;
} _TlsCertificate_default_instance_;
class TlsSessionTicketKeysDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TlsSessionTicketKeys>
      _instance;
} _TlsSessionTicketKeys_default_instance_;
class CertificateValidationContextDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CertificateValidationContext>
      _instance;
} _CertificateValidationContext_default_instance_;
class CommonTlsContext_DeprecatedV1DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CommonTlsContext_DeprecatedV1>
      _instance;
} _CommonTlsContext_DeprecatedV1_default_instance_;
class CommonTlsContextDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CommonTlsContext>
      _instance;
} _CommonTlsContext_default_instance_;
class UpstreamTlsContextDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpstreamTlsContext>
      _instance;
} _UpstreamTlsContext_default_instance_;
class DownstreamTlsContextDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DownstreamTlsContext>
      _instance;
  const ::envoy::api::v2::TlsSessionTicketKeys* session_ticket_keys_;
  const ::envoy::api::v2::SdsSecretConfig* session_ticket_keys_sds_secret_config_;
} _DownstreamTlsContext_default_instance_;
class SdsSecretConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SdsSecretConfig>
      _instance;
} _SdsSecretConfig_default_instance_;
class SecretDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Secret>
      _instance;
  const ::envoy::api::v2::TlsCertificate* tls_certificate_;
  const ::envoy::api::v2::TlsSessionTicketKeys* session_ticket_keys_;
} _Secret_default_instance_;
}  // namespace v2
}  // namespace api
}  // namespace envoy
namespace protobuf_api_2fsds_2eproto {
void InitDefaultsDataSourceImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::envoy::api::v2::_DataSource_default_instance_;
    new (ptr) ::envoy::api::v2::DataSource();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::DataSource::InitAsDefaultInstance();
}

void InitDefaultsDataSource() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDataSourceImpl);
}

void InitDefaultsTlsParametersImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::envoy::api::v2::_TlsParameters_default_instance_;
    new (ptr) ::envoy::api::v2::TlsParameters();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::TlsParameters::InitAsDefaultInstance();
}

void InitDefaultsTlsParameters() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTlsParametersImpl);
}

void InitDefaultsTlsCertificateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_api_2fsds_2eproto::InitDefaultsDataSource();
  {
    void* ptr = &::envoy::api::v2::_TlsCertificate_default_instance_;
    new (ptr) ::envoy::api::v2::TlsCertificate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::TlsCertificate::InitAsDefaultInstance();
}

void InitDefaultsTlsCertificate() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTlsCertificateImpl);
}

void InitDefaultsTlsSessionTicketKeysImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_api_2fsds_2eproto::InitDefaultsDataSource();
  {
    void* ptr = &::envoy::api::v2::_TlsSessionTicketKeys_default_instance_;
    new (ptr) ::envoy::api::v2::TlsSessionTicketKeys();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::TlsSessionTicketKeys::InitAsDefaultInstance();
}

void InitDefaultsTlsSessionTicketKeys() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTlsSessionTicketKeysImpl);
}

void InitDefaultsCertificateValidationContextImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_api_2fsds_2eproto::InitDefaultsDataSource();
  protobuf_google_2fprotobuf_2fwrappers_2eproto::InitDefaultsBoolValue();
  {
    void* ptr = &::envoy::api::v2::_CertificateValidationContext_default_instance_;
    new (ptr) ::envoy::api::v2::CertificateValidationContext();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::CertificateValidationContext::InitAsDefaultInstance();
}

void InitDefaultsCertificateValidationContext() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCertificateValidationContextImpl);
}

void InitDefaultsCommonTlsContext_DeprecatedV1Impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::envoy::api::v2::_CommonTlsContext_DeprecatedV1_default_instance_;
    new (ptr) ::envoy::api::v2::CommonTlsContext_DeprecatedV1();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::CommonTlsContext_DeprecatedV1::InitAsDefaultInstance();
}

void InitDefaultsCommonTlsContext_DeprecatedV1() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCommonTlsContext_DeprecatedV1Impl);
}

void InitDefaultsCommonTlsContextImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_api_2fsds_2eproto::InitDefaultsTlsParameters();
  protobuf_api_2fsds_2eproto::InitDefaultsTlsCertificate();
  protobuf_api_2fsds_2eproto::InitDefaultsSdsSecretConfig();
  protobuf_api_2fsds_2eproto::InitDefaultsCertificateValidationContext();
  protobuf_api_2fsds_2eproto::InitDefaultsCommonTlsContext_DeprecatedV1();
  {
    void* ptr = &::envoy::api::v2::_CommonTlsContext_default_instance_;
    new (ptr) ::envoy::api::v2::CommonTlsContext();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::CommonTlsContext::InitAsDefaultInstance();
}

void InitDefaultsCommonTlsContext() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCommonTlsContextImpl);
}

void InitDefaultsUpstreamTlsContextImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_api_2fsds_2eproto::InitDefaultsCommonTlsContext();
  {
    void* ptr = &::envoy::api::v2::_UpstreamTlsContext_default_instance_;
    new (ptr) ::envoy::api::v2::UpstreamTlsContext();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::UpstreamTlsContext::InitAsDefaultInstance();
}

void InitDefaultsUpstreamTlsContext() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUpstreamTlsContextImpl);
}

void InitDefaultsDownstreamTlsContextImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_api_2fsds_2eproto::InitDefaultsCommonTlsContext();
  protobuf_google_2fprotobuf_2fwrappers_2eproto::InitDefaultsBoolValue();
  protobuf_api_2fsds_2eproto::InitDefaultsTlsSessionTicketKeys();
  protobuf_api_2fsds_2eproto::InitDefaultsSdsSecretConfig();
  {
    void* ptr = &::envoy::api::v2::_DownstreamTlsContext_default_instance_;
    new (ptr) ::envoy::api::v2::DownstreamTlsContext();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::DownstreamTlsContext::InitAsDefaultInstance();
}

void InitDefaultsDownstreamTlsContext() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDownstreamTlsContextImpl);
}

void InitDefaultsSdsSecretConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_api_2fbase_2eproto::InitDefaultsConfigSource();
  {
    void* ptr = &::envoy::api::v2::_SdsSecretConfig_default_instance_;
    new (ptr) ::envoy::api::v2::SdsSecretConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::SdsSecretConfig::InitAsDefaultInstance();
}

void InitDefaultsSdsSecretConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSdsSecretConfigImpl);
}

void InitDefaultsSecretImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_api_2fsds_2eproto::InitDefaultsTlsCertificate();
  protobuf_api_2fsds_2eproto::InitDefaultsTlsSessionTicketKeys();
  {
    void* ptr = &::envoy::api::v2::_Secret_default_instance_;
    new (ptr) ::envoy::api::v2::Secret();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::Secret::InitAsDefaultInstance();
}

void InitDefaultsSecret() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSecretImpl);
}

::google::protobuf::Metadata file_level_metadata[11];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::DataSource, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::DataSource, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::envoy::api::v2::DataSourceDefaultTypeInternal, filename_),
  offsetof(::envoy::api::v2::DataSourceDefaultTypeInternal, inline__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::DataSource, specifier_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::TlsParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::TlsParameters, tls_minimum_protocol_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::TlsParameters, tls_maximum_protocol_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::TlsParameters, cipher_suites_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::TlsParameters, ecdh_curves_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::TlsCertificate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::TlsCertificate, certificate_chain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::TlsCertificate, private_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::TlsCertificate, password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::TlsCertificate, ocsp_staple_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::TlsCertificate, signed_certificate_timestamp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::TlsSessionTicketKeys, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::TlsSessionTicketKeys, keys_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::CertificateValidationContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::CertificateValidationContext, trusted_ca_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::CertificateValidationContext, verify_certificate_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::CertificateValidationContext, verify_spki_sha256_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::CertificateValidationContext, verify_subject_alt_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::CertificateValidationContext, require_ocsp_staple_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::CertificateValidationContext, require_signed_certificate_timestamp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::CommonTlsContext_DeprecatedV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::CommonTlsContext_DeprecatedV1, alt_alpn_protocols_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::CommonTlsContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::CommonTlsContext, tls_params_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::CommonTlsContext, tls_certificates_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::CommonTlsContext, tls_certificate_sds_secret_configs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::CommonTlsContext, validation_context_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::CommonTlsContext, alpn_protocols_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::CommonTlsContext, deprecated_v1_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::UpstreamTlsContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::UpstreamTlsContext, common_tls_context_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::UpstreamTlsContext, sni_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::DownstreamTlsContext, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::DownstreamTlsContext, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::DownstreamTlsContext, common_tls_context_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::DownstreamTlsContext, require_client_certificate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::DownstreamTlsContext, require_sni_),
  offsetof(::envoy::api::v2::DownstreamTlsContextDefaultTypeInternal, session_ticket_keys_),
  offsetof(::envoy::api::v2::DownstreamTlsContextDefaultTypeInternal, session_ticket_keys_sds_secret_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::DownstreamTlsContext, session_ticket_keys_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::SdsSecretConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::SdsSecretConfig, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::SdsSecretConfig, sds_config_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::Secret, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::Secret, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::Secret, name_),
  offsetof(::envoy::api::v2::SecretDefaultTypeInternal, tls_certificate_),
  offsetof(::envoy::api::v2::SecretDefaultTypeInternal, session_ticket_keys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::Secret, type_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::envoy::api::v2::DataSource)},
  { 8, -1, sizeof(::envoy::api::v2::TlsParameters)},
  { 17, -1, sizeof(::envoy::api::v2::TlsCertificate)},
  { 27, -1, sizeof(::envoy::api::v2::TlsSessionTicketKeys)},
  { 33, -1, sizeof(::envoy::api::v2::CertificateValidationContext)},
  { 44, -1, sizeof(::envoy::api::v2::CommonTlsContext_DeprecatedV1)},
  { 50, -1, sizeof(::envoy::api::v2::CommonTlsContext)},
  { 61, -1, sizeof(::envoy::api::v2::UpstreamTlsContext)},
  { 68, -1, sizeof(::envoy::api::v2::DownstreamTlsContext)},
  { 79, -1, sizeof(::envoy::api::v2::SdsSecretConfig)},
  { 86, -1, sizeof(::envoy::api::v2::Secret)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::_DataSource_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::_TlsParameters_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::_TlsCertificate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::_TlsSessionTicketKeys_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::_CertificateValidationContext_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::_CommonTlsContext_DeprecatedV1_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::_CommonTlsContext_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::_UpstreamTlsContext_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::_DownstreamTlsContext_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::_SdsSecretConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::_Secret_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "api/sds.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 11);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rapi/sds.proto\022\014envoy.api.v2\032\016api/base."
      "proto\032\023api/discovery.proto\032\034google/api/a"
      "nnotations.proto\032\036google/protobuf/wrappe"
      "rs.proto\"\?\n\nDataSource\022\022\n\010filename\030\001 \001(\t"
      "H\000\022\020\n\006inline\030\002 \001(\014H\000B\013\n\tspecifier\"\252\002\n\rTl"
      "sParameters\022M\n\034tls_minimum_protocol_vers"
      "ion\030\001 \001(\0162\'.envoy.api.v2.TlsParameters.T"
      "lsProtocol\022M\n\034tls_maximum_protocol_versi"
      "on\030\002 \001(\0162\'.envoy.api.v2.TlsParameters.Tl"
      "sProtocol\022\025\n\rcipher_suites\030\003 \003(\t\022\023\n\013ecdh"
      "_curves\030\004 \003(\t\"O\n\013TlsProtocol\022\014\n\010TLS_AUTO"
      "\020\000\022\013\n\007TLSv1_0\020\001\022\013\n\007TLSv1_1\020\002\022\013\n\007TLSv1_2\020"
      "\003\022\013\n\007TLSv1_3\020\004\"\217\002\n\016TlsCertificate\0223\n\021cer"
      "tificate_chain\030\001 \001(\0132\030.envoy.api.v2.Data"
      "Source\022-\n\013private_key\030\002 \001(\0132\030.envoy.api."
      "v2.DataSource\022*\n\010password\030\003 \001(\0132\030.envoy."
      "api.v2.DataSource\022-\n\013ocsp_staple\030\004 \001(\0132\030"
      ".envoy.api.v2.DataSource\022>\n\034signed_certi"
      "ficate_timestamp\030\005 \003(\0132\030.envoy.api.v2.Da"
      "taSource\">\n\024TlsSessionTicketKeys\022&\n\004keys"
      "\030\001 \003(\0132\030.envoy.api.v2.DataSource\"\255\002\n\034Cer"
      "tificateValidationContext\022,\n\ntrusted_ca\030"
      "\001 \001(\0132\030.envoy.api.v2.DataSource\022\037\n\027verif"
      "y_certificate_hash\030\002 \003(\t\022\032\n\022verify_spki_"
      "sha256\030\003 \003(\t\022\037\n\027verify_subject_alt_name\030"
      "\004 \003(\t\0227\n\023require_ocsp_staple\030\005 \001(\0132\032.goo"
      "gle.protobuf.BoolValue\022H\n$require_signed"
      "_certificate_timestamp\030\006 \001(\0132\032.google.pr"
      "otobuf.BoolValue\"\226\003\n\020CommonTlsContext\022/\n"
      "\ntls_params\030\001 \001(\0132\033.envoy.api.v2.TlsPara"
      "meters\0226\n\020tls_certificates\030\002 \003(\0132\034.envoy"
      ".api.v2.TlsCertificate\022I\n\"tls_certificat"
      "e_sds_secret_configs\030\006 \003(\0132\035.envoy.api.v"
      "2.SdsSecretConfig\022F\n\022validation_context\030"
      "\003 \001(\0132*.envoy.api.v2.CertificateValidati"
      "onContext\022\026\n\016alpn_protocols\030\004 \003(\t\022B\n\rdep"
      "recated_v1\030\005 \001(\0132+.envoy.api.v2.CommonTl"
      "sContext.DeprecatedV1\032*\n\014DeprecatedV1\022\032\n"
      "\022alt_alpn_protocols\030\001 \001(\t\"]\n\022UpstreamTls"
      "Context\022:\n\022common_tls_context\030\001 \001(\0132\036.en"
      "voy.api.v2.CommonTlsContext\022\013\n\003sni\030\002 \001(\t"
      "\"\362\002\n\024DownstreamTlsContext\022:\n\022common_tls_"
      "context\030\001 \001(\0132\036.envoy.api.v2.CommonTlsCo"
      "ntext\022>\n\032require_client_certificate\030\002 \001("
      "\0132\032.google.protobuf.BoolValue\022/\n\013require"
      "_sni\030\003 \001(\0132\032.google.protobuf.BoolValue\022A"
      "\n\023session_ticket_keys\030\004 \001(\0132\".envoy.api."
      "v2.TlsSessionTicketKeysH\000\022N\n%session_tic"
      "ket_keys_sds_secret_config\030\005 \001(\0132\035.envoy"
      ".api.v2.SdsSecretConfigH\000B\032\n\030session_tic"
      "ket_keys_type\"O\n\017SdsSecretConfig\022\014\n\004name"
      "\030\001 \001(\t\022.\n\nsds_config\030\002 \001(\0132\032.envoy.api.v"
      "2.ConfigSource\"\232\001\n\006Secret\022\014\n\004name\030\001 \001(\t\022"
      "7\n\017tls_certificate\030\002 \001(\0132\034.envoy.api.v2."
      "TlsCertificateH\000\022A\n\023session_ticket_keys\030"
      "\003 \001(\0132\".envoy.api.v2.TlsSessionTicketKey"
      "sH\000B\006\n\004type2\343\001\n\026SecretDiscoveryService\022V"
      "\n\rStreamSecrets\022\036.envoy.api.v2.Discovery"
      "Request\032\037.envoy.api.v2.DiscoveryResponse"
      "\"\000(\0010\001\022q\n\014FetchSecrets\022\036.envoy.api.v2.Di"
      "scoveryRequest\032\037.envoy.api.v2.DiscoveryR"
      "esponse\" \202\323\344\223\002\032\"\025/v2/discovery:secrets:\001"
      "*b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2489);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "api/sds.proto", &protobuf_RegisterTypes);
  ::protobuf_api_2fbase_2eproto::AddDescriptors();
  ::protobuf_api_2fdiscovery_2eproto::AddDescriptors();
  ::protobuf_google_2fapi_2fannotations_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2fwrappers_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_api_2fsds_2eproto
namespace envoy {
namespace api {
namespace v2 {
const ::google::protobuf::EnumDescriptor* TlsParameters_TlsProtocol_descriptor() {
  protobuf_api_2fsds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fsds_2eproto::file_level_enum_descriptors[0];
}
bool TlsParameters_TlsProtocol_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TlsParameters_TlsProtocol TlsParameters::TLS_AUTO;
const TlsParameters_TlsProtocol TlsParameters::TLSv1_0;
const TlsParameters_TlsProtocol TlsParameters::TLSv1_1;
const TlsParameters_TlsProtocol TlsParameters::TLSv1_2;
const TlsParameters_TlsProtocol TlsParameters::TLSv1_3;
const TlsParameters_TlsProtocol TlsParameters::TlsProtocol_MIN;
const TlsParameters_TlsProtocol TlsParameters::TlsProtocol_MAX;
const int TlsParameters::TlsProtocol_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void DataSource::InitAsDefaultInstance() {
  ::envoy::api::v2::_DataSource_default_instance_.filename_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::envoy::api::v2::_DataSource_default_instance_.inline__.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataSource::kFilenameFieldNumber;
const int DataSource::kInlineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataSource::DataSource()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2fsds_2eproto::InitDefaultsDataSource();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.DataSource)
}
DataSource::DataSource(const DataSource& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_specifier();
  switch (from.specifier_case()) {
    case kFilename: {
      set_filename(from.filename());
      break;
    }
    case kInline: {
      set_inline_(from.inline_());
      break;
    }
    case SPECIFIER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.DataSource)
}

void DataSource::SharedCtor() {
  clear_has_specifier();
  _cached_size_ = 0;
}

DataSource::~DataSource() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.DataSource)
  SharedDtor();
}

void DataSource::SharedDtor() {
  if (has_specifier()) {
    clear_specifier();
  }
}

void DataSource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataSource::descriptor() {
  ::protobuf_api_2fsds_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2fsds_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DataSource& DataSource::default_instance() {
  ::protobuf_api_2fsds_2eproto::InitDefaultsDataSource();
  return *internal_default_instance();
}

DataSource* DataSource::New(::google::protobuf::Arena* arena) const {
  DataSource* n = new DataSource;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DataSource::clear_specifier() {
// @@protoc_insertion_point(one_of_clear_start:envoy.api.v2.DataSource)
  switch (specifier_case()) {
    case kFilename: {
      specifier_.filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kInline: {
      specifier_.inline__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case SPECIFIER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SPECIFIER_NOT_SET;
}


void DataSource::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.DataSource)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_specifier();
  _internal_metadata_.Clear();
}

bool DataSource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.DataSource)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string filename = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filename().data(), static_cast<int>(this->filename().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.DataSource.filename"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes inline = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_inline_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.DataSource)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.DataSource)
  return false;
#undef DO_
}

void DataSource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.DataSource)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.DataSource.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename(), output);
  }

  // bytes inline = 2;
  if (has_inline_()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->inline_(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.DataSource)
}

::google::protobuf::uint8* DataSource::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.DataSource)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.DataSource.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  // bytes inline = 2;
  if (has_inline_()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->inline_(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.DataSource)
  return target;
}

size_t DataSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.DataSource)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (specifier_case()) {
    // string filename = 1;
    case kFilename: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
      break;
    }
    // bytes inline = 2;
    case kInline: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->inline_());
      break;
    }
    case SPECIFIER_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataSource::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.DataSource)
  GOOGLE_DCHECK_NE(&from, this);
  const DataSource* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DataSource>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.DataSource)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.DataSource)
    MergeFrom(*source);
  }
}

void DataSource::MergeFrom(const DataSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.DataSource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.specifier_case()) {
    case kFilename: {
      set_filename(from.filename());
      break;
    }
    case kInline: {
      set_inline_(from.inline_());
      break;
    }
    case SPECIFIER_NOT_SET: {
      break;
    }
  }
}

void DataSource::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.DataSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataSource::CopyFrom(const DataSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.DataSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataSource::IsInitialized() const {
  return true;
}

void DataSource::Swap(DataSource* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataSource::InternalSwap(DataSource* other) {
  using std::swap;
  swap(specifier_, other->specifier_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DataSource::GetMetadata() const {
  protobuf_api_2fsds_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2fsds_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TlsParameters::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TlsParameters::kTlsMinimumProtocolVersionFieldNumber;
const int TlsParameters::kTlsMaximumProtocolVersionFieldNumber;
const int TlsParameters::kCipherSuitesFieldNumber;
const int TlsParameters::kEcdhCurvesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TlsParameters::TlsParameters()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2fsds_2eproto::InitDefaultsTlsParameters();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.TlsParameters)
}
TlsParameters::TlsParameters(const TlsParameters& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      cipher_suites_(from.cipher_suites_),
      ecdh_curves_(from.ecdh_curves_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tls_minimum_protocol_version_, &from.tls_minimum_protocol_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&tls_maximum_protocol_version_) -
    reinterpret_cast<char*>(&tls_minimum_protocol_version_)) + sizeof(tls_maximum_protocol_version_));
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.TlsParameters)
}

void TlsParameters::SharedCtor() {
  ::memset(&tls_minimum_protocol_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tls_maximum_protocol_version_) -
      reinterpret_cast<char*>(&tls_minimum_protocol_version_)) + sizeof(tls_maximum_protocol_version_));
  _cached_size_ = 0;
}

TlsParameters::~TlsParameters() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.TlsParameters)
  SharedDtor();
}

void TlsParameters::SharedDtor() {
}

void TlsParameters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TlsParameters::descriptor() {
  ::protobuf_api_2fsds_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2fsds_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TlsParameters& TlsParameters::default_instance() {
  ::protobuf_api_2fsds_2eproto::InitDefaultsTlsParameters();
  return *internal_default_instance();
}

TlsParameters* TlsParameters::New(::google::protobuf::Arena* arena) const {
  TlsParameters* n = new TlsParameters;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TlsParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.TlsParameters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cipher_suites_.Clear();
  ecdh_curves_.Clear();
  ::memset(&tls_minimum_protocol_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tls_maximum_protocol_version_) -
      reinterpret_cast<char*>(&tls_minimum_protocol_version_)) + sizeof(tls_maximum_protocol_version_));
  _internal_metadata_.Clear();
}

bool TlsParameters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.TlsParameters)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.TlsParameters.TlsProtocol tls_minimum_protocol_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_tls_minimum_protocol_version(static_cast< ::envoy::api::v2::TlsParameters_TlsProtocol >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.TlsParameters.TlsProtocol tls_maximum_protocol_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_tls_maximum_protocol_version(static_cast< ::envoy::api::v2::TlsParameters_TlsProtocol >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string cipher_suites = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_cipher_suites()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cipher_suites(this->cipher_suites_size() - 1).data(),
            static_cast<int>(this->cipher_suites(this->cipher_suites_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.TlsParameters.cipher_suites"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string ecdh_curves = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_ecdh_curves()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ecdh_curves(this->ecdh_curves_size() - 1).data(),
            static_cast<int>(this->ecdh_curves(this->ecdh_curves_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.TlsParameters.ecdh_curves"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.TlsParameters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.TlsParameters)
  return false;
#undef DO_
}

void TlsParameters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.TlsParameters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.TlsParameters.TlsProtocol tls_minimum_protocol_version = 1;
  if (this->tls_minimum_protocol_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->tls_minimum_protocol_version(), output);
  }

  // .envoy.api.v2.TlsParameters.TlsProtocol tls_maximum_protocol_version = 2;
  if (this->tls_maximum_protocol_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->tls_maximum_protocol_version(), output);
  }

  // repeated string cipher_suites = 3;
  for (int i = 0, n = this->cipher_suites_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cipher_suites(i).data(), static_cast<int>(this->cipher_suites(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.TlsParameters.cipher_suites");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->cipher_suites(i), output);
  }

  // repeated string ecdh_curves = 4;
  for (int i = 0, n = this->ecdh_curves_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ecdh_curves(i).data(), static_cast<int>(this->ecdh_curves(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.TlsParameters.ecdh_curves");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->ecdh_curves(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.TlsParameters)
}

::google::protobuf::uint8* TlsParameters::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.TlsParameters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.TlsParameters.TlsProtocol tls_minimum_protocol_version = 1;
  if (this->tls_minimum_protocol_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->tls_minimum_protocol_version(), target);
  }

  // .envoy.api.v2.TlsParameters.TlsProtocol tls_maximum_protocol_version = 2;
  if (this->tls_maximum_protocol_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->tls_maximum_protocol_version(), target);
  }

  // repeated string cipher_suites = 3;
  for (int i = 0, n = this->cipher_suites_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cipher_suites(i).data(), static_cast<int>(this->cipher_suites(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.TlsParameters.cipher_suites");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->cipher_suites(i), target);
  }

  // repeated string ecdh_curves = 4;
  for (int i = 0, n = this->ecdh_curves_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ecdh_curves(i).data(), static_cast<int>(this->ecdh_curves(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.TlsParameters.ecdh_curves");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->ecdh_curves(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.TlsParameters)
  return target;
}

size_t TlsParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.TlsParameters)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string cipher_suites = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->cipher_suites_size());
  for (int i = 0, n = this->cipher_suites_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->cipher_suites(i));
  }

  // repeated string ecdh_curves = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->ecdh_curves_size());
  for (int i = 0, n = this->ecdh_curves_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->ecdh_curves(i));
  }

  // .envoy.api.v2.TlsParameters.TlsProtocol tls_minimum_protocol_version = 1;
  if (this->tls_minimum_protocol_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->tls_minimum_protocol_version());
  }

  // .envoy.api.v2.TlsParameters.TlsProtocol tls_maximum_protocol_version = 2;
  if (this->tls_maximum_protocol_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->tls_maximum_protocol_version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TlsParameters::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.TlsParameters)
  GOOGLE_DCHECK_NE(&from, this);
  const TlsParameters* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TlsParameters>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.TlsParameters)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.TlsParameters)
    MergeFrom(*source);
  }
}

void TlsParameters::MergeFrom(const TlsParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.TlsParameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cipher_suites_.MergeFrom(from.cipher_suites_);
  ecdh_curves_.MergeFrom(from.ecdh_curves_);
  if (from.tls_minimum_protocol_version() != 0) {
    set_tls_minimum_protocol_version(from.tls_minimum_protocol_version());
  }
  if (from.tls_maximum_protocol_version() != 0) {
    set_tls_maximum_protocol_version(from.tls_maximum_protocol_version());
  }
}

void TlsParameters::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.TlsParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TlsParameters::CopyFrom(const TlsParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.TlsParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TlsParameters::IsInitialized() const {
  return true;
}

void TlsParameters::Swap(TlsParameters* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TlsParameters::InternalSwap(TlsParameters* other) {
  using std::swap;
  cipher_suites_.InternalSwap(&other->cipher_suites_);
  ecdh_curves_.InternalSwap(&other->ecdh_curves_);
  swap(tls_minimum_protocol_version_, other->tls_minimum_protocol_version_);
  swap(tls_maximum_protocol_version_, other->tls_maximum_protocol_version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TlsParameters::GetMetadata() const {
  protobuf_api_2fsds_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2fsds_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TlsCertificate::InitAsDefaultInstance() {
  ::envoy::api::v2::_TlsCertificate_default_instance_._instance.get_mutable()->certificate_chain_ = const_cast< ::envoy::api::v2::DataSource*>(
      ::envoy::api::v2::DataSource::internal_default_instance());
  ::envoy::api::v2::_TlsCertificate_default_instance_._instance.get_mutable()->private_key_ = const_cast< ::envoy::api::v2::DataSource*>(
      ::envoy::api::v2::DataSource::internal_default_instance());
  ::envoy::api::v2::_TlsCertificate_default_instance_._instance.get_mutable()->password_ = const_cast< ::envoy::api::v2::DataSource*>(
      ::envoy::api::v2::DataSource::internal_default_instance());
  ::envoy::api::v2::_TlsCertificate_default_instance_._instance.get_mutable()->ocsp_staple_ = const_cast< ::envoy::api::v2::DataSource*>(
      ::envoy::api::v2::DataSource::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TlsCertificate::kCertificateChainFieldNumber;
const int TlsCertificate::kPrivateKeyFieldNumber;
const int TlsCertificate::kPasswordFieldNumber;
const int TlsCertificate::kOcspStapleFieldNumber;
const int TlsCertificate::kSignedCertificateTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TlsCertificate::TlsCertificate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2fsds_2eproto::InitDefaultsTlsCertificate();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.TlsCertificate)
}
TlsCertificate::TlsCertificate(const TlsCertificate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      signed_certificate_timestamp_(from.signed_certificate_timestamp_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_certificate_chain()) {
    certificate_chain_ = new ::envoy::api::v2::DataSource(*from.certificate_chain_);
  } else {
    certificate_chain_ = NULL;
  }
  if (from.has_private_key()) {
    private_key_ = new ::envoy::api::v2::DataSource(*from.private_key_);
  } else {
    private_key_ = NULL;
  }
  if (from.has_password()) {
    password_ = new ::envoy::api::v2::DataSource(*from.password_);
  } else {
    password_ = NULL;
  }
  if (from.has_ocsp_staple()) {
    ocsp_staple_ = new ::envoy::api::v2::DataSource(*from.ocsp_staple_);
  } else {
    ocsp_staple_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.TlsCertificate)
}

void TlsCertificate::SharedCtor() {
  ::memset(&certificate_chain_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ocsp_staple_) -
      reinterpret_cast<char*>(&certificate_chain_)) + sizeof(ocsp_staple_));
  _cached_size_ = 0;
}

TlsCertificate::~TlsCertificate() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.TlsCertificate)
  SharedDtor();
}

void TlsCertificate::SharedDtor() {
  if (this != internal_default_instance()) delete certificate_chain_;
  if (this != internal_default_instance()) delete private_key_;
  if (this != internal_default_instance()) delete password_;
  if (this != internal_default_instance()) delete ocsp_staple_;
}

void TlsCertificate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TlsCertificate::descriptor() {
  ::protobuf_api_2fsds_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2fsds_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TlsCertificate& TlsCertificate::default_instance() {
  ::protobuf_api_2fsds_2eproto::InitDefaultsTlsCertificate();
  return *internal_default_instance();
}

TlsCertificate* TlsCertificate::New(::google::protobuf::Arena* arena) const {
  TlsCertificate* n = new TlsCertificate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TlsCertificate::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.TlsCertificate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signed_certificate_timestamp_.Clear();
  if (GetArenaNoVirtual() == NULL && certificate_chain_ != NULL) {
    delete certificate_chain_;
  }
  certificate_chain_ = NULL;
  if (GetArenaNoVirtual() == NULL && private_key_ != NULL) {
    delete private_key_;
  }
  private_key_ = NULL;
  if (GetArenaNoVirtual() == NULL && password_ != NULL) {
    delete password_;
  }
  password_ = NULL;
  if (GetArenaNoVirtual() == NULL && ocsp_staple_ != NULL) {
    delete ocsp_staple_;
  }
  ocsp_staple_ = NULL;
  _internal_metadata_.Clear();
}

bool TlsCertificate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.TlsCertificate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.DataSource certificate_chain = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_certificate_chain()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.DataSource private_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_private_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.DataSource password = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_password()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.DataSource ocsp_staple = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ocsp_staple()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .envoy.api.v2.DataSource signed_certificate_timestamp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_signed_certificate_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.TlsCertificate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.TlsCertificate)
  return false;
#undef DO_
}

void TlsCertificate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.TlsCertificate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.DataSource certificate_chain = 1;
  if (this->has_certificate_chain()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->certificate_chain_, output);
  }

  // .envoy.api.v2.DataSource private_key = 2;
  if (this->has_private_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->private_key_, output);
  }

  // .envoy.api.v2.DataSource password = 3;
  if (this->has_password()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->password_, output);
  }

  // .envoy.api.v2.DataSource ocsp_staple = 4;
  if (this->has_ocsp_staple()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->ocsp_staple_, output);
  }

  // repeated .envoy.api.v2.DataSource signed_certificate_timestamp = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->signed_certificate_timestamp_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->signed_certificate_timestamp(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.TlsCertificate)
}

::google::protobuf::uint8* TlsCertificate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.TlsCertificate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.DataSource certificate_chain = 1;
  if (this->has_certificate_chain()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->certificate_chain_, deterministic, target);
  }

  // .envoy.api.v2.DataSource private_key = 2;
  if (this->has_private_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->private_key_, deterministic, target);
  }

  // .envoy.api.v2.DataSource password = 3;
  if (this->has_password()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->password_, deterministic, target);
  }

  // .envoy.api.v2.DataSource ocsp_staple = 4;
  if (this->has_ocsp_staple()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->ocsp_staple_, deterministic, target);
  }

  // repeated .envoy.api.v2.DataSource signed_certificate_timestamp = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->signed_certificate_timestamp_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->signed_certificate_timestamp(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.TlsCertificate)
  return target;
}

size_t TlsCertificate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.TlsCertificate)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .envoy.api.v2.DataSource signed_certificate_timestamp = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->signed_certificate_timestamp_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->signed_certificate_timestamp(static_cast<int>(i)));
    }
  }

  // .envoy.api.v2.DataSource certificate_chain = 1;
  if (this->has_certificate_chain()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->certificate_chain_);
  }

  // .envoy.api.v2.DataSource private_key = 2;
  if (this->has_private_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->private_key_);
  }

  // .envoy.api.v2.DataSource password = 3;
  if (this->has_password()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->password_);
  }

  // .envoy.api.v2.DataSource ocsp_staple = 4;
  if (this->has_ocsp_staple()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->ocsp_staple_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TlsCertificate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.TlsCertificate)
  GOOGLE_DCHECK_NE(&from, this);
  const TlsCertificate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TlsCertificate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.TlsCertificate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.TlsCertificate)
    MergeFrom(*source);
  }
}

void TlsCertificate::MergeFrom(const TlsCertificate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.TlsCertificate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signed_certificate_timestamp_.MergeFrom(from.signed_certificate_timestamp_);
  if (from.has_certificate_chain()) {
    mutable_certificate_chain()->::envoy::api::v2::DataSource::MergeFrom(from.certificate_chain());
  }
  if (from.has_private_key()) {
    mutable_private_key()->::envoy::api::v2::DataSource::MergeFrom(from.private_key());
  }
  if (from.has_password()) {
    mutable_password()->::envoy::api::v2::DataSource::MergeFrom(from.password());
  }
  if (from.has_ocsp_staple()) {
    mutable_ocsp_staple()->::envoy::api::v2::DataSource::MergeFrom(from.ocsp_staple());
  }
}

void TlsCertificate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.TlsCertificate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TlsCertificate::CopyFrom(const TlsCertificate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.TlsCertificate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TlsCertificate::IsInitialized() const {
  return true;
}

void TlsCertificate::Swap(TlsCertificate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TlsCertificate::InternalSwap(TlsCertificate* other) {
  using std::swap;
  signed_certificate_timestamp_.InternalSwap(&other->signed_certificate_timestamp_);
  swap(certificate_chain_, other->certificate_chain_);
  swap(private_key_, other->private_key_);
  swap(password_, other->password_);
  swap(ocsp_staple_, other->ocsp_staple_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TlsCertificate::GetMetadata() const {
  protobuf_api_2fsds_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2fsds_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TlsSessionTicketKeys::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TlsSessionTicketKeys::kKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TlsSessionTicketKeys::TlsSessionTicketKeys()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2fsds_2eproto::InitDefaultsTlsSessionTicketKeys();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.TlsSessionTicketKeys)
}
TlsSessionTicketKeys::TlsSessionTicketKeys(const TlsSessionTicketKeys& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      keys_(from.keys_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.TlsSessionTicketKeys)
}

void TlsSessionTicketKeys::SharedCtor() {
  _cached_size_ = 0;
}

TlsSessionTicketKeys::~TlsSessionTicketKeys() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.TlsSessionTicketKeys)
  SharedDtor();
}

void TlsSessionTicketKeys::SharedDtor() {
}

void TlsSessionTicketKeys::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TlsSessionTicketKeys::descriptor() {
  ::protobuf_api_2fsds_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2fsds_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TlsSessionTicketKeys& TlsSessionTicketKeys::default_instance() {
  ::protobuf_api_2fsds_2eproto::InitDefaultsTlsSessionTicketKeys();
  return *internal_default_instance();
}

TlsSessionTicketKeys* TlsSessionTicketKeys::New(::google::protobuf::Arena* arena) const {
  TlsSessionTicketKeys* n = new TlsSessionTicketKeys;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TlsSessionTicketKeys::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.TlsSessionTicketKeys)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  _internal_metadata_.Clear();
}

bool TlsSessionTicketKeys::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.TlsSessionTicketKeys)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .envoy.api.v2.DataSource keys = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_keys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.TlsSessionTicketKeys)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.TlsSessionTicketKeys)
  return false;
#undef DO_
}

void TlsSessionTicketKeys::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.TlsSessionTicketKeys)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .envoy.api.v2.DataSource keys = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->keys_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->keys(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.TlsSessionTicketKeys)
}

::google::protobuf::uint8* TlsSessionTicketKeys::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.TlsSessionTicketKeys)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .envoy.api.v2.DataSource keys = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->keys_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->keys(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.TlsSessionTicketKeys)
  return target;
}

size_t TlsSessionTicketKeys::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.TlsSessionTicketKeys)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .envoy.api.v2.DataSource keys = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->keys_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->keys(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TlsSessionTicketKeys::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.TlsSessionTicketKeys)
  GOOGLE_DCHECK_NE(&from, this);
  const TlsSessionTicketKeys* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TlsSessionTicketKeys>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.TlsSessionTicketKeys)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.TlsSessionTicketKeys)
    MergeFrom(*source);
  }
}

void TlsSessionTicketKeys::MergeFrom(const TlsSessionTicketKeys& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.TlsSessionTicketKeys)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
}

void TlsSessionTicketKeys::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.TlsSessionTicketKeys)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TlsSessionTicketKeys::CopyFrom(const TlsSessionTicketKeys& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.TlsSessionTicketKeys)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TlsSessionTicketKeys::IsInitialized() const {
  return true;
}

void TlsSessionTicketKeys::Swap(TlsSessionTicketKeys* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TlsSessionTicketKeys::InternalSwap(TlsSessionTicketKeys* other) {
  using std::swap;
  keys_.InternalSwap(&other->keys_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TlsSessionTicketKeys::GetMetadata() const {
  protobuf_api_2fsds_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2fsds_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CertificateValidationContext::InitAsDefaultInstance() {
  ::envoy::api::v2::_CertificateValidationContext_default_instance_._instance.get_mutable()->trusted_ca_ = const_cast< ::envoy::api::v2::DataSource*>(
      ::envoy::api::v2::DataSource::internal_default_instance());
  ::envoy::api::v2::_CertificateValidationContext_default_instance_._instance.get_mutable()->require_ocsp_staple_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
  ::envoy::api::v2::_CertificateValidationContext_default_instance_._instance.get_mutable()->require_signed_certificate_timestamp_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
}
void CertificateValidationContext::clear_require_ocsp_staple() {
  if (GetArenaNoVirtual() == NULL && require_ocsp_staple_ != NULL) {
    delete require_ocsp_staple_;
  }
  require_ocsp_staple_ = NULL;
}
void CertificateValidationContext::clear_require_signed_certificate_timestamp() {
  if (GetArenaNoVirtual() == NULL && require_signed_certificate_timestamp_ != NULL) {
    delete require_signed_certificate_timestamp_;
  }
  require_signed_certificate_timestamp_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CertificateValidationContext::kTrustedCaFieldNumber;
const int CertificateValidationContext::kVerifyCertificateHashFieldNumber;
const int CertificateValidationContext::kVerifySpkiSha256FieldNumber;
const int CertificateValidationContext::kVerifySubjectAltNameFieldNumber;
const int CertificateValidationContext::kRequireOcspStapleFieldNumber;
const int CertificateValidationContext::kRequireSignedCertificateTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CertificateValidationContext::CertificateValidationContext()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2fsds_2eproto::InitDefaultsCertificateValidationContext();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.CertificateValidationContext)
}
CertificateValidationContext::CertificateValidationContext(const CertificateValidationContext& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      verify_certificate_hash_(from.verify_certificate_hash_),
      verify_spki_sha256_(from.verify_spki_sha256_),
      verify_subject_alt_name_(from.verify_subject_alt_name_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_trusted_ca()) {
    trusted_ca_ = new ::envoy::api::v2::DataSource(*from.trusted_ca_);
  } else {
    trusted_ca_ = NULL;
  }
  if (from.has_require_ocsp_staple()) {
    require_ocsp_staple_ = new ::google::protobuf::BoolValue(*from.require_ocsp_staple_);
  } else {
    require_ocsp_staple_ = NULL;
  }
  if (from.has_require_signed_certificate_timestamp()) {
    require_signed_certificate_timestamp_ = new ::google::protobuf::BoolValue(*from.require_signed_certificate_timestamp_);
  } else {
    require_signed_certificate_timestamp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.CertificateValidationContext)
}

void CertificateValidationContext::SharedCtor() {
  ::memset(&trusted_ca_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&require_signed_certificate_timestamp_) -
      reinterpret_cast<char*>(&trusted_ca_)) + sizeof(require_signed_certificate_timestamp_));
  _cached_size_ = 0;
}

CertificateValidationContext::~CertificateValidationContext() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.CertificateValidationContext)
  SharedDtor();
}

void CertificateValidationContext::SharedDtor() {
  if (this != internal_default_instance()) delete trusted_ca_;
  if (this != internal_default_instance()) delete require_ocsp_staple_;
  if (this != internal_default_instance()) delete require_signed_certificate_timestamp_;
}

void CertificateValidationContext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CertificateValidationContext::descriptor() {
  ::protobuf_api_2fsds_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2fsds_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CertificateValidationContext& CertificateValidationContext::default_instance() {
  ::protobuf_api_2fsds_2eproto::InitDefaultsCertificateValidationContext();
  return *internal_default_instance();
}

CertificateValidationContext* CertificateValidationContext::New(::google::protobuf::Arena* arena) const {
  CertificateValidationContext* n = new CertificateValidationContext;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CertificateValidationContext::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.CertificateValidationContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  verify_certificate_hash_.Clear();
  verify_spki_sha256_.Clear();
  verify_subject_alt_name_.Clear();
  if (GetArenaNoVirtual() == NULL && trusted_ca_ != NULL) {
    delete trusted_ca_;
  }
  trusted_ca_ = NULL;
  if (GetArenaNoVirtual() == NULL && require_ocsp_staple_ != NULL) {
    delete require_ocsp_staple_;
  }
  require_ocsp_staple_ = NULL;
  if (GetArenaNoVirtual() == NULL && require_signed_certificate_timestamp_ != NULL) {
    delete require_signed_certificate_timestamp_;
  }
  require_signed_certificate_timestamp_ = NULL;
  _internal_metadata_.Clear();
}

bool CertificateValidationContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.CertificateValidationContext)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.DataSource trusted_ca = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_trusted_ca()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string verify_certificate_hash = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_verify_certificate_hash()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->verify_certificate_hash(this->verify_certificate_hash_size() - 1).data(),
            static_cast<int>(this->verify_certificate_hash(this->verify_certificate_hash_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.CertificateValidationContext.verify_certificate_hash"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string verify_spki_sha256 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_verify_spki_sha256()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->verify_spki_sha256(this->verify_spki_sha256_size() - 1).data(),
            static_cast<int>(this->verify_spki_sha256(this->verify_spki_sha256_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.CertificateValidationContext.verify_spki_sha256"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string verify_subject_alt_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_verify_subject_alt_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->verify_subject_alt_name(this->verify_subject_alt_name_size() - 1).data(),
            static_cast<int>(this->verify_subject_alt_name(this->verify_subject_alt_name_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.CertificateValidationContext.verify_subject_alt_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue require_ocsp_staple = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_require_ocsp_staple()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue require_signed_certificate_timestamp = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_require_signed_certificate_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.CertificateValidationContext)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.CertificateValidationContext)
  return false;
#undef DO_
}

void CertificateValidationContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.CertificateValidationContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.DataSource trusted_ca = 1;
  if (this->has_trusted_ca()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->trusted_ca_, output);
  }

  // repeated string verify_certificate_hash = 2;
  for (int i = 0, n = this->verify_certificate_hash_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->verify_certificate_hash(i).data(), static_cast<int>(this->verify_certificate_hash(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.CertificateValidationContext.verify_certificate_hash");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->verify_certificate_hash(i), output);
  }

  // repeated string verify_spki_sha256 = 3;
  for (int i = 0, n = this->verify_spki_sha256_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->verify_spki_sha256(i).data(), static_cast<int>(this->verify_spki_sha256(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.CertificateValidationContext.verify_spki_sha256");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->verify_spki_sha256(i), output);
  }

  // repeated string verify_subject_alt_name = 4;
  for (int i = 0, n = this->verify_subject_alt_name_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->verify_subject_alt_name(i).data(), static_cast<int>(this->verify_subject_alt_name(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.CertificateValidationContext.verify_subject_alt_name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->verify_subject_alt_name(i), output);
  }

  // .google.protobuf.BoolValue require_ocsp_staple = 5;
  if (this->has_require_ocsp_staple()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->require_ocsp_staple_, output);
  }

  // .google.protobuf.BoolValue require_signed_certificate_timestamp = 6;
  if (this->has_require_signed_certificate_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->require_signed_certificate_timestamp_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.CertificateValidationContext)
}

::google::protobuf::uint8* CertificateValidationContext::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.CertificateValidationContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.DataSource trusted_ca = 1;
  if (this->has_trusted_ca()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->trusted_ca_, deterministic, target);
  }

  // repeated string verify_certificate_hash = 2;
  for (int i = 0, n = this->verify_certificate_hash_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->verify_certificate_hash(i).data(), static_cast<int>(this->verify_certificate_hash(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.CertificateValidationContext.verify_certificate_hash");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->verify_certificate_hash(i), target);
  }

  // repeated string verify_spki_sha256 = 3;
  for (int i = 0, n = this->verify_spki_sha256_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->verify_spki_sha256(i).data(), static_cast<int>(this->verify_spki_sha256(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.CertificateValidationContext.verify_spki_sha256");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->verify_spki_sha256(i), target);
  }

  // repeated string verify_subject_alt_name = 4;
  for (int i = 0, n = this->verify_subject_alt_name_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->verify_subject_alt_name(i).data(), static_cast<int>(this->verify_subject_alt_name(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.CertificateValidationContext.verify_subject_alt_name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->verify_subject_alt_name(i), target);
  }

  // .google.protobuf.BoolValue require_ocsp_staple = 5;
  if (this->has_require_ocsp_staple()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->require_ocsp_staple_, deterministic, target);
  }

  // .google.protobuf.BoolValue require_signed_certificate_timestamp = 6;
  if (this->has_require_signed_certificate_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->require_signed_certificate_timestamp_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.CertificateValidationContext)
  return target;
}

size_t CertificateValidationContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.CertificateValidationContext)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string verify_certificate_hash = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->verify_certificate_hash_size());
  for (int i = 0, n = this->verify_certificate_hash_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->verify_certificate_hash(i));
  }

  // repeated string verify_spki_sha256 = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->verify_spki_sha256_size());
  for (int i = 0, n = this->verify_spki_sha256_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->verify_spki_sha256(i));
  }

  // repeated string verify_subject_alt_name = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->verify_subject_alt_name_size());
  for (int i = 0, n = this->verify_subject_alt_name_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->verify_subject_alt_name(i));
  }

  // .envoy.api.v2.DataSource trusted_ca = 1;
  if (this->has_trusted_ca()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->trusted_ca_);
  }

  // .google.protobuf.BoolValue require_ocsp_staple = 5;
  if (this->has_require_ocsp_staple()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->require_ocsp_staple_);
  }

  // .google.protobuf.BoolValue require_signed_certificate_timestamp = 6;
  if (this->has_require_signed_certificate_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->require_signed_certificate_timestamp_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CertificateValidationContext::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.CertificateValidationContext)
  GOOGLE_DCHECK_NE(&from, this);
  const CertificateValidationContext* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CertificateValidationContext>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.CertificateValidationContext)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.CertificateValidationContext)
    MergeFrom(*source);
  }
}

void CertificateValidationContext::MergeFrom(const CertificateValidationContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.CertificateValidationContext)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  verify_certificate_hash_.MergeFrom(from.verify_certificate_hash_);
  verify_spki_sha256_.MergeFrom(from.verify_spki_sha256_);
  verify_subject_alt_name_.MergeFrom(from.verify_subject_alt_name_);
  if (from.has_trusted_ca()) {
    mutable_trusted_ca()->::envoy::api::v2::DataSource::MergeFrom(from.trusted_ca());
  }
  if (from.has_require_ocsp_staple()) {
    mutable_require_ocsp_staple()->::google::protobuf::BoolValue::MergeFrom(from.require_ocsp_staple());
  }
  if (from.has_require_signed_certificate_timestamp()) {
    mutable_require_signed_certificate_timestamp()->::google::protobuf::BoolValue::MergeFrom(from.require_signed_certificate_timestamp());
  }
}

void CertificateValidationContext::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.CertificateValidationContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CertificateValidationContext::CopyFrom(const CertificateValidationContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.CertificateValidationContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CertificateValidationContext::IsInitialized() const {
  return true;
}

void CertificateValidationContext::Swap(CertificateValidationContext* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CertificateValidationContext::InternalSwap(CertificateValidationContext* other) {
  using std::swap;
  verify_certificate_hash_.InternalSwap(&other->verify_certificate_hash_);
  verify_spki_sha256_.InternalSwap(&other->verify_spki_sha256_);
  verify_subject_alt_name_.InternalSwap(&other->verify_subject_alt_name_);
  swap(trusted_ca_, other->trusted_ca_);
  swap(require_ocsp_staple_, other->require_ocsp_staple_);
  swap(require_signed_certificate_timestamp_, other->require_signed_certificate_timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CertificateValidationContext::GetMetadata() const {
  protobuf_api_2fsds_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2fsds_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CommonTlsContext_DeprecatedV1::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommonTlsContext_DeprecatedV1::kAltAlpnProtocolsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommonTlsContext_DeprecatedV1::CommonTlsContext_DeprecatedV1()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2fsds_2eproto::InitDefaultsCommonTlsContext_DeprecatedV1();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.CommonTlsContext.DeprecatedV1)
}
CommonTlsContext_DeprecatedV1::CommonTlsContext_DeprecatedV1(const CommonTlsContext_DeprecatedV1& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  alt_alpn_protocols_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.alt_alpn_protocols().size() > 0) {
    alt_alpn_protocols_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alt_alpn_protocols_);
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.CommonTlsContext.DeprecatedV1)
}

void CommonTlsContext_DeprecatedV1::SharedCtor() {
  alt_alpn_protocols_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

CommonTlsContext_DeprecatedV1::~CommonTlsContext_DeprecatedV1() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.CommonTlsContext.DeprecatedV1)
  SharedDtor();
}

void CommonTlsContext_DeprecatedV1::SharedDtor() {
  alt_alpn_protocols_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CommonTlsContext_DeprecatedV1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommonTlsContext_DeprecatedV1::descriptor() {
  ::protobuf_api_2fsds_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2fsds_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CommonTlsContext_DeprecatedV1& CommonTlsContext_DeprecatedV1::default_instance() {
  ::protobuf_api_2fsds_2eproto::InitDefaultsCommonTlsContext_DeprecatedV1();
  return *internal_default_instance();
}

CommonTlsContext_DeprecatedV1* CommonTlsContext_DeprecatedV1::New(::google::protobuf::Arena* arena) const {
  CommonTlsContext_DeprecatedV1* n = new CommonTlsContext_DeprecatedV1;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommonTlsContext_DeprecatedV1::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.CommonTlsContext.DeprecatedV1)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  alt_alpn_protocols_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool CommonTlsContext_DeprecatedV1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.CommonTlsContext.DeprecatedV1)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string alt_alpn_protocols = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alt_alpn_protocols()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->alt_alpn_protocols().data(), static_cast<int>(this->alt_alpn_protocols().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.CommonTlsContext.DeprecatedV1.alt_alpn_protocols"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.CommonTlsContext.DeprecatedV1)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.CommonTlsContext.DeprecatedV1)
  return false;
#undef DO_
}

void CommonTlsContext_DeprecatedV1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.CommonTlsContext.DeprecatedV1)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string alt_alpn_protocols = 1;
  if (this->alt_alpn_protocols().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alt_alpn_protocols().data(), static_cast<int>(this->alt_alpn_protocols().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.CommonTlsContext.DeprecatedV1.alt_alpn_protocols");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->alt_alpn_protocols(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.CommonTlsContext.DeprecatedV1)
}

::google::protobuf::uint8* CommonTlsContext_DeprecatedV1::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.CommonTlsContext.DeprecatedV1)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string alt_alpn_protocols = 1;
  if (this->alt_alpn_protocols().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alt_alpn_protocols().data(), static_cast<int>(this->alt_alpn_protocols().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.CommonTlsContext.DeprecatedV1.alt_alpn_protocols");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->alt_alpn_protocols(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.CommonTlsContext.DeprecatedV1)
  return target;
}

size_t CommonTlsContext_DeprecatedV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.CommonTlsContext.DeprecatedV1)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string alt_alpn_protocols = 1;
  if (this->alt_alpn_protocols().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->alt_alpn_protocols());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommonTlsContext_DeprecatedV1::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.CommonTlsContext.DeprecatedV1)
  GOOGLE_DCHECK_NE(&from, this);
  const CommonTlsContext_DeprecatedV1* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommonTlsContext_DeprecatedV1>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.CommonTlsContext.DeprecatedV1)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.CommonTlsContext.DeprecatedV1)
    MergeFrom(*source);
  }
}

void CommonTlsContext_DeprecatedV1::MergeFrom(const CommonTlsContext_DeprecatedV1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.CommonTlsContext.DeprecatedV1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.alt_alpn_protocols().size() > 0) {

    alt_alpn_protocols_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alt_alpn_protocols_);
  }
}

void CommonTlsContext_DeprecatedV1::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.CommonTlsContext.DeprecatedV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonTlsContext_DeprecatedV1::CopyFrom(const CommonTlsContext_DeprecatedV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.CommonTlsContext.DeprecatedV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonTlsContext_DeprecatedV1::IsInitialized() const {
  return true;
}

void CommonTlsContext_DeprecatedV1::Swap(CommonTlsContext_DeprecatedV1* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommonTlsContext_DeprecatedV1::InternalSwap(CommonTlsContext_DeprecatedV1* other) {
  using std::swap;
  alt_alpn_protocols_.Swap(&other->alt_alpn_protocols_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommonTlsContext_DeprecatedV1::GetMetadata() const {
  protobuf_api_2fsds_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2fsds_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CommonTlsContext::InitAsDefaultInstance() {
  ::envoy::api::v2::_CommonTlsContext_default_instance_._instance.get_mutable()->tls_params_ = const_cast< ::envoy::api::v2::TlsParameters*>(
      ::envoy::api::v2::TlsParameters::internal_default_instance());
  ::envoy::api::v2::_CommonTlsContext_default_instance_._instance.get_mutable()->validation_context_ = const_cast< ::envoy::api::v2::CertificateValidationContext*>(
      ::envoy::api::v2::CertificateValidationContext::internal_default_instance());
  ::envoy::api::v2::_CommonTlsContext_default_instance_._instance.get_mutable()->deprecated_v1_ = const_cast< ::envoy::api::v2::CommonTlsContext_DeprecatedV1*>(
      ::envoy::api::v2::CommonTlsContext_DeprecatedV1::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommonTlsContext::kTlsParamsFieldNumber;
const int CommonTlsContext::kTlsCertificatesFieldNumber;
const int CommonTlsContext::kTlsCertificateSdsSecretConfigsFieldNumber;
const int CommonTlsContext::kValidationContextFieldNumber;
const int CommonTlsContext::kAlpnProtocolsFieldNumber;
const int CommonTlsContext::kDeprecatedV1FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommonTlsContext::CommonTlsContext()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2fsds_2eproto::InitDefaultsCommonTlsContext();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.CommonTlsContext)
}
CommonTlsContext::CommonTlsContext(const CommonTlsContext& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      tls_certificates_(from.tls_certificates_),
      alpn_protocols_(from.alpn_protocols_),
      tls_certificate_sds_secret_configs_(from.tls_certificate_sds_secret_configs_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tls_params()) {
    tls_params_ = new ::envoy::api::v2::TlsParameters(*from.tls_params_);
  } else {
    tls_params_ = NULL;
  }
  if (from.has_validation_context()) {
    validation_context_ = new ::envoy::api::v2::CertificateValidationContext(*from.validation_context_);
  } else {
    validation_context_ = NULL;
  }
  if (from.has_deprecated_v1()) {
    deprecated_v1_ = new ::envoy::api::v2::CommonTlsContext_DeprecatedV1(*from.deprecated_v1_);
  } else {
    deprecated_v1_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.CommonTlsContext)
}

void CommonTlsContext::SharedCtor() {
  ::memset(&tls_params_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&deprecated_v1_) -
      reinterpret_cast<char*>(&tls_params_)) + sizeof(deprecated_v1_));
  _cached_size_ = 0;
}

CommonTlsContext::~CommonTlsContext() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.CommonTlsContext)
  SharedDtor();
}

void CommonTlsContext::SharedDtor() {
  if (this != internal_default_instance()) delete tls_params_;
  if (this != internal_default_instance()) delete validation_context_;
  if (this != internal_default_instance()) delete deprecated_v1_;
}

void CommonTlsContext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommonTlsContext::descriptor() {
  ::protobuf_api_2fsds_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2fsds_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CommonTlsContext& CommonTlsContext::default_instance() {
  ::protobuf_api_2fsds_2eproto::InitDefaultsCommonTlsContext();
  return *internal_default_instance();
}

CommonTlsContext* CommonTlsContext::New(::google::protobuf::Arena* arena) const {
  CommonTlsContext* n = new CommonTlsContext;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommonTlsContext::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.CommonTlsContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tls_certificates_.Clear();
  alpn_protocols_.Clear();
  tls_certificate_sds_secret_configs_.Clear();
  if (GetArenaNoVirtual() == NULL && tls_params_ != NULL) {
    delete tls_params_;
  }
  tls_params_ = NULL;
  if (GetArenaNoVirtual() == NULL && validation_context_ != NULL) {
    delete validation_context_;
  }
  validation_context_ = NULL;
  if (GetArenaNoVirtual() == NULL && deprecated_v1_ != NULL) {
    delete deprecated_v1_;
  }
  deprecated_v1_ = NULL;
  _internal_metadata_.Clear();
}

bool CommonTlsContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.CommonTlsContext)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.TlsParameters tls_params = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tls_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .envoy.api.v2.TlsCertificate tls_certificates = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_tls_certificates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.CertificateValidationContext validation_context = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_validation_context()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string alpn_protocols = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_alpn_protocols()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->alpn_protocols(this->alpn_protocols_size() - 1).data(),
            static_cast<int>(this->alpn_protocols(this->alpn_protocols_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.CommonTlsContext.alpn_protocols"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.CommonTlsContext.DeprecatedV1 deprecated_v1 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_deprecated_v1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .envoy.api.v2.SdsSecretConfig tls_certificate_sds_secret_configs = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_tls_certificate_sds_secret_configs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.CommonTlsContext)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.CommonTlsContext)
  return false;
#undef DO_
}

void CommonTlsContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.CommonTlsContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.TlsParameters tls_params = 1;
  if (this->has_tls_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->tls_params_, output);
  }

  // repeated .envoy.api.v2.TlsCertificate tls_certificates = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tls_certificates_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tls_certificates(static_cast<int>(i)), output);
  }

  // .envoy.api.v2.CertificateValidationContext validation_context = 3;
  if (this->has_validation_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->validation_context_, output);
  }

  // repeated string alpn_protocols = 4;
  for (int i = 0, n = this->alpn_protocols_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alpn_protocols(i).data(), static_cast<int>(this->alpn_protocols(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.CommonTlsContext.alpn_protocols");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->alpn_protocols(i), output);
  }

  // .envoy.api.v2.CommonTlsContext.DeprecatedV1 deprecated_v1 = 5;
  if (this->has_deprecated_v1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->deprecated_v1_, output);
  }

  // repeated .envoy.api.v2.SdsSecretConfig tls_certificate_sds_secret_configs = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tls_certificate_sds_secret_configs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->tls_certificate_sds_secret_configs(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.CommonTlsContext)
}

::google::protobuf::uint8* CommonTlsContext::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.CommonTlsContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.TlsParameters tls_params = 1;
  if (this->has_tls_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->tls_params_, deterministic, target);
  }

  // repeated .envoy.api.v2.TlsCertificate tls_certificates = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tls_certificates_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->tls_certificates(static_cast<int>(i)), deterministic, target);
  }

  // .envoy.api.v2.CertificateValidationContext validation_context = 3;
  if (this->has_validation_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->validation_context_, deterministic, target);
  }

  // repeated string alpn_protocols = 4;
  for (int i = 0, n = this->alpn_protocols_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alpn_protocols(i).data(), static_cast<int>(this->alpn_protocols(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.CommonTlsContext.alpn_protocols");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->alpn_protocols(i), target);
  }

  // .envoy.api.v2.CommonTlsContext.DeprecatedV1 deprecated_v1 = 5;
  if (this->has_deprecated_v1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->deprecated_v1_, deterministic, target);
  }

  // repeated .envoy.api.v2.SdsSecretConfig tls_certificate_sds_secret_configs = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tls_certificate_sds_secret_configs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->tls_certificate_sds_secret_configs(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.CommonTlsContext)
  return target;
}

size_t CommonTlsContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.CommonTlsContext)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .envoy.api.v2.TlsCertificate tls_certificates = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->tls_certificates_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tls_certificates(static_cast<int>(i)));
    }
  }

  // repeated string alpn_protocols = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->alpn_protocols_size());
  for (int i = 0, n = this->alpn_protocols_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->alpn_protocols(i));
  }

  // repeated .envoy.api.v2.SdsSecretConfig tls_certificate_sds_secret_configs = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->tls_certificate_sds_secret_configs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tls_certificate_sds_secret_configs(static_cast<int>(i)));
    }
  }

  // .envoy.api.v2.TlsParameters tls_params = 1;
  if (this->has_tls_params()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->tls_params_);
  }

  // .envoy.api.v2.CertificateValidationContext validation_context = 3;
  if (this->has_validation_context()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->validation_context_);
  }

  // .envoy.api.v2.CommonTlsContext.DeprecatedV1 deprecated_v1 = 5;
  if (this->has_deprecated_v1()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->deprecated_v1_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommonTlsContext::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.CommonTlsContext)
  GOOGLE_DCHECK_NE(&from, this);
  const CommonTlsContext* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommonTlsContext>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.CommonTlsContext)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.CommonTlsContext)
    MergeFrom(*source);
  }
}

void CommonTlsContext::MergeFrom(const CommonTlsContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.CommonTlsContext)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tls_certificates_.MergeFrom(from.tls_certificates_);
  alpn_protocols_.MergeFrom(from.alpn_protocols_);
  tls_certificate_sds_secret_configs_.MergeFrom(from.tls_certificate_sds_secret_configs_);
  if (from.has_tls_params()) {
    mutable_tls_params()->::envoy::api::v2::TlsParameters::MergeFrom(from.tls_params());
  }
  if (from.has_validation_context()) {
    mutable_validation_context()->::envoy::api::v2::CertificateValidationContext::MergeFrom(from.validation_context());
  }
  if (from.has_deprecated_v1()) {
    mutable_deprecated_v1()->::envoy::api::v2::CommonTlsContext_DeprecatedV1::MergeFrom(from.deprecated_v1());
  }
}

void CommonTlsContext::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.CommonTlsContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonTlsContext::CopyFrom(const CommonTlsContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.CommonTlsContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonTlsContext::IsInitialized() const {
  return true;
}

void CommonTlsContext::Swap(CommonTlsContext* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommonTlsContext::InternalSwap(CommonTlsContext* other) {
  using std::swap;
  tls_certificates_.InternalSwap(&other->tls_certificates_);
  alpn_protocols_.InternalSwap(&other->alpn_protocols_);
  tls_certificate_sds_secret_configs_.InternalSwap(&other->tls_certificate_sds_secret_configs_);
  swap(tls_params_, other->tls_params_);
  swap(validation_context_, other->validation_context_);
  swap(deprecated_v1_, other->deprecated_v1_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommonTlsContext::GetMetadata() const {
  protobuf_api_2fsds_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2fsds_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UpstreamTlsContext::InitAsDefaultInstance() {
  ::envoy::api::v2::_UpstreamTlsContext_default_instance_._instance.get_mutable()->common_tls_context_ = const_cast< ::envoy::api::v2::CommonTlsContext*>(
      ::envoy::api::v2::CommonTlsContext::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpstreamTlsContext::kCommonTlsContextFieldNumber;
const int UpstreamTlsContext::kSniFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpstreamTlsContext::UpstreamTlsContext()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2fsds_2eproto::InitDefaultsUpstreamTlsContext();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.UpstreamTlsContext)
}
UpstreamTlsContext::UpstreamTlsContext(const UpstreamTlsContext& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sni_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sni().size() > 0) {
    sni_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sni_);
  }
  if (from.has_common_tls_context()) {
    common_tls_context_ = new ::envoy::api::v2::CommonTlsContext(*from.common_tls_context_);
  } else {
    common_tls_context_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.UpstreamTlsContext)
}

void UpstreamTlsContext::SharedCtor() {
  sni_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  common_tls_context_ = NULL;
  _cached_size_ = 0;
}

UpstreamTlsContext::~UpstreamTlsContext() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.UpstreamTlsContext)
  SharedDtor();
}

void UpstreamTlsContext::SharedDtor() {
  sni_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete common_tls_context_;
}

void UpstreamTlsContext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpstreamTlsContext::descriptor() {
  ::protobuf_api_2fsds_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2fsds_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpstreamTlsContext& UpstreamTlsContext::default_instance() {
  ::protobuf_api_2fsds_2eproto::InitDefaultsUpstreamTlsContext();
  return *internal_default_instance();
}

UpstreamTlsContext* UpstreamTlsContext::New(::google::protobuf::Arena* arena) const {
  UpstreamTlsContext* n = new UpstreamTlsContext;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpstreamTlsContext::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.UpstreamTlsContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sni_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && common_tls_context_ != NULL) {
    delete common_tls_context_;
  }
  common_tls_context_ = NULL;
  _internal_metadata_.Clear();
}

bool UpstreamTlsContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.UpstreamTlsContext)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.CommonTlsContext common_tls_context = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_common_tls_context()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sni = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sni()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sni().data(), static_cast<int>(this->sni().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.UpstreamTlsContext.sni"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.UpstreamTlsContext)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.UpstreamTlsContext)
  return false;
#undef DO_
}

void UpstreamTlsContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.UpstreamTlsContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.CommonTlsContext common_tls_context = 1;
  if (this->has_common_tls_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->common_tls_context_, output);
  }

  // string sni = 2;
  if (this->sni().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sni().data(), static_cast<int>(this->sni().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.UpstreamTlsContext.sni");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sni(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.UpstreamTlsContext)
}

::google::protobuf::uint8* UpstreamTlsContext::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.UpstreamTlsContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.CommonTlsContext common_tls_context = 1;
  if (this->has_common_tls_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->common_tls_context_, deterministic, target);
  }

  // string sni = 2;
  if (this->sni().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sni().data(), static_cast<int>(this->sni().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.UpstreamTlsContext.sni");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sni(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.UpstreamTlsContext)
  return target;
}

size_t UpstreamTlsContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.UpstreamTlsContext)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string sni = 2;
  if (this->sni().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sni());
  }

  // .envoy.api.v2.CommonTlsContext common_tls_context = 1;
  if (this->has_common_tls_context()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->common_tls_context_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpstreamTlsContext::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.UpstreamTlsContext)
  GOOGLE_DCHECK_NE(&from, this);
  const UpstreamTlsContext* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpstreamTlsContext>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.UpstreamTlsContext)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.UpstreamTlsContext)
    MergeFrom(*source);
  }
}

void UpstreamTlsContext::MergeFrom(const UpstreamTlsContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.UpstreamTlsContext)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sni().size() > 0) {

    sni_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sni_);
  }
  if (from.has_common_tls_context()) {
    mutable_common_tls_context()->::envoy::api::v2::CommonTlsContext::MergeFrom(from.common_tls_context());
  }
}

void UpstreamTlsContext::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.UpstreamTlsContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpstreamTlsContext::CopyFrom(const UpstreamTlsContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.UpstreamTlsContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpstreamTlsContext::IsInitialized() const {
  return true;
}

void UpstreamTlsContext::Swap(UpstreamTlsContext* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpstreamTlsContext::InternalSwap(UpstreamTlsContext* other) {
  using std::swap;
  sni_.Swap(&other->sni_);
  swap(common_tls_context_, other->common_tls_context_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpstreamTlsContext::GetMetadata() const {
  protobuf_api_2fsds_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2fsds_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DownstreamTlsContext::InitAsDefaultInstance() {
  ::envoy::api::v2::_DownstreamTlsContext_default_instance_._instance.get_mutable()->common_tls_context_ = const_cast< ::envoy::api::v2::CommonTlsContext*>(
      ::envoy::api::v2::CommonTlsContext::internal_default_instance());
  ::envoy::api::v2::_DownstreamTlsContext_default_instance_._instance.get_mutable()->require_client_certificate_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
  ::envoy::api::v2::_DownstreamTlsContext_default_instance_._instance.get_mutable()->require_sni_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
  ::envoy::api::v2::_DownstreamTlsContext_default_instance_.session_ticket_keys_ = const_cast< ::envoy::api::v2::TlsSessionTicketKeys*>(
      ::envoy::api::v2::TlsSessionTicketKeys::internal_default_instance());
  ::envoy::api::v2::_DownstreamTlsContext_default_instance_.session_ticket_keys_sds_secret_config_ = const_cast< ::envoy::api::v2::SdsSecretConfig*>(
      ::envoy::api::v2::SdsSecretConfig::internal_default_instance());
}
void DownstreamTlsContext::clear_require_client_certificate() {
  if (GetArenaNoVirtual() == NULL && require_client_certificate_ != NULL) {
    delete require_client_certificate_;
  }
  require_client_certificate_ = NULL;
}
void DownstreamTlsContext::clear_require_sni() {
  if (GetArenaNoVirtual() == NULL && require_sni_ != NULL) {
    delete require_sni_;
  }
  require_sni_ = NULL;
}
void DownstreamTlsContext::set_allocated_session_ticket_keys(::envoy::api::v2::TlsSessionTicketKeys* session_ticket_keys) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_session_ticket_keys_type();
  if (session_ticket_keys) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      session_ticket_keys = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, session_ticket_keys, submessage_arena);
    }
    set_has_session_ticket_keys();
    session_ticket_keys_type_.session_ticket_keys_ = session_ticket_keys;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.DownstreamTlsContext.session_ticket_keys)
}
void DownstreamTlsContext::set_allocated_session_ticket_keys_sds_secret_config(::envoy::api::v2::SdsSecretConfig* session_ticket_keys_sds_secret_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_session_ticket_keys_type();
  if (session_ticket_keys_sds_secret_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      session_ticket_keys_sds_secret_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, session_ticket_keys_sds_secret_config, submessage_arena);
    }
    set_has_session_ticket_keys_sds_secret_config();
    session_ticket_keys_type_.session_ticket_keys_sds_secret_config_ = session_ticket_keys_sds_secret_config;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.DownstreamTlsContext.session_ticket_keys_sds_secret_config)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DownstreamTlsContext::kCommonTlsContextFieldNumber;
const int DownstreamTlsContext::kRequireClientCertificateFieldNumber;
const int DownstreamTlsContext::kRequireSniFieldNumber;
const int DownstreamTlsContext::kSessionTicketKeysFieldNumber;
const int DownstreamTlsContext::kSessionTicketKeysSdsSecretConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DownstreamTlsContext::DownstreamTlsContext()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2fsds_2eproto::InitDefaultsDownstreamTlsContext();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.DownstreamTlsContext)
}
DownstreamTlsContext::DownstreamTlsContext(const DownstreamTlsContext& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_common_tls_context()) {
    common_tls_context_ = new ::envoy::api::v2::CommonTlsContext(*from.common_tls_context_);
  } else {
    common_tls_context_ = NULL;
  }
  if (from.has_require_client_certificate()) {
    require_client_certificate_ = new ::google::protobuf::BoolValue(*from.require_client_certificate_);
  } else {
    require_client_certificate_ = NULL;
  }
  if (from.has_require_sni()) {
    require_sni_ = new ::google::protobuf::BoolValue(*from.require_sni_);
  } else {
    require_sni_ = NULL;
  }
  clear_has_session_ticket_keys_type();
  switch (from.session_ticket_keys_type_case()) {
    case kSessionTicketKeys: {
      mutable_session_ticket_keys()->::envoy::api::v2::TlsSessionTicketKeys::MergeFrom(from.session_ticket_keys());
      break;
    }
    case kSessionTicketKeysSdsSecretConfig: {
      mutable_session_ticket_keys_sds_secret_config()->::envoy::api::v2::SdsSecretConfig::MergeFrom(from.session_ticket_keys_sds_secret_config());
      break;
    }
    case SESSION_TICKET_KEYS_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.DownstreamTlsContext)
}

void DownstreamTlsContext::SharedCtor() {
  ::memset(&common_tls_context_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&require_sni_) -
      reinterpret_cast<char*>(&common_tls_context_)) + sizeof(require_sni_));
  clear_has_session_ticket_keys_type();
  _cached_size_ = 0;
}

DownstreamTlsContext::~DownstreamTlsContext() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.DownstreamTlsContext)
  SharedDtor();
}

void DownstreamTlsContext::SharedDtor() {
  if (this != internal_default_instance()) delete common_tls_context_;
  if (this != internal_default_instance()) delete require_client_certificate_;
  if (this != internal_default_instance()) delete require_sni_;
  if (has_session_ticket_keys_type()) {
    clear_session_ticket_keys_type();
  }
}

void DownstreamTlsContext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DownstreamTlsContext::descriptor() {
  ::protobuf_api_2fsds_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2fsds_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DownstreamTlsContext& DownstreamTlsContext::default_instance() {
  ::protobuf_api_2fsds_2eproto::InitDefaultsDownstreamTlsContext();
  return *internal_default_instance();
}

DownstreamTlsContext* DownstreamTlsContext::New(::google::protobuf::Arena* arena) const {
  DownstreamTlsContext* n = new DownstreamTlsContext;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DownstreamTlsContext::clear_session_ticket_keys_type() {
// @@protoc_insertion_point(one_of_clear_start:envoy.api.v2.DownstreamTlsContext)
  switch (session_ticket_keys_type_case()) {
    case kSessionTicketKeys: {
      delete session_ticket_keys_type_.session_ticket_keys_;
      break;
    }
    case kSessionTicketKeysSdsSecretConfig: {
      delete session_ticket_keys_type_.session_ticket_keys_sds_secret_config_;
      break;
    }
    case SESSION_TICKET_KEYS_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SESSION_TICKET_KEYS_TYPE_NOT_SET;
}


void DownstreamTlsContext::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.DownstreamTlsContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && common_tls_context_ != NULL) {
    delete common_tls_context_;
  }
  common_tls_context_ = NULL;
  if (GetArenaNoVirtual() == NULL && require_client_certificate_ != NULL) {
    delete require_client_certificate_;
  }
  require_client_certificate_ = NULL;
  if (GetArenaNoVirtual() == NULL && require_sni_ != NULL) {
    delete require_sni_;
  }
  require_sni_ = NULL;
  clear_session_ticket_keys_type();
  _internal_metadata_.Clear();
}

bool DownstreamTlsContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.DownstreamTlsContext)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.CommonTlsContext common_tls_context = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_common_tls_context()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue require_client_certificate = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_require_client_certificate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue require_sni = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_require_sni()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.TlsSessionTicketKeys session_ticket_keys = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_session_ticket_keys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.SdsSecretConfig session_ticket_keys_sds_secret_config = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_session_ticket_keys_sds_secret_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.DownstreamTlsContext)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.DownstreamTlsContext)
  return false;
#undef DO_
}

void DownstreamTlsContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.DownstreamTlsContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.CommonTlsContext common_tls_context = 1;
  if (this->has_common_tls_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->common_tls_context_, output);
  }

  // .google.protobuf.BoolValue require_client_certificate = 2;
  if (this->has_require_client_certificate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->require_client_certificate_, output);
  }

  // .google.protobuf.BoolValue require_sni = 3;
  if (this->has_require_sni()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->require_sni_, output);
  }

  // .envoy.api.v2.TlsSessionTicketKeys session_ticket_keys = 4;
  if (has_session_ticket_keys()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *session_ticket_keys_type_.session_ticket_keys_, output);
  }

  // .envoy.api.v2.SdsSecretConfig session_ticket_keys_sds_secret_config = 5;
  if (has_session_ticket_keys_sds_secret_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *session_ticket_keys_type_.session_ticket_keys_sds_secret_config_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.DownstreamTlsContext)
}

::google::protobuf::uint8* DownstreamTlsContext::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.DownstreamTlsContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.CommonTlsContext common_tls_context = 1;
  if (this->has_common_tls_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->common_tls_context_, deterministic, target);
  }

  // .google.protobuf.BoolValue require_client_certificate = 2;
  if (this->has_require_client_certificate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->require_client_certificate_, deterministic, target);
  }

  // .google.protobuf.BoolValue require_sni = 3;
  if (this->has_require_sni()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->require_sni_, deterministic, target);
  }

  // .envoy.api.v2.TlsSessionTicketKeys session_ticket_keys = 4;
  if (has_session_ticket_keys()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *session_ticket_keys_type_.session_ticket_keys_, deterministic, target);
  }

  // .envoy.api.v2.SdsSecretConfig session_ticket_keys_sds_secret_config = 5;
  if (has_session_ticket_keys_sds_secret_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *session_ticket_keys_type_.session_ticket_keys_sds_secret_config_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.DownstreamTlsContext)
  return target;
}

size_t DownstreamTlsContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.DownstreamTlsContext)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .envoy.api.v2.CommonTlsContext common_tls_context = 1;
  if (this->has_common_tls_context()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->common_tls_context_);
  }

  // .google.protobuf.BoolValue require_client_certificate = 2;
  if (this->has_require_client_certificate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->require_client_certificate_);
  }

  // .google.protobuf.BoolValue require_sni = 3;
  if (this->has_require_sni()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->require_sni_);
  }

  switch (session_ticket_keys_type_case()) {
    // .envoy.api.v2.TlsSessionTicketKeys session_ticket_keys = 4;
    case kSessionTicketKeys: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *session_ticket_keys_type_.session_ticket_keys_);
      break;
    }
    // .envoy.api.v2.SdsSecretConfig session_ticket_keys_sds_secret_config = 5;
    case kSessionTicketKeysSdsSecretConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *session_ticket_keys_type_.session_ticket_keys_sds_secret_config_);
      break;
    }
    case SESSION_TICKET_KEYS_TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownstreamTlsContext::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.DownstreamTlsContext)
  GOOGLE_DCHECK_NE(&from, this);
  const DownstreamTlsContext* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DownstreamTlsContext>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.DownstreamTlsContext)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.DownstreamTlsContext)
    MergeFrom(*source);
  }
}

void DownstreamTlsContext::MergeFrom(const DownstreamTlsContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.DownstreamTlsContext)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_common_tls_context()) {
    mutable_common_tls_context()->::envoy::api::v2::CommonTlsContext::MergeFrom(from.common_tls_context());
  }
  if (from.has_require_client_certificate()) {
    mutable_require_client_certificate()->::google::protobuf::BoolValue::MergeFrom(from.require_client_certificate());
  }
  if (from.has_require_sni()) {
    mutable_require_sni()->::google::protobuf::BoolValue::MergeFrom(from.require_sni());
  }
  switch (from.session_ticket_keys_type_case()) {
    case kSessionTicketKeys: {
      mutable_session_ticket_keys()->::envoy::api::v2::TlsSessionTicketKeys::MergeFrom(from.session_ticket_keys());
      break;
    }
    case kSessionTicketKeysSdsSecretConfig: {
      mutable_session_ticket_keys_sds_secret_config()->::envoy::api::v2::SdsSecretConfig::MergeFrom(from.session_ticket_keys_sds_secret_config());
      break;
    }
    case SESSION_TICKET_KEYS_TYPE_NOT_SET: {
      break;
    }
  }
}

void DownstreamTlsContext::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.DownstreamTlsContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownstreamTlsContext::CopyFrom(const DownstreamTlsContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.DownstreamTlsContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownstreamTlsContext::IsInitialized() const {
  return true;
}

void DownstreamTlsContext::Swap(DownstreamTlsContext* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DownstreamTlsContext::InternalSwap(DownstreamTlsContext* other) {
  using std::swap;
  swap(common_tls_context_, other->common_tls_context_);
  swap(require_client_certificate_, other->require_client_certificate_);
  swap(require_sni_, other->require_sni_);
  swap(session_ticket_keys_type_, other->session_ticket_keys_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DownstreamTlsContext::GetMetadata() const {
  protobuf_api_2fsds_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2fsds_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SdsSecretConfig::InitAsDefaultInstance() {
  ::envoy::api::v2::_SdsSecretConfig_default_instance_._instance.get_mutable()->sds_config_ = const_cast< ::envoy::api::v2::ConfigSource*>(
      ::envoy::api::v2::ConfigSource::internal_default_instance());
}
void SdsSecretConfig::clear_sds_config() {
  if (GetArenaNoVirtual() == NULL && sds_config_ != NULL) {
    delete sds_config_;
  }
  sds_config_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SdsSecretConfig::kNameFieldNumber;
const int SdsSecretConfig::kSdsConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SdsSecretConfig::SdsSecretConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2fsds_2eproto::InitDefaultsSdsSecretConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.SdsSecretConfig)
}
SdsSecretConfig::SdsSecretConfig(const SdsSecretConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_sds_config()) {
    sds_config_ = new ::envoy::api::v2::ConfigSource(*from.sds_config_);
  } else {
    sds_config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.SdsSecretConfig)
}

void SdsSecretConfig::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sds_config_ = NULL;
  _cached_size_ = 0;
}

SdsSecretConfig::~SdsSecretConfig() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.SdsSecretConfig)
  SharedDtor();
}

void SdsSecretConfig::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sds_config_;
}

void SdsSecretConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdsSecretConfig::descriptor() {
  ::protobuf_api_2fsds_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2fsds_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SdsSecretConfig& SdsSecretConfig::default_instance() {
  ::protobuf_api_2fsds_2eproto::InitDefaultsSdsSecretConfig();
  return *internal_default_instance();
}

SdsSecretConfig* SdsSecretConfig::New(::google::protobuf::Arena* arena) const {
  SdsSecretConfig* n = new SdsSecretConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SdsSecretConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.SdsSecretConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && sds_config_ != NULL) {
    delete sds_config_;
  }
  sds_config_ = NULL;
  _internal_metadata_.Clear();
}

bool SdsSecretConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.SdsSecretConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.SdsSecretConfig.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.ConfigSource sds_config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sds_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.SdsSecretConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.SdsSecretConfig)
  return false;
#undef DO_
}

void SdsSecretConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.SdsSecretConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.SdsSecretConfig.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .envoy.api.v2.ConfigSource sds_config = 2;
  if (this->has_sds_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->sds_config_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.SdsSecretConfig)
}

::google::protobuf::uint8* SdsSecretConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.SdsSecretConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.SdsSecretConfig.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .envoy.api.v2.ConfigSource sds_config = 2;
  if (this->has_sds_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->sds_config_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.SdsSecretConfig)
  return target;
}

size_t SdsSecretConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.SdsSecretConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .envoy.api.v2.ConfigSource sds_config = 2;
  if (this->has_sds_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->sds_config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdsSecretConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.SdsSecretConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const SdsSecretConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SdsSecretConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.SdsSecretConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.SdsSecretConfig)
    MergeFrom(*source);
  }
}

void SdsSecretConfig::MergeFrom(const SdsSecretConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.SdsSecretConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_sds_config()) {
    mutable_sds_config()->::envoy::api::v2::ConfigSource::MergeFrom(from.sds_config());
  }
}

void SdsSecretConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.SdsSecretConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdsSecretConfig::CopyFrom(const SdsSecretConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.SdsSecretConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdsSecretConfig::IsInitialized() const {
  return true;
}

void SdsSecretConfig::Swap(SdsSecretConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SdsSecretConfig::InternalSwap(SdsSecretConfig* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(sds_config_, other->sds_config_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SdsSecretConfig::GetMetadata() const {
  protobuf_api_2fsds_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2fsds_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Secret::InitAsDefaultInstance() {
  ::envoy::api::v2::_Secret_default_instance_.tls_certificate_ = const_cast< ::envoy::api::v2::TlsCertificate*>(
      ::envoy::api::v2::TlsCertificate::internal_default_instance());
  ::envoy::api::v2::_Secret_default_instance_.session_ticket_keys_ = const_cast< ::envoy::api::v2::TlsSessionTicketKeys*>(
      ::envoy::api::v2::TlsSessionTicketKeys::internal_default_instance());
}
void Secret::set_allocated_tls_certificate(::envoy::api::v2::TlsCertificate* tls_certificate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (tls_certificate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tls_certificate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tls_certificate, submessage_arena);
    }
    set_has_tls_certificate();
    type_.tls_certificate_ = tls_certificate;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Secret.tls_certificate)
}
void Secret::set_allocated_session_ticket_keys(::envoy::api::v2::TlsSessionTicketKeys* session_ticket_keys) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (session_ticket_keys) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      session_ticket_keys = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, session_ticket_keys, submessage_arena);
    }
    set_has_session_ticket_keys();
    type_.session_ticket_keys_ = session_ticket_keys;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Secret.session_ticket_keys)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Secret::kNameFieldNumber;
const int Secret::kTlsCertificateFieldNumber;
const int Secret::kSessionTicketKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Secret::Secret()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2fsds_2eproto::InitDefaultsSecret();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.Secret)
}
Secret::Secret(const Secret& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  clear_has_type();
  switch (from.type_case()) {
    case kTlsCertificate: {
      mutable_tls_certificate()->::envoy::api::v2::TlsCertificate::MergeFrom(from.tls_certificate());
      break;
    }
    case kSessionTicketKeys: {
      mutable_session_ticket_keys()->::envoy::api::v2::TlsSessionTicketKeys::MergeFrom(from.session_ticket_keys());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.Secret)
}

void Secret::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
  _cached_size_ = 0;
}

Secret::~Secret() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.Secret)
  SharedDtor();
}

void Secret::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_type()) {
    clear_type();
  }
}

void Secret::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Secret::descriptor() {
  ::protobuf_api_2fsds_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2fsds_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Secret& Secret::default_instance() {
  ::protobuf_api_2fsds_2eproto::InitDefaultsSecret();
  return *internal_default_instance();
}

Secret* Secret::New(::google::protobuf::Arena* arena) const {
  Secret* n = new Secret;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Secret::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:envoy.api.v2.Secret)
  switch (type_case()) {
    case kTlsCertificate: {
      delete type_.tls_certificate_;
      break;
    }
    case kSessionTicketKeys: {
      delete type_.session_ticket_keys_;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void Secret::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.Secret)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_type();
  _internal_metadata_.Clear();
}

bool Secret::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.Secret)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.Secret.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.TlsCertificate tls_certificate = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tls_certificate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.TlsSessionTicketKeys session_ticket_keys = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_session_ticket_keys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.Secret)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.Secret)
  return false;
#undef DO_
}

void Secret::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.Secret)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.Secret.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .envoy.api.v2.TlsCertificate tls_certificate = 2;
  if (has_tls_certificate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *type_.tls_certificate_, output);
  }

  // .envoy.api.v2.TlsSessionTicketKeys session_ticket_keys = 3;
  if (has_session_ticket_keys()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *type_.session_ticket_keys_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.Secret)
}

::google::protobuf::uint8* Secret::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.Secret)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.Secret.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .envoy.api.v2.TlsCertificate tls_certificate = 2;
  if (has_tls_certificate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *type_.tls_certificate_, deterministic, target);
  }

  // .envoy.api.v2.TlsSessionTicketKeys session_ticket_keys = 3;
  if (has_session_ticket_keys()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *type_.session_ticket_keys_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.Secret)
  return target;
}

size_t Secret::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.Secret)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  switch (type_case()) {
    // .envoy.api.v2.TlsCertificate tls_certificate = 2;
    case kTlsCertificate: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.tls_certificate_);
      break;
    }
    // .envoy.api.v2.TlsSessionTicketKeys session_ticket_keys = 3;
    case kSessionTicketKeys: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.session_ticket_keys_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Secret::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.Secret)
  GOOGLE_DCHECK_NE(&from, this);
  const Secret* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Secret>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.Secret)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.Secret)
    MergeFrom(*source);
  }
}

void Secret::MergeFrom(const Secret& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.Secret)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  switch (from.type_case()) {
    case kTlsCertificate: {
      mutable_tls_certificate()->::envoy::api::v2::TlsCertificate::MergeFrom(from.tls_certificate());
      break;
    }
    case kSessionTicketKeys: {
      mutable_session_ticket_keys()->::envoy::api::v2::TlsSessionTicketKeys::MergeFrom(from.session_ticket_keys());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void Secret::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.Secret)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Secret::CopyFrom(const Secret& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.Secret)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Secret::IsInitialized() const {
  return true;
}

void Secret::Swap(Secret* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Secret::InternalSwap(Secret* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Secret::GetMetadata() const {
  protobuf_api_2fsds_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2fsds_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v2
}  // namespace api
}  // namespace envoy

// @@protoc_insertion_point(global_scope)
