// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/health_check.proto

#include "api/health_check.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
namespace envoy {
namespace api {
namespace v2 {
class HealthCheck_PayloadDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HealthCheck_Payload>
      _instance;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::google::protobuf::internal::ArenaStringPtr binary_;
} _HealthCheck_Payload_default_instance_;
class HealthCheck_HttpHealthCheckDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HealthCheck_HttpHealthCheck>
      _instance;
} _HealthCheck_HttpHealthCheck_default_instance_;
class HealthCheck_TcpHealthCheckDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HealthCheck_TcpHealthCheck>
      _instance;
} _HealthCheck_TcpHealthCheck_default_instance_;
class HealthCheck_RedisHealthCheckDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HealthCheck_RedisHealthCheck>
      _instance;
} _HealthCheck_RedisHealthCheck_default_instance_;
class HealthCheckDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HealthCheck>
      _instance;
  const ::envoy::api::v2::HealthCheck_HttpHealthCheck* http_health_check_;
  const ::envoy::api::v2::HealthCheck_TcpHealthCheck* tcp_health_check_;
  const ::envoy::api::v2::HealthCheck_RedisHealthCheck* redis_health_check_;
} _HealthCheck_default_instance_;
}  // namespace v2
}  // namespace api
}  // namespace envoy
namespace protobuf_api_2fhealth_5fcheck_2eproto {
void InitDefaultsHealthCheck_PayloadImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  {
    void* ptr = &::envoy::api::v2::_HealthCheck_Payload_default_instance_;
    new (ptr) ::envoy::api::v2::HealthCheck_Payload();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::HealthCheck_Payload::InitAsDefaultInstance();
}

void InitDefaultsHealthCheck_Payload() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHealthCheck_PayloadImpl);
}

void InitDefaultsHealthCheck_HttpHealthCheckImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  protobuf_api_2fhealth_5fcheck_2eproto::InitDefaultsHealthCheck_Payload();
  {
    void* ptr = &::envoy::api::v2::_HealthCheck_HttpHealthCheck_default_instance_;
    new (ptr) ::envoy::api::v2::HealthCheck_HttpHealthCheck();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::HealthCheck_HttpHealthCheck::InitAsDefaultInstance();
}

void InitDefaultsHealthCheck_HttpHealthCheck() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHealthCheck_HttpHealthCheckImpl);
}

void InitDefaultsHealthCheck_TcpHealthCheckImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  protobuf_api_2fhealth_5fcheck_2eproto::InitDefaultsHealthCheck_Payload();
  {
    void* ptr = &::envoy::api::v2::_HealthCheck_TcpHealthCheck_default_instance_;
    new (ptr) ::envoy::api::v2::HealthCheck_TcpHealthCheck();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::HealthCheck_TcpHealthCheck::InitAsDefaultInstance();
}

void InitDefaultsHealthCheck_TcpHealthCheck() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHealthCheck_TcpHealthCheckImpl);
}

void InitDefaultsHealthCheck_RedisHealthCheckImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  {
    void* ptr = &::envoy::api::v2::_HealthCheck_RedisHealthCheck_default_instance_;
    new (ptr) ::envoy::api::v2::HealthCheck_RedisHealthCheck();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::HealthCheck_RedisHealthCheck::InitAsDefaultInstance();
}

void InitDefaultsHealthCheck_RedisHealthCheck() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHealthCheck_RedisHealthCheckImpl);
}

void InitDefaultsHealthCheckImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  protobuf_google_2fprotobuf_2fduration_2eproto::InitDefaultsDuration();
  protobuf_google_2fprotobuf_2fwrappers_2eproto::InitDefaultsUInt32Value();
  protobuf_google_2fprotobuf_2fwrappers_2eproto::InitDefaultsBoolValue();
  protobuf_api_2fhealth_5fcheck_2eproto::InitDefaultsHealthCheck_HttpHealthCheck();
  protobuf_api_2fhealth_5fcheck_2eproto::InitDefaultsHealthCheck_TcpHealthCheck();
  protobuf_api_2fhealth_5fcheck_2eproto::InitDefaultsHealthCheck_RedisHealthCheck();
  {
    void* ptr = &::envoy::api::v2::_HealthCheck_default_instance_;
    new (ptr) ::envoy::api::v2::HealthCheck();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::api::v2::HealthCheck::InitAsDefaultInstance();
}

void InitDefaultsHealthCheck() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHealthCheckImpl);
}

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::HealthCheck_Payload, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::HealthCheck_Payload, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::envoy::api::v2::HealthCheck_PayloadDefaultTypeInternal, text_),
  offsetof(::envoy::api::v2::HealthCheck_PayloadDefaultTypeInternal, binary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::HealthCheck_Payload, payload_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::HealthCheck_HttpHealthCheck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::HealthCheck_HttpHealthCheck, host_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::HealthCheck_HttpHealthCheck, path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::HealthCheck_HttpHealthCheck, send_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::HealthCheck_HttpHealthCheck, receive_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::HealthCheck_HttpHealthCheck, service_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::HealthCheck_TcpHealthCheck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::HealthCheck_TcpHealthCheck, send_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::HealthCheck_TcpHealthCheck, receive_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::HealthCheck_RedisHealthCheck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::HealthCheck, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::HealthCheck, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::HealthCheck, timeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::HealthCheck, interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::HealthCheck, interval_jitter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::HealthCheck, unhealthy_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::HealthCheck, healthy_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::HealthCheck, alt_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::HealthCheck, reuse_connection_),
  offsetof(::envoy::api::v2::HealthCheckDefaultTypeInternal, http_health_check_),
  offsetof(::envoy::api::v2::HealthCheckDefaultTypeInternal, tcp_health_check_),
  offsetof(::envoy::api::v2::HealthCheckDefaultTypeInternal, redis_health_check_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::envoy::api::v2::HealthCheck, health_checker_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::envoy::api::v2::HealthCheck_Payload)},
  { 8, -1, sizeof(::envoy::api::v2::HealthCheck_HttpHealthCheck)},
  { 18, -1, sizeof(::envoy::api::v2::HealthCheck_TcpHealthCheck)},
  { 25, -1, sizeof(::envoy::api::v2::HealthCheck_RedisHealthCheck)},
  { 30, -1, sizeof(::envoy::api::v2::HealthCheck)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::_HealthCheck_Payload_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::_HealthCheck_HttpHealthCheck_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::_HealthCheck_TcpHealthCheck_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::_HealthCheck_RedisHealthCheck_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::envoy::api::v2::_HealthCheck_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "api/health_check.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\026api/health_check.proto\022\014envoy.api.v2\032\036"
      "google/protobuf/duration.proto\032\036google/p"
      "rotobuf/wrappers.proto\"\314\007\n\013HealthCheck\022*"
      "\n\007timeout\030\001 \001(\0132\031.google.protobuf.Durati"
      "on\022+\n\010interval\030\002 \001(\0132\031.google.protobuf.D"
      "uration\0222\n\017interval_jitter\030\003 \001(\0132\031.googl"
      "e.protobuf.Duration\0229\n\023unhealthy_thresho"
      "ld\030\004 \001(\0132\034.google.protobuf.UInt32Value\0227"
      "\n\021healthy_threshold\030\005 \001(\0132\034.google.proto"
      "buf.UInt32Value\022.\n\010alt_port\030\006 \001(\0132\034.goog"
      "le.protobuf.UInt32Value\0224\n\020reuse_connect"
      "ion\030\007 \001(\0132\032.google.protobuf.BoolValue\022F\n"
      "\021http_health_check\030\010 \001(\0132).envoy.api.v2."
      "HealthCheck.HttpHealthCheckH\000\022D\n\020tcp_hea"
      "lth_check\030\t \001(\0132(.envoy.api.v2.HealthChe"
      "ck.TcpHealthCheckH\000\022H\n\022redis_health_chec"
      "k\030\n \001(\0132*.envoy.api.v2.HealthCheck.Redis"
      "HealthCheckH\000\0326\n\007Payload\022\016\n\004text\030\001 \001(\tH\000"
      "\022\020\n\006binary\030\002 \001(\014H\000B\t\n\007payload\032\250\001\n\017HttpHe"
      "althCheck\022\014\n\004host\030\001 \001(\t\022\014\n\004path\030\002 \001(\t\022/\n"
      "\004send\030\003 \001(\0132!.envoy.api.v2.HealthCheck.P"
      "ayload\0222\n\007receive\030\004 \001(\0132!.envoy.api.v2.H"
      "ealthCheck.Payload\022\024\n\014service_name\030\005 \001(\t"
      "\032u\n\016TcpHealthCheck\022/\n\004send\030\001 \001(\0132!.envoy"
      ".api.v2.HealthCheck.Payload\0222\n\007receive\030\002"
      " \003(\0132!.envoy.api.v2.HealthCheck.Payload\032"
      "\022\n\020RedisHealthCheckB\020\n\016health_checker*R\n"
      "\014HealthStatus\022\013\n\007UNKNOWN\020\000\022\013\n\007HEALTHY\020\001\022"
      "\r\n\tUNHEALTHY\020\002\022\014\n\010DRAINING\020\003\022\013\n\007TIMEOUT\020"
      "\004b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1169);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "api/health_check.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2fduration_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2fwrappers_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_api_2fhealth_5fcheck_2eproto
namespace envoy {
namespace api {
namespace v2 {
const ::google::protobuf::EnumDescriptor* HealthStatus_descriptor() {
  protobuf_api_2fhealth_5fcheck_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fhealth_5fcheck_2eproto::file_level_enum_descriptors[0];
}
bool HealthStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void HealthCheck_Payload::InitAsDefaultInstance() {
  ::envoy::api::v2::_HealthCheck_Payload_default_instance_.text_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::envoy::api::v2::_HealthCheck_Payload_default_instance_.binary_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HealthCheck_Payload::kTextFieldNumber;
const int HealthCheck_Payload::kBinaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HealthCheck_Payload::HealthCheck_Payload()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2fhealth_5fcheck_2eproto::InitDefaultsHealthCheck_Payload();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.HealthCheck.Payload)
}
HealthCheck_Payload::HealthCheck_Payload(const HealthCheck_Payload& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_payload();
  switch (from.payload_case()) {
    case kText: {
      set_text(from.text());
      break;
    }
    case kBinary: {
      set_binary(from.binary());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.HealthCheck.Payload)
}

void HealthCheck_Payload::SharedCtor() {
  clear_has_payload();
  _cached_size_ = 0;
}

HealthCheck_Payload::~HealthCheck_Payload() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.HealthCheck.Payload)
  SharedDtor();
}

void HealthCheck_Payload::SharedDtor() {
  if (has_payload()) {
    clear_payload();
  }
}

void HealthCheck_Payload::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HealthCheck_Payload::descriptor() {
  ::protobuf_api_2fhealth_5fcheck_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2fhealth_5fcheck_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HealthCheck_Payload& HealthCheck_Payload::default_instance() {
  ::protobuf_api_2fhealth_5fcheck_2eproto::InitDefaultsHealthCheck_Payload();
  return *internal_default_instance();
}

HealthCheck_Payload* HealthCheck_Payload::New(::google::protobuf::Arena* arena) const {
  HealthCheck_Payload* n = new HealthCheck_Payload;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HealthCheck_Payload::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:envoy.api.v2.HealthCheck.Payload)
  switch (payload_case()) {
    case kText: {
      payload_.text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kBinary: {
      payload_.binary_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void HealthCheck_Payload::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.HealthCheck.Payload)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_payload();
  _internal_metadata_.Clear();
}

bool HealthCheck_Payload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.HealthCheck.Payload)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.HealthCheck.Payload.text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes binary = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_binary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.HealthCheck.Payload)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.HealthCheck.Payload)
  return false;
#undef DO_
}

void HealthCheck_Payload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.HealthCheck.Payload)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.HealthCheck.Payload.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  // bytes binary = 2;
  if (has_binary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->binary(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.HealthCheck.Payload)
}

::google::protobuf::uint8* HealthCheck_Payload::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.HealthCheck.Payload)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.HealthCheck.Payload.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  // bytes binary = 2;
  if (has_binary()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->binary(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.HealthCheck.Payload)
  return target;
}

size_t HealthCheck_Payload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.HealthCheck.Payload)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (payload_case()) {
    // string text = 1;
    case kText: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
      break;
    }
    // bytes binary = 2;
    case kBinary: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->binary());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HealthCheck_Payload::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.HealthCheck.Payload)
  GOOGLE_DCHECK_NE(&from, this);
  const HealthCheck_Payload* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HealthCheck_Payload>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.HealthCheck.Payload)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.HealthCheck.Payload)
    MergeFrom(*source);
  }
}

void HealthCheck_Payload::MergeFrom(const HealthCheck_Payload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.HealthCheck.Payload)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.payload_case()) {
    case kText: {
      set_text(from.text());
      break;
    }
    case kBinary: {
      set_binary(from.binary());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
}

void HealthCheck_Payload::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.HealthCheck.Payload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HealthCheck_Payload::CopyFrom(const HealthCheck_Payload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.HealthCheck.Payload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthCheck_Payload::IsInitialized() const {
  return true;
}

void HealthCheck_Payload::Swap(HealthCheck_Payload* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HealthCheck_Payload::InternalSwap(HealthCheck_Payload* other) {
  using std::swap;
  swap(payload_, other->payload_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HealthCheck_Payload::GetMetadata() const {
  protobuf_api_2fhealth_5fcheck_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2fhealth_5fcheck_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HealthCheck_HttpHealthCheck::InitAsDefaultInstance() {
  ::envoy::api::v2::_HealthCheck_HttpHealthCheck_default_instance_._instance.get_mutable()->send_ = const_cast< ::envoy::api::v2::HealthCheck_Payload*>(
      ::envoy::api::v2::HealthCheck_Payload::internal_default_instance());
  ::envoy::api::v2::_HealthCheck_HttpHealthCheck_default_instance_._instance.get_mutable()->receive_ = const_cast< ::envoy::api::v2::HealthCheck_Payload*>(
      ::envoy::api::v2::HealthCheck_Payload::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HealthCheck_HttpHealthCheck::kHostFieldNumber;
const int HealthCheck_HttpHealthCheck::kPathFieldNumber;
const int HealthCheck_HttpHealthCheck::kSendFieldNumber;
const int HealthCheck_HttpHealthCheck::kReceiveFieldNumber;
const int HealthCheck_HttpHealthCheck::kServiceNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HealthCheck_HttpHealthCheck::HealthCheck_HttpHealthCheck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2fhealth_5fcheck_2eproto::InitDefaultsHealthCheck_HttpHealthCheck();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.HealthCheck.HttpHealthCheck)
}
HealthCheck_HttpHealthCheck::HealthCheck_HttpHealthCheck(const HealthCheck_HttpHealthCheck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.host().size() > 0) {
    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.service_name().size() > 0) {
    service_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  if (from.has_send()) {
    send_ = new ::envoy::api::v2::HealthCheck_Payload(*from.send_);
  } else {
    send_ = NULL;
  }
  if (from.has_receive()) {
    receive_ = new ::envoy::api::v2::HealthCheck_Payload(*from.receive_);
  } else {
    receive_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.HealthCheck.HttpHealthCheck)
}

void HealthCheck_HttpHealthCheck::SharedCtor() {
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&send_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&receive_) -
      reinterpret_cast<char*>(&send_)) + sizeof(receive_));
  _cached_size_ = 0;
}

HealthCheck_HttpHealthCheck::~HealthCheck_HttpHealthCheck() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.HealthCheck.HttpHealthCheck)
  SharedDtor();
}

void HealthCheck_HttpHealthCheck::SharedDtor() {
  host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete send_;
  if (this != internal_default_instance()) delete receive_;
}

void HealthCheck_HttpHealthCheck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HealthCheck_HttpHealthCheck::descriptor() {
  ::protobuf_api_2fhealth_5fcheck_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2fhealth_5fcheck_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HealthCheck_HttpHealthCheck& HealthCheck_HttpHealthCheck::default_instance() {
  ::protobuf_api_2fhealth_5fcheck_2eproto::InitDefaultsHealthCheck_HttpHealthCheck();
  return *internal_default_instance();
}

HealthCheck_HttpHealthCheck* HealthCheck_HttpHealthCheck::New(::google::protobuf::Arena* arena) const {
  HealthCheck_HttpHealthCheck* n = new HealthCheck_HttpHealthCheck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HealthCheck_HttpHealthCheck::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.HealthCheck.HttpHealthCheck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && send_ != NULL) {
    delete send_;
  }
  send_ = NULL;
  if (GetArenaNoVirtual() == NULL && receive_ != NULL) {
    delete receive_;
  }
  receive_ = NULL;
  _internal_metadata_.Clear();
}

bool HealthCheck_HttpHealthCheck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.HealthCheck.HttpHealthCheck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string host = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->host().data(), static_cast<int>(this->host().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.HealthCheck.HttpHealthCheck.host"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.HealthCheck.HttpHealthCheck.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.HealthCheck.Payload send = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_send()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.HealthCheck.Payload receive = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_receive()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string service_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->service_name().data(), static_cast<int>(this->service_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.HealthCheck.HttpHealthCheck.service_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.HealthCheck.HttpHealthCheck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.HealthCheck.HttpHealthCheck)
  return false;
#undef DO_
}

void HealthCheck_HttpHealthCheck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.HealthCheck.HttpHealthCheck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string host = 1;
  if (this->host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.HealthCheck.HttpHealthCheck.host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->host(), output);
  }

  // string path = 2;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.HealthCheck.HttpHealthCheck.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->path(), output);
  }

  // .envoy.api.v2.HealthCheck.Payload send = 3;
  if (this->has_send()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->send_, output);
  }

  // .envoy.api.v2.HealthCheck.Payload receive = 4;
  if (this->has_receive()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->receive_, output);
  }

  // string service_name = 5;
  if (this->service_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_name().data(), static_cast<int>(this->service_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.HealthCheck.HttpHealthCheck.service_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->service_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.HealthCheck.HttpHealthCheck)
}

::google::protobuf::uint8* HealthCheck_HttpHealthCheck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.HealthCheck.HttpHealthCheck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string host = 1;
  if (this->host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.HealthCheck.HttpHealthCheck.host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host(), target);
  }

  // string path = 2;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.HealthCheck.HttpHealthCheck.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  // .envoy.api.v2.HealthCheck.Payload send = 3;
  if (this->has_send()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->send_, deterministic, target);
  }

  // .envoy.api.v2.HealthCheck.Payload receive = 4;
  if (this->has_receive()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->receive_, deterministic, target);
  }

  // string service_name = 5;
  if (this->service_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_name().data(), static_cast<int>(this->service_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.HealthCheck.HttpHealthCheck.service_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->service_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.HealthCheck.HttpHealthCheck)
  return target;
}

size_t HealthCheck_HttpHealthCheck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.HealthCheck.HttpHealthCheck)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string host = 1;
  if (this->host().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host());
  }

  // string path = 2;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // string service_name = 5;
  if (this->service_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service_name());
  }

  // .envoy.api.v2.HealthCheck.Payload send = 3;
  if (this->has_send()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->send_);
  }

  // .envoy.api.v2.HealthCheck.Payload receive = 4;
  if (this->has_receive()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->receive_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HealthCheck_HttpHealthCheck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.HealthCheck.HttpHealthCheck)
  GOOGLE_DCHECK_NE(&from, this);
  const HealthCheck_HttpHealthCheck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HealthCheck_HttpHealthCheck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.HealthCheck.HttpHealthCheck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.HealthCheck.HttpHealthCheck)
    MergeFrom(*source);
  }
}

void HealthCheck_HttpHealthCheck::MergeFrom(const HealthCheck_HttpHealthCheck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.HealthCheck.HttpHealthCheck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.host().size() > 0) {

    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.service_name().size() > 0) {

    service_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  if (from.has_send()) {
    mutable_send()->::envoy::api::v2::HealthCheck_Payload::MergeFrom(from.send());
  }
  if (from.has_receive()) {
    mutable_receive()->::envoy::api::v2::HealthCheck_Payload::MergeFrom(from.receive());
  }
}

void HealthCheck_HttpHealthCheck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.HealthCheck.HttpHealthCheck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HealthCheck_HttpHealthCheck::CopyFrom(const HealthCheck_HttpHealthCheck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.HealthCheck.HttpHealthCheck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthCheck_HttpHealthCheck::IsInitialized() const {
  return true;
}

void HealthCheck_HttpHealthCheck::Swap(HealthCheck_HttpHealthCheck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HealthCheck_HttpHealthCheck::InternalSwap(HealthCheck_HttpHealthCheck* other) {
  using std::swap;
  host_.Swap(&other->host_);
  path_.Swap(&other->path_);
  service_name_.Swap(&other->service_name_);
  swap(send_, other->send_);
  swap(receive_, other->receive_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HealthCheck_HttpHealthCheck::GetMetadata() const {
  protobuf_api_2fhealth_5fcheck_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2fhealth_5fcheck_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HealthCheck_TcpHealthCheck::InitAsDefaultInstance() {
  ::envoy::api::v2::_HealthCheck_TcpHealthCheck_default_instance_._instance.get_mutable()->send_ = const_cast< ::envoy::api::v2::HealthCheck_Payload*>(
      ::envoy::api::v2::HealthCheck_Payload::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HealthCheck_TcpHealthCheck::kSendFieldNumber;
const int HealthCheck_TcpHealthCheck::kReceiveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HealthCheck_TcpHealthCheck::HealthCheck_TcpHealthCheck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2fhealth_5fcheck_2eproto::InitDefaultsHealthCheck_TcpHealthCheck();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.HealthCheck.TcpHealthCheck)
}
HealthCheck_TcpHealthCheck::HealthCheck_TcpHealthCheck(const HealthCheck_TcpHealthCheck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      receive_(from.receive_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_send()) {
    send_ = new ::envoy::api::v2::HealthCheck_Payload(*from.send_);
  } else {
    send_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.HealthCheck.TcpHealthCheck)
}

void HealthCheck_TcpHealthCheck::SharedCtor() {
  send_ = NULL;
  _cached_size_ = 0;
}

HealthCheck_TcpHealthCheck::~HealthCheck_TcpHealthCheck() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.HealthCheck.TcpHealthCheck)
  SharedDtor();
}

void HealthCheck_TcpHealthCheck::SharedDtor() {
  if (this != internal_default_instance()) delete send_;
}

void HealthCheck_TcpHealthCheck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HealthCheck_TcpHealthCheck::descriptor() {
  ::protobuf_api_2fhealth_5fcheck_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2fhealth_5fcheck_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HealthCheck_TcpHealthCheck& HealthCheck_TcpHealthCheck::default_instance() {
  ::protobuf_api_2fhealth_5fcheck_2eproto::InitDefaultsHealthCheck_TcpHealthCheck();
  return *internal_default_instance();
}

HealthCheck_TcpHealthCheck* HealthCheck_TcpHealthCheck::New(::google::protobuf::Arena* arena) const {
  HealthCheck_TcpHealthCheck* n = new HealthCheck_TcpHealthCheck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HealthCheck_TcpHealthCheck::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.HealthCheck.TcpHealthCheck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  receive_.Clear();
  if (GetArenaNoVirtual() == NULL && send_ != NULL) {
    delete send_;
  }
  send_ = NULL;
  _internal_metadata_.Clear();
}

bool HealthCheck_TcpHealthCheck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.HealthCheck.TcpHealthCheck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.HealthCheck.Payload send = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_send()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .envoy.api.v2.HealthCheck.Payload receive = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_receive()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.HealthCheck.TcpHealthCheck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.HealthCheck.TcpHealthCheck)
  return false;
#undef DO_
}

void HealthCheck_TcpHealthCheck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.HealthCheck.TcpHealthCheck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.HealthCheck.Payload send = 1;
  if (this->has_send()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->send_, output);
  }

  // repeated .envoy.api.v2.HealthCheck.Payload receive = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->receive_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->receive(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.HealthCheck.TcpHealthCheck)
}

::google::protobuf::uint8* HealthCheck_TcpHealthCheck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.HealthCheck.TcpHealthCheck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.HealthCheck.Payload send = 1;
  if (this->has_send()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->send_, deterministic, target);
  }

  // repeated .envoy.api.v2.HealthCheck.Payload receive = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->receive_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->receive(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.HealthCheck.TcpHealthCheck)
  return target;
}

size_t HealthCheck_TcpHealthCheck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.HealthCheck.TcpHealthCheck)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .envoy.api.v2.HealthCheck.Payload receive = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->receive_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->receive(static_cast<int>(i)));
    }
  }

  // .envoy.api.v2.HealthCheck.Payload send = 1;
  if (this->has_send()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->send_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HealthCheck_TcpHealthCheck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.HealthCheck.TcpHealthCheck)
  GOOGLE_DCHECK_NE(&from, this);
  const HealthCheck_TcpHealthCheck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HealthCheck_TcpHealthCheck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.HealthCheck.TcpHealthCheck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.HealthCheck.TcpHealthCheck)
    MergeFrom(*source);
  }
}

void HealthCheck_TcpHealthCheck::MergeFrom(const HealthCheck_TcpHealthCheck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.HealthCheck.TcpHealthCheck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  receive_.MergeFrom(from.receive_);
  if (from.has_send()) {
    mutable_send()->::envoy::api::v2::HealthCheck_Payload::MergeFrom(from.send());
  }
}

void HealthCheck_TcpHealthCheck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.HealthCheck.TcpHealthCheck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HealthCheck_TcpHealthCheck::CopyFrom(const HealthCheck_TcpHealthCheck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.HealthCheck.TcpHealthCheck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthCheck_TcpHealthCheck::IsInitialized() const {
  return true;
}

void HealthCheck_TcpHealthCheck::Swap(HealthCheck_TcpHealthCheck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HealthCheck_TcpHealthCheck::InternalSwap(HealthCheck_TcpHealthCheck* other) {
  using std::swap;
  receive_.InternalSwap(&other->receive_);
  swap(send_, other->send_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HealthCheck_TcpHealthCheck::GetMetadata() const {
  protobuf_api_2fhealth_5fcheck_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2fhealth_5fcheck_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HealthCheck_RedisHealthCheck::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HealthCheck_RedisHealthCheck::HealthCheck_RedisHealthCheck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2fhealth_5fcheck_2eproto::InitDefaultsHealthCheck_RedisHealthCheck();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.HealthCheck.RedisHealthCheck)
}
HealthCheck_RedisHealthCheck::HealthCheck_RedisHealthCheck(const HealthCheck_RedisHealthCheck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.HealthCheck.RedisHealthCheck)
}

void HealthCheck_RedisHealthCheck::SharedCtor() {
  _cached_size_ = 0;
}

HealthCheck_RedisHealthCheck::~HealthCheck_RedisHealthCheck() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.HealthCheck.RedisHealthCheck)
  SharedDtor();
}

void HealthCheck_RedisHealthCheck::SharedDtor() {
}

void HealthCheck_RedisHealthCheck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HealthCheck_RedisHealthCheck::descriptor() {
  ::protobuf_api_2fhealth_5fcheck_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2fhealth_5fcheck_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HealthCheck_RedisHealthCheck& HealthCheck_RedisHealthCheck::default_instance() {
  ::protobuf_api_2fhealth_5fcheck_2eproto::InitDefaultsHealthCheck_RedisHealthCheck();
  return *internal_default_instance();
}

HealthCheck_RedisHealthCheck* HealthCheck_RedisHealthCheck::New(::google::protobuf::Arena* arena) const {
  HealthCheck_RedisHealthCheck* n = new HealthCheck_RedisHealthCheck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HealthCheck_RedisHealthCheck::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.HealthCheck.RedisHealthCheck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool HealthCheck_RedisHealthCheck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.HealthCheck.RedisHealthCheck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.HealthCheck.RedisHealthCheck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.HealthCheck.RedisHealthCheck)
  return false;
#undef DO_
}

void HealthCheck_RedisHealthCheck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.HealthCheck.RedisHealthCheck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.HealthCheck.RedisHealthCheck)
}

::google::protobuf::uint8* HealthCheck_RedisHealthCheck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.HealthCheck.RedisHealthCheck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.HealthCheck.RedisHealthCheck)
  return target;
}

size_t HealthCheck_RedisHealthCheck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.HealthCheck.RedisHealthCheck)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HealthCheck_RedisHealthCheck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.HealthCheck.RedisHealthCheck)
  GOOGLE_DCHECK_NE(&from, this);
  const HealthCheck_RedisHealthCheck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HealthCheck_RedisHealthCheck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.HealthCheck.RedisHealthCheck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.HealthCheck.RedisHealthCheck)
    MergeFrom(*source);
  }
}

void HealthCheck_RedisHealthCheck::MergeFrom(const HealthCheck_RedisHealthCheck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.HealthCheck.RedisHealthCheck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void HealthCheck_RedisHealthCheck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.HealthCheck.RedisHealthCheck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HealthCheck_RedisHealthCheck::CopyFrom(const HealthCheck_RedisHealthCheck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.HealthCheck.RedisHealthCheck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthCheck_RedisHealthCheck::IsInitialized() const {
  return true;
}

void HealthCheck_RedisHealthCheck::Swap(HealthCheck_RedisHealthCheck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HealthCheck_RedisHealthCheck::InternalSwap(HealthCheck_RedisHealthCheck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HealthCheck_RedisHealthCheck::GetMetadata() const {
  protobuf_api_2fhealth_5fcheck_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2fhealth_5fcheck_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HealthCheck::InitAsDefaultInstance() {
  ::envoy::api::v2::_HealthCheck_default_instance_._instance.get_mutable()->timeout_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  ::envoy::api::v2::_HealthCheck_default_instance_._instance.get_mutable()->interval_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  ::envoy::api::v2::_HealthCheck_default_instance_._instance.get_mutable()->interval_jitter_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  ::envoy::api::v2::_HealthCheck_default_instance_._instance.get_mutable()->unhealthy_threshold_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
  ::envoy::api::v2::_HealthCheck_default_instance_._instance.get_mutable()->healthy_threshold_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
  ::envoy::api::v2::_HealthCheck_default_instance_._instance.get_mutable()->alt_port_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
  ::envoy::api::v2::_HealthCheck_default_instance_._instance.get_mutable()->reuse_connection_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
  ::envoy::api::v2::_HealthCheck_default_instance_.http_health_check_ = const_cast< ::envoy::api::v2::HealthCheck_HttpHealthCheck*>(
      ::envoy::api::v2::HealthCheck_HttpHealthCheck::internal_default_instance());
  ::envoy::api::v2::_HealthCheck_default_instance_.tcp_health_check_ = const_cast< ::envoy::api::v2::HealthCheck_TcpHealthCheck*>(
      ::envoy::api::v2::HealthCheck_TcpHealthCheck::internal_default_instance());
  ::envoy::api::v2::_HealthCheck_default_instance_.redis_health_check_ = const_cast< ::envoy::api::v2::HealthCheck_RedisHealthCheck*>(
      ::envoy::api::v2::HealthCheck_RedisHealthCheck::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HealthCheck::kTimeoutFieldNumber;
const int HealthCheck::kIntervalFieldNumber;
const int HealthCheck::kIntervalJitterFieldNumber;
const int HealthCheck::kUnhealthyThresholdFieldNumber;
const int HealthCheck::kHealthyThresholdFieldNumber;
const int HealthCheck::kAltPortFieldNumber;
const int HealthCheck::kReuseConnectionFieldNumber;
const int HealthCheck::kHttpHealthCheckFieldNumber;
const int HealthCheck::kTcpHealthCheckFieldNumber;
const int HealthCheck::kRedisHealthCheckFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HealthCheck::HealthCheck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_api_2fhealth_5fcheck_2eproto::InitDefaultsHealthCheck();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.HealthCheck)
}
HealthCheck::HealthCheck(const HealthCheck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_timeout()) {
    timeout_ = new ::google::protobuf::Duration(*from.timeout_);
  } else {
    timeout_ = NULL;
  }
  if (from.has_interval()) {
    interval_ = new ::google::protobuf::Duration(*from.interval_);
  } else {
    interval_ = NULL;
  }
  if (from.has_interval_jitter()) {
    interval_jitter_ = new ::google::protobuf::Duration(*from.interval_jitter_);
  } else {
    interval_jitter_ = NULL;
  }
  if (from.has_unhealthy_threshold()) {
    unhealthy_threshold_ = new ::google::protobuf::UInt32Value(*from.unhealthy_threshold_);
  } else {
    unhealthy_threshold_ = NULL;
  }
  if (from.has_healthy_threshold()) {
    healthy_threshold_ = new ::google::protobuf::UInt32Value(*from.healthy_threshold_);
  } else {
    healthy_threshold_ = NULL;
  }
  if (from.has_alt_port()) {
    alt_port_ = new ::google::protobuf::UInt32Value(*from.alt_port_);
  } else {
    alt_port_ = NULL;
  }
  if (from.has_reuse_connection()) {
    reuse_connection_ = new ::google::protobuf::BoolValue(*from.reuse_connection_);
  } else {
    reuse_connection_ = NULL;
  }
  clear_has_health_checker();
  switch (from.health_checker_case()) {
    case kHttpHealthCheck: {
      mutable_http_health_check()->::envoy::api::v2::HealthCheck_HttpHealthCheck::MergeFrom(from.http_health_check());
      break;
    }
    case kTcpHealthCheck: {
      mutable_tcp_health_check()->::envoy::api::v2::HealthCheck_TcpHealthCheck::MergeFrom(from.tcp_health_check());
      break;
    }
    case kRedisHealthCheck: {
      mutable_redis_health_check()->::envoy::api::v2::HealthCheck_RedisHealthCheck::MergeFrom(from.redis_health_check());
      break;
    }
    case HEALTH_CHECKER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.HealthCheck)
}

void HealthCheck::SharedCtor() {
  ::memset(&timeout_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reuse_connection_) -
      reinterpret_cast<char*>(&timeout_)) + sizeof(reuse_connection_));
  clear_has_health_checker();
  _cached_size_ = 0;
}

HealthCheck::~HealthCheck() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.HealthCheck)
  SharedDtor();
}

void HealthCheck::SharedDtor() {
  if (this != internal_default_instance()) delete timeout_;
  if (this != internal_default_instance()) delete interval_;
  if (this != internal_default_instance()) delete interval_jitter_;
  if (this != internal_default_instance()) delete unhealthy_threshold_;
  if (this != internal_default_instance()) delete healthy_threshold_;
  if (this != internal_default_instance()) delete alt_port_;
  if (this != internal_default_instance()) delete reuse_connection_;
  if (has_health_checker()) {
    clear_health_checker();
  }
}

void HealthCheck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HealthCheck::descriptor() {
  ::protobuf_api_2fhealth_5fcheck_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2fhealth_5fcheck_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HealthCheck& HealthCheck::default_instance() {
  ::protobuf_api_2fhealth_5fcheck_2eproto::InitDefaultsHealthCheck();
  return *internal_default_instance();
}

HealthCheck* HealthCheck::New(::google::protobuf::Arena* arena) const {
  HealthCheck* n = new HealthCheck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HealthCheck::clear_health_checker() {
// @@protoc_insertion_point(one_of_clear_start:envoy.api.v2.HealthCheck)
  switch (health_checker_case()) {
    case kHttpHealthCheck: {
      delete health_checker_.http_health_check_;
      break;
    }
    case kTcpHealthCheck: {
      delete health_checker_.tcp_health_check_;
      break;
    }
    case kRedisHealthCheck: {
      delete health_checker_.redis_health_check_;
      break;
    }
    case HEALTH_CHECKER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = HEALTH_CHECKER_NOT_SET;
}


void HealthCheck::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.HealthCheck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && timeout_ != NULL) {
    delete timeout_;
  }
  timeout_ = NULL;
  if (GetArenaNoVirtual() == NULL && interval_ != NULL) {
    delete interval_;
  }
  interval_ = NULL;
  if (GetArenaNoVirtual() == NULL && interval_jitter_ != NULL) {
    delete interval_jitter_;
  }
  interval_jitter_ = NULL;
  if (GetArenaNoVirtual() == NULL && unhealthy_threshold_ != NULL) {
    delete unhealthy_threshold_;
  }
  unhealthy_threshold_ = NULL;
  if (GetArenaNoVirtual() == NULL && healthy_threshold_ != NULL) {
    delete healthy_threshold_;
  }
  healthy_threshold_ = NULL;
  if (GetArenaNoVirtual() == NULL && alt_port_ != NULL) {
    delete alt_port_;
  }
  alt_port_ = NULL;
  if (GetArenaNoVirtual() == NULL && reuse_connection_ != NULL) {
    delete reuse_connection_;
  }
  reuse_connection_ = NULL;
  clear_health_checker();
  _internal_metadata_.Clear();
}

bool HealthCheck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.HealthCheck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Duration timeout = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timeout()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration interval = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_interval()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration interval_jitter = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_interval_jitter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.UInt32Value unhealthy_threshold = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unhealthy_threshold()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.UInt32Value healthy_threshold = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_healthy_threshold()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.UInt32Value alt_port = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alt_port()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue reuse_connection = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reuse_connection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.HealthCheck.HttpHealthCheck http_health_check = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_http_health_check()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.HealthCheck.TcpHealthCheck tcp_health_check = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tcp_health_check()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.HealthCheck.RedisHealthCheck redis_health_check = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_redis_health_check()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.HealthCheck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.HealthCheck)
  return false;
#undef DO_
}

void HealthCheck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.HealthCheck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Duration timeout = 1;
  if (this->has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->timeout_, output);
  }

  // .google.protobuf.Duration interval = 2;
  if (this->has_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->interval_, output);
  }

  // .google.protobuf.Duration interval_jitter = 3;
  if (this->has_interval_jitter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->interval_jitter_, output);
  }

  // .google.protobuf.UInt32Value unhealthy_threshold = 4;
  if (this->has_unhealthy_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->unhealthy_threshold_, output);
  }

  // .google.protobuf.UInt32Value healthy_threshold = 5;
  if (this->has_healthy_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->healthy_threshold_, output);
  }

  // .google.protobuf.UInt32Value alt_port = 6;
  if (this->has_alt_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->alt_port_, output);
  }

  // .google.protobuf.BoolValue reuse_connection = 7;
  if (this->has_reuse_connection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->reuse_connection_, output);
  }

  // .envoy.api.v2.HealthCheck.HttpHealthCheck http_health_check = 8;
  if (has_http_health_check()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *health_checker_.http_health_check_, output);
  }

  // .envoy.api.v2.HealthCheck.TcpHealthCheck tcp_health_check = 9;
  if (has_tcp_health_check()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *health_checker_.tcp_health_check_, output);
  }

  // .envoy.api.v2.HealthCheck.RedisHealthCheck redis_health_check = 10;
  if (has_redis_health_check()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *health_checker_.redis_health_check_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.HealthCheck)
}

::google::protobuf::uint8* HealthCheck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.HealthCheck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Duration timeout = 1;
  if (this->has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->timeout_, deterministic, target);
  }

  // .google.protobuf.Duration interval = 2;
  if (this->has_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->interval_, deterministic, target);
  }

  // .google.protobuf.Duration interval_jitter = 3;
  if (this->has_interval_jitter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->interval_jitter_, deterministic, target);
  }

  // .google.protobuf.UInt32Value unhealthy_threshold = 4;
  if (this->has_unhealthy_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->unhealthy_threshold_, deterministic, target);
  }

  // .google.protobuf.UInt32Value healthy_threshold = 5;
  if (this->has_healthy_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->healthy_threshold_, deterministic, target);
  }

  // .google.protobuf.UInt32Value alt_port = 6;
  if (this->has_alt_port()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->alt_port_, deterministic, target);
  }

  // .google.protobuf.BoolValue reuse_connection = 7;
  if (this->has_reuse_connection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->reuse_connection_, deterministic, target);
  }

  // .envoy.api.v2.HealthCheck.HttpHealthCheck http_health_check = 8;
  if (has_http_health_check()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *health_checker_.http_health_check_, deterministic, target);
  }

  // .envoy.api.v2.HealthCheck.TcpHealthCheck tcp_health_check = 9;
  if (has_tcp_health_check()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *health_checker_.tcp_health_check_, deterministic, target);
  }

  // .envoy.api.v2.HealthCheck.RedisHealthCheck redis_health_check = 10;
  if (has_redis_health_check()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *health_checker_.redis_health_check_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.HealthCheck)
  return target;
}

size_t HealthCheck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.HealthCheck)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.protobuf.Duration timeout = 1;
  if (this->has_timeout()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->timeout_);
  }

  // .google.protobuf.Duration interval = 2;
  if (this->has_interval()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->interval_);
  }

  // .google.protobuf.Duration interval_jitter = 3;
  if (this->has_interval_jitter()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->interval_jitter_);
  }

  // .google.protobuf.UInt32Value unhealthy_threshold = 4;
  if (this->has_unhealthy_threshold()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->unhealthy_threshold_);
  }

  // .google.protobuf.UInt32Value healthy_threshold = 5;
  if (this->has_healthy_threshold()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->healthy_threshold_);
  }

  // .google.protobuf.UInt32Value alt_port = 6;
  if (this->has_alt_port()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->alt_port_);
  }

  // .google.protobuf.BoolValue reuse_connection = 7;
  if (this->has_reuse_connection()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->reuse_connection_);
  }

  switch (health_checker_case()) {
    // .envoy.api.v2.HealthCheck.HttpHealthCheck http_health_check = 8;
    case kHttpHealthCheck: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *health_checker_.http_health_check_);
      break;
    }
    // .envoy.api.v2.HealthCheck.TcpHealthCheck tcp_health_check = 9;
    case kTcpHealthCheck: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *health_checker_.tcp_health_check_);
      break;
    }
    // .envoy.api.v2.HealthCheck.RedisHealthCheck redis_health_check = 10;
    case kRedisHealthCheck: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *health_checker_.redis_health_check_);
      break;
    }
    case HEALTH_CHECKER_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HealthCheck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.HealthCheck)
  GOOGLE_DCHECK_NE(&from, this);
  const HealthCheck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HealthCheck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.HealthCheck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.HealthCheck)
    MergeFrom(*source);
  }
}

void HealthCheck::MergeFrom(const HealthCheck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.HealthCheck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_timeout()) {
    mutable_timeout()->::google::protobuf::Duration::MergeFrom(from.timeout());
  }
  if (from.has_interval()) {
    mutable_interval()->::google::protobuf::Duration::MergeFrom(from.interval());
  }
  if (from.has_interval_jitter()) {
    mutable_interval_jitter()->::google::protobuf::Duration::MergeFrom(from.interval_jitter());
  }
  if (from.has_unhealthy_threshold()) {
    mutable_unhealthy_threshold()->::google::protobuf::UInt32Value::MergeFrom(from.unhealthy_threshold());
  }
  if (from.has_healthy_threshold()) {
    mutable_healthy_threshold()->::google::protobuf::UInt32Value::MergeFrom(from.healthy_threshold());
  }
  if (from.has_alt_port()) {
    mutable_alt_port()->::google::protobuf::UInt32Value::MergeFrom(from.alt_port());
  }
  if (from.has_reuse_connection()) {
    mutable_reuse_connection()->::google::protobuf::BoolValue::MergeFrom(from.reuse_connection());
  }
  switch (from.health_checker_case()) {
    case kHttpHealthCheck: {
      mutable_http_health_check()->::envoy::api::v2::HealthCheck_HttpHealthCheck::MergeFrom(from.http_health_check());
      break;
    }
    case kTcpHealthCheck: {
      mutable_tcp_health_check()->::envoy::api::v2::HealthCheck_TcpHealthCheck::MergeFrom(from.tcp_health_check());
      break;
    }
    case kRedisHealthCheck: {
      mutable_redis_health_check()->::envoy::api::v2::HealthCheck_RedisHealthCheck::MergeFrom(from.redis_health_check());
      break;
    }
    case HEALTH_CHECKER_NOT_SET: {
      break;
    }
  }
}

void HealthCheck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.HealthCheck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HealthCheck::CopyFrom(const HealthCheck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.HealthCheck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthCheck::IsInitialized() const {
  return true;
}

void HealthCheck::Swap(HealthCheck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HealthCheck::InternalSwap(HealthCheck* other) {
  using std::swap;
  swap(timeout_, other->timeout_);
  swap(interval_, other->interval_);
  swap(interval_jitter_, other->interval_jitter_);
  swap(unhealthy_threshold_, other->unhealthy_threshold_);
  swap(healthy_threshold_, other->healthy_threshold_);
  swap(alt_port_, other->alt_port_);
  swap(reuse_connection_, other->reuse_connection_);
  swap(health_checker_, other->health_checker_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HealthCheck::GetMetadata() const {
  protobuf_api_2fhealth_5fcheck_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2fhealth_5fcheck_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v2
}  // namespace api
}  // namespace envoy

// @@protoc_insertion_point(global_scope)
