// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mixer/v1/config/client/client_config.proto

#include "mixer/v1/config/client/client_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace istio {
namespace mixer {
namespace v1 {
namespace config {
namespace client {
class ServiceConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServiceConfig>
      _instance;
} _ServiceConfig_default_instance_;
class TransportConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TransportConfig>
      _instance;
} _TransportConfig_default_instance_;
class HttpClientConfig_ServiceConfigsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HttpClientConfig_ServiceConfigsEntry_DoNotUse>
      _instance;
} _HttpClientConfig_ServiceConfigsEntry_DoNotUse_default_instance_;
class HttpClientConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HttpClientConfig>
      _instance;
} _HttpClientConfig_default_instance_;
class TcpClientConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TcpClientConfig>
      _instance;
} _TcpClientConfig_default_instance_;
}  // namespace client
}  // namespace config
}  // namespace v1
}  // namespace mixer
}  // namespace istio
namespace protobuf_mixer_2fv1_2fconfig_2fclient_2fclient_5fconfig_2eproto {
void InitDefaultsServiceConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_mixer_2fv1_2fattributes_2eproto::InitDefaultsAttributes();
  protobuf_mixer_2fv1_2fconfig_2fclient_2fapi_5fspec_2eproto::InitDefaultsHTTPAPISpec();
  protobuf_mixer_2fv1_2fconfig_2fclient_2fquota_2eproto::InitDefaultsQuotaSpec();
  protobuf_mixer_2fv1_2fconfig_2fclient_2fauth_2eproto::InitDefaultsEndUserAuthenticationPolicySpec();
  {
    void* ptr = &::istio::mixer::v1::config::client::_ServiceConfig_default_instance_;
    new (ptr) ::istio::mixer::v1::config::client::ServiceConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::mixer::v1::config::client::ServiceConfig::InitAsDefaultInstance();
}

void InitDefaultsServiceConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsServiceConfigImpl);
}

void InitDefaultsTransportConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::istio::mixer::v1::config::client::_TransportConfig_default_instance_;
    new (ptr) ::istio::mixer::v1::config::client::TransportConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::mixer::v1::config::client::TransportConfig::InitAsDefaultInstance();
}

void InitDefaultsTransportConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTransportConfigImpl);
}

void InitDefaultsHttpClientConfig_ServiceConfigsEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_mixer_2fv1_2fconfig_2fclient_2fclient_5fconfig_2eproto::InitDefaultsServiceConfig();
  {
    void* ptr = &::istio::mixer::v1::config::client::_HttpClientConfig_ServiceConfigsEntry_DoNotUse_default_instance_;
    new (ptr) ::istio::mixer::v1::config::client::HttpClientConfig_ServiceConfigsEntry_DoNotUse();
  }
  ::istio::mixer::v1::config::client::HttpClientConfig_ServiceConfigsEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsHttpClientConfig_ServiceConfigsEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHttpClientConfig_ServiceConfigsEntry_DoNotUseImpl);
}

void InitDefaultsHttpClientConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_mixer_2fv1_2fconfig_2fclient_2fclient_5fconfig_2eproto::InitDefaultsTransportConfig();
  protobuf_mixer_2fv1_2fconfig_2fclient_2fclient_5fconfig_2eproto::InitDefaultsHttpClientConfig_ServiceConfigsEntry_DoNotUse();
  protobuf_mixer_2fv1_2fattributes_2eproto::InitDefaultsAttributes();
  {
    void* ptr = &::istio::mixer::v1::config::client::_HttpClientConfig_default_instance_;
    new (ptr) ::istio::mixer::v1::config::client::HttpClientConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::mixer::v1::config::client::HttpClientConfig::InitAsDefaultInstance();
}

void InitDefaultsHttpClientConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHttpClientConfigImpl);
}

void InitDefaultsTcpClientConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_mixer_2fv1_2fconfig_2fclient_2fclient_5fconfig_2eproto::InitDefaultsTransportConfig();
  protobuf_mixer_2fv1_2fattributes_2eproto::InitDefaultsAttributes();
  protobuf_mixer_2fv1_2fconfig_2fclient_2fquota_2eproto::InitDefaultsQuotaSpec();
  {
    void* ptr = &::istio::mixer::v1::config::client::_TcpClientConfig_default_instance_;
    new (ptr) ::istio::mixer::v1::config::client::TcpClientConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::mixer::v1::config::client::TcpClientConfig::InitAsDefaultInstance();
}

void InitDefaultsTcpClientConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTcpClientConfigImpl);
}

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::mixer::v1::config::client::ServiceConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::mixer::v1::config::client::ServiceConfig, disable_check_calls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::mixer::v1::config::client::ServiceConfig, disable_report_calls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::mixer::v1::config::client::ServiceConfig, mixer_attributes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::mixer::v1::config::client::ServiceConfig, http_api_spec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::mixer::v1::config::client::ServiceConfig, quota_spec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::mixer::v1::config::client::ServiceConfig, end_user_authn_spec_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::mixer::v1::config::client::TransportConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::mixer::v1::config::client::TransportConfig, disable_check_cache_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::mixer::v1::config::client::TransportConfig, disable_quota_cache_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::mixer::v1::config::client::TransportConfig, disable_report_batch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::mixer::v1::config::client::TransportConfig, network_fail_policy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::mixer::v1::config::client::HttpClientConfig_ServiceConfigsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::mixer::v1::config::client::HttpClientConfig_ServiceConfigsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::mixer::v1::config::client::HttpClientConfig_ServiceConfigsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::mixer::v1::config::client::HttpClientConfig_ServiceConfigsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::mixer::v1::config::client::HttpClientConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::mixer::v1::config::client::HttpClientConfig, transport_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::mixer::v1::config::client::HttpClientConfig, service_configs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::mixer::v1::config::client::HttpClientConfig, default_destination_service_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::mixer::v1::config::client::HttpClientConfig, mixer_attributes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::mixer::v1::config::client::HttpClientConfig, forward_attributes_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::mixer::v1::config::client::TcpClientConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::mixer::v1::config::client::TcpClientConfig, transport_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::mixer::v1::config::client::TcpClientConfig, mixer_attributes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::mixer::v1::config::client::TcpClientConfig, disable_check_calls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::mixer::v1::config::client::TcpClientConfig, disable_report_calls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::mixer::v1::config::client::TcpClientConfig, connection_quota_spec_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::istio::mixer::v1::config::client::ServiceConfig)},
  { 11, -1, sizeof(::istio::mixer::v1::config::client::TransportConfig)},
  { 20, 27, sizeof(::istio::mixer::v1::config::client::HttpClientConfig_ServiceConfigsEntry_DoNotUse)},
  { 29, -1, sizeof(::istio::mixer::v1::config::client::HttpClientConfig)},
  { 39, -1, sizeof(::istio::mixer::v1::config::client::TcpClientConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::mixer::v1::config::client::_ServiceConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::mixer::v1::config::client::_TransportConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::mixer::v1::config::client::_HttpClientConfig_ServiceConfigsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::mixer::v1::config::client::_HttpClientConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::mixer::v1::config::client::_TcpClientConfig_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "mixer/v1/config/client/client_config.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n*mixer/v1/config/client/client_config.p"
      "roto\022\034istio.mixer.v1.config.client\032\024gogo"
      "proto/gogo.proto\032\031mixer/v1/attributes.pr"
      "oto\032%mixer/v1/config/client/api_spec.pro"
      "to\032\"mixer/v1/config/client/quota.proto\032!"
      "mixer/v1/config/client/auth.proto\"\333\002\n\rSe"
      "rviceConfig\022\033\n\023disable_check_calls\030\001 \001(\010"
      "\022\034\n\024disable_report_calls\030\002 \001(\010\0224\n\020mixer_"
      "attributes\030\003 \001(\0132\032.istio.mixer.v1.Attrib"
      "utes\022@\n\rhttp_api_spec\030\004 \003(\0132).istio.mixe"
      "r.v1.config.client.HTTPAPISpec\022;\n\nquota_"
      "spec\030\005 \003(\0132\'.istio.mixer.v1.config.clien"
      "t.QuotaSpec\022Z\n\023end_user_authn_spec\030\006 \001(\013"
      "2=.istio.mixer.v1.config.client.EndUserA"
      "uthenticationPolicySpec\"\373\001\n\017TransportCon"
      "fig\022\033\n\023disable_check_cache\030\001 \001(\010\022\033\n\023disa"
      "ble_quota_cache\030\002 \001(\010\022\034\n\024disable_report_"
      "batch\030\003 \001(\010\022\\\n\023network_fail_policy\030\004 \001(\016"
      "2\?.istio.mixer.v1.config.client.Transpor"
      "tConfig.NetworkFailPolicy\"2\n\021NetworkFail"
      "Policy\022\r\n\tFAIL_OPEN\020\000\022\016\n\nFAIL_CLOSE\020\001\"\250\003"
      "\n\020HttpClientConfig\022@\n\ttransport\030\001 \001(\0132-."
      "istio.mixer.v1.config.client.TransportCo"
      "nfig\022[\n\017service_configs\030\002 \003(\0132B.istio.mi"
      "xer.v1.config.client.HttpClientConfig.Se"
      "rviceConfigsEntry\022#\n\033default_destination"
      "_service\030\003 \001(\t\0224\n\020mixer_attributes\030\004 \001(\013"
      "2\032.istio.mixer.v1.Attributes\0226\n\022forward_"
      "attributes\030\005 \001(\0132\032.istio.mixer.v1.Attrib"
      "utes\032b\n\023ServiceConfigsEntry\022\013\n\003key\030\001 \001(\t"
      "\022:\n\005value\030\002 \001(\0132+.istio.mixer.v1.config."
      "client.ServiceConfig:\0028\001\"\214\002\n\017TcpClientCo"
      "nfig\022@\n\ttransport\030\001 \001(\0132-.istio.mixer.v1"
      ".config.client.TransportConfig\0224\n\020mixer_"
      "attributes\030\002 \001(\0132\032.istio.mixer.v1.Attrib"
      "utes\022\033\n\023disable_check_calls\030\003 \001(\010\022\034\n\024dis"
      "able_report_calls\030\004 \001(\010\022F\n\025connection_qu"
      "ota_spec\030\005 \001(\0132\'.istio.mixer.v1.config.c"
      "lient.QuotaSpecB\014\310\341\036\000\250\342\036\000\360\341\036\000b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1557);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mixer/v1/config/client/client_config.proto", &protobuf_RegisterTypes);
  ::protobuf_gogoproto_2fgogo_2eproto::AddDescriptors();
  ::protobuf_mixer_2fv1_2fattributes_2eproto::AddDescriptors();
  ::protobuf_mixer_2fv1_2fconfig_2fclient_2fapi_5fspec_2eproto::AddDescriptors();
  ::protobuf_mixer_2fv1_2fconfig_2fclient_2fquota_2eproto::AddDescriptors();
  ::protobuf_mixer_2fv1_2fconfig_2fclient_2fauth_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_mixer_2fv1_2fconfig_2fclient_2fclient_5fconfig_2eproto
namespace istio {
namespace mixer {
namespace v1 {
namespace config {
namespace client {
const ::google::protobuf::EnumDescriptor* TransportConfig_NetworkFailPolicy_descriptor() {
  protobuf_mixer_2fv1_2fconfig_2fclient_2fclient_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mixer_2fv1_2fconfig_2fclient_2fclient_5fconfig_2eproto::file_level_enum_descriptors[0];
}
bool TransportConfig_NetworkFailPolicy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TransportConfig_NetworkFailPolicy TransportConfig::FAIL_OPEN;
const TransportConfig_NetworkFailPolicy TransportConfig::FAIL_CLOSE;
const TransportConfig_NetworkFailPolicy TransportConfig::NetworkFailPolicy_MIN;
const TransportConfig_NetworkFailPolicy TransportConfig::NetworkFailPolicy_MAX;
const int TransportConfig::NetworkFailPolicy_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void ServiceConfig::InitAsDefaultInstance() {
  ::istio::mixer::v1::config::client::_ServiceConfig_default_instance_._instance.get_mutable()->mixer_attributes_ = const_cast< ::istio::mixer::v1::Attributes*>(
      ::istio::mixer::v1::Attributes::internal_default_instance());
  ::istio::mixer::v1::config::client::_ServiceConfig_default_instance_._instance.get_mutable()->end_user_authn_spec_ = const_cast< ::istio::mixer::v1::config::client::EndUserAuthenticationPolicySpec*>(
      ::istio::mixer::v1::config::client::EndUserAuthenticationPolicySpec::internal_default_instance());
}
void ServiceConfig::clear_mixer_attributes() {
  if (GetArenaNoVirtual() == NULL && mixer_attributes_ != NULL) {
    delete mixer_attributes_;
  }
  mixer_attributes_ = NULL;
}
void ServiceConfig::clear_http_api_spec() {
  http_api_spec_.Clear();
}
void ServiceConfig::clear_quota_spec() {
  quota_spec_.Clear();
}
void ServiceConfig::clear_end_user_authn_spec() {
  if (GetArenaNoVirtual() == NULL && end_user_authn_spec_ != NULL) {
    delete end_user_authn_spec_;
  }
  end_user_authn_spec_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServiceConfig::kDisableCheckCallsFieldNumber;
const int ServiceConfig::kDisableReportCallsFieldNumber;
const int ServiceConfig::kMixerAttributesFieldNumber;
const int ServiceConfig::kHttpApiSpecFieldNumber;
const int ServiceConfig::kQuotaSpecFieldNumber;
const int ServiceConfig::kEndUserAuthnSpecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServiceConfig::ServiceConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_mixer_2fv1_2fconfig_2fclient_2fclient_5fconfig_2eproto::InitDefaultsServiceConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.mixer.v1.config.client.ServiceConfig)
}
ServiceConfig::ServiceConfig(const ServiceConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      http_api_spec_(from.http_api_spec_),
      quota_spec_(from.quota_spec_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_mixer_attributes()) {
    mixer_attributes_ = new ::istio::mixer::v1::Attributes(*from.mixer_attributes_);
  } else {
    mixer_attributes_ = NULL;
  }
  if (from.has_end_user_authn_spec()) {
    end_user_authn_spec_ = new ::istio::mixer::v1::config::client::EndUserAuthenticationPolicySpec(*from.end_user_authn_spec_);
  } else {
    end_user_authn_spec_ = NULL;
  }
  ::memcpy(&disable_check_calls_, &from.disable_check_calls_,
    static_cast<size_t>(reinterpret_cast<char*>(&disable_report_calls_) -
    reinterpret_cast<char*>(&disable_check_calls_)) + sizeof(disable_report_calls_));
  // @@protoc_insertion_point(copy_constructor:istio.mixer.v1.config.client.ServiceConfig)
}

void ServiceConfig::SharedCtor() {
  ::memset(&mixer_attributes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disable_report_calls_) -
      reinterpret_cast<char*>(&mixer_attributes_)) + sizeof(disable_report_calls_));
  _cached_size_ = 0;
}

ServiceConfig::~ServiceConfig() {
  // @@protoc_insertion_point(destructor:istio.mixer.v1.config.client.ServiceConfig)
  SharedDtor();
}

void ServiceConfig::SharedDtor() {
  if (this != internal_default_instance()) delete mixer_attributes_;
  if (this != internal_default_instance()) delete end_user_authn_spec_;
}

void ServiceConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceConfig::descriptor() {
  ::protobuf_mixer_2fv1_2fconfig_2fclient_2fclient_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mixer_2fv1_2fconfig_2fclient_2fclient_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServiceConfig& ServiceConfig::default_instance() {
  ::protobuf_mixer_2fv1_2fconfig_2fclient_2fclient_5fconfig_2eproto::InitDefaultsServiceConfig();
  return *internal_default_instance();
}

ServiceConfig* ServiceConfig::New(::google::protobuf::Arena* arena) const {
  ServiceConfig* n = new ServiceConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServiceConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.mixer.v1.config.client.ServiceConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  http_api_spec_.Clear();
  quota_spec_.Clear();
  if (GetArenaNoVirtual() == NULL && mixer_attributes_ != NULL) {
    delete mixer_attributes_;
  }
  mixer_attributes_ = NULL;
  if (GetArenaNoVirtual() == NULL && end_user_authn_spec_ != NULL) {
    delete end_user_authn_spec_;
  }
  end_user_authn_spec_ = NULL;
  ::memset(&disable_check_calls_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disable_report_calls_) -
      reinterpret_cast<char*>(&disable_check_calls_)) + sizeof(disable_report_calls_));
  _internal_metadata_.Clear();
}

bool ServiceConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.mixer.v1.config.client.ServiceConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool disable_check_calls = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_check_calls_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool disable_report_calls = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_report_calls_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.mixer.v1.Attributes mixer_attributes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mixer_attributes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .istio.mixer.v1.config.client.HTTPAPISpec http_api_spec = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_http_api_spec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .istio.mixer.v1.config.client.QuotaSpec quota_spec = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_quota_spec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.mixer.v1.config.client.EndUserAuthenticationPolicySpec end_user_authn_spec = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_end_user_authn_spec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.mixer.v1.config.client.ServiceConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.mixer.v1.config.client.ServiceConfig)
  return false;
#undef DO_
}

void ServiceConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.mixer.v1.config.client.ServiceConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool disable_check_calls = 1;
  if (this->disable_check_calls() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->disable_check_calls(), output);
  }

  // bool disable_report_calls = 2;
  if (this->disable_report_calls() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->disable_report_calls(), output);
  }

  // .istio.mixer.v1.Attributes mixer_attributes = 3;
  if (this->has_mixer_attributes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->mixer_attributes_, output);
  }

  // repeated .istio.mixer.v1.config.client.HTTPAPISpec http_api_spec = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->http_api_spec_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->http_api_spec(static_cast<int>(i)), output);
  }

  // repeated .istio.mixer.v1.config.client.QuotaSpec quota_spec = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->quota_spec_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->quota_spec(static_cast<int>(i)), output);
  }

  // .istio.mixer.v1.config.client.EndUserAuthenticationPolicySpec end_user_authn_spec = 6;
  if (this->has_end_user_authn_spec()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->end_user_authn_spec_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.mixer.v1.config.client.ServiceConfig)
}

::google::protobuf::uint8* ServiceConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.mixer.v1.config.client.ServiceConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool disable_check_calls = 1;
  if (this->disable_check_calls() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->disable_check_calls(), target);
  }

  // bool disable_report_calls = 2;
  if (this->disable_report_calls() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->disable_report_calls(), target);
  }

  // .istio.mixer.v1.Attributes mixer_attributes = 3;
  if (this->has_mixer_attributes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->mixer_attributes_, deterministic, target);
  }

  // repeated .istio.mixer.v1.config.client.HTTPAPISpec http_api_spec = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->http_api_spec_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->http_api_spec(static_cast<int>(i)), deterministic, target);
  }

  // repeated .istio.mixer.v1.config.client.QuotaSpec quota_spec = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->quota_spec_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->quota_spec(static_cast<int>(i)), deterministic, target);
  }

  // .istio.mixer.v1.config.client.EndUserAuthenticationPolicySpec end_user_authn_spec = 6;
  if (this->has_end_user_authn_spec()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->end_user_authn_spec_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.mixer.v1.config.client.ServiceConfig)
  return target;
}

size_t ServiceConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.mixer.v1.config.client.ServiceConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .istio.mixer.v1.config.client.HTTPAPISpec http_api_spec = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->http_api_spec_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->http_api_spec(static_cast<int>(i)));
    }
  }

  // repeated .istio.mixer.v1.config.client.QuotaSpec quota_spec = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->quota_spec_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->quota_spec(static_cast<int>(i)));
    }
  }

  // .istio.mixer.v1.Attributes mixer_attributes = 3;
  if (this->has_mixer_attributes()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->mixer_attributes_);
  }

  // .istio.mixer.v1.config.client.EndUserAuthenticationPolicySpec end_user_authn_spec = 6;
  if (this->has_end_user_authn_spec()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->end_user_authn_spec_);
  }

  // bool disable_check_calls = 1;
  if (this->disable_check_calls() != 0) {
    total_size += 1 + 1;
  }

  // bool disable_report_calls = 2;
  if (this->disable_report_calls() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.mixer.v1.config.client.ServiceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServiceConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.mixer.v1.config.client.ServiceConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.mixer.v1.config.client.ServiceConfig)
    MergeFrom(*source);
  }
}

void ServiceConfig::MergeFrom(const ServiceConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.mixer.v1.config.client.ServiceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  http_api_spec_.MergeFrom(from.http_api_spec_);
  quota_spec_.MergeFrom(from.quota_spec_);
  if (from.has_mixer_attributes()) {
    mutable_mixer_attributes()->::istio::mixer::v1::Attributes::MergeFrom(from.mixer_attributes());
  }
  if (from.has_end_user_authn_spec()) {
    mutable_end_user_authn_spec()->::istio::mixer::v1::config::client::EndUserAuthenticationPolicySpec::MergeFrom(from.end_user_authn_spec());
  }
  if (from.disable_check_calls() != 0) {
    set_disable_check_calls(from.disable_check_calls());
  }
  if (from.disable_report_calls() != 0) {
    set_disable_report_calls(from.disable_report_calls());
  }
}

void ServiceConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.mixer.v1.config.client.ServiceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceConfig::CopyFrom(const ServiceConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.mixer.v1.config.client.ServiceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceConfig::IsInitialized() const {
  return true;
}

void ServiceConfig::Swap(ServiceConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServiceConfig::InternalSwap(ServiceConfig* other) {
  using std::swap;
  http_api_spec_.InternalSwap(&other->http_api_spec_);
  quota_spec_.InternalSwap(&other->quota_spec_);
  swap(mixer_attributes_, other->mixer_attributes_);
  swap(end_user_authn_spec_, other->end_user_authn_spec_);
  swap(disable_check_calls_, other->disable_check_calls_);
  swap(disable_report_calls_, other->disable_report_calls_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServiceConfig::GetMetadata() const {
  protobuf_mixer_2fv1_2fconfig_2fclient_2fclient_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mixer_2fv1_2fconfig_2fclient_2fclient_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TransportConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransportConfig::kDisableCheckCacheFieldNumber;
const int TransportConfig::kDisableQuotaCacheFieldNumber;
const int TransportConfig::kDisableReportBatchFieldNumber;
const int TransportConfig::kNetworkFailPolicyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransportConfig::TransportConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_mixer_2fv1_2fconfig_2fclient_2fclient_5fconfig_2eproto::InitDefaultsTransportConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.mixer.v1.config.client.TransportConfig)
}
TransportConfig::TransportConfig(const TransportConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&disable_check_cache_, &from.disable_check_cache_,
    static_cast<size_t>(reinterpret_cast<char*>(&network_fail_policy_) -
    reinterpret_cast<char*>(&disable_check_cache_)) + sizeof(network_fail_policy_));
  // @@protoc_insertion_point(copy_constructor:istio.mixer.v1.config.client.TransportConfig)
}

void TransportConfig::SharedCtor() {
  ::memset(&disable_check_cache_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&network_fail_policy_) -
      reinterpret_cast<char*>(&disable_check_cache_)) + sizeof(network_fail_policy_));
  _cached_size_ = 0;
}

TransportConfig::~TransportConfig() {
  // @@protoc_insertion_point(destructor:istio.mixer.v1.config.client.TransportConfig)
  SharedDtor();
}

void TransportConfig::SharedDtor() {
}

void TransportConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransportConfig::descriptor() {
  ::protobuf_mixer_2fv1_2fconfig_2fclient_2fclient_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mixer_2fv1_2fconfig_2fclient_2fclient_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransportConfig& TransportConfig::default_instance() {
  ::protobuf_mixer_2fv1_2fconfig_2fclient_2fclient_5fconfig_2eproto::InitDefaultsTransportConfig();
  return *internal_default_instance();
}

TransportConfig* TransportConfig::New(::google::protobuf::Arena* arena) const {
  TransportConfig* n = new TransportConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransportConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.mixer.v1.config.client.TransportConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&disable_check_cache_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&network_fail_policy_) -
      reinterpret_cast<char*>(&disable_check_cache_)) + sizeof(network_fail_policy_));
  _internal_metadata_.Clear();
}

bool TransportConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.mixer.v1.config.client.TransportConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool disable_check_cache = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_check_cache_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool disable_quota_cache = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_quota_cache_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool disable_report_batch = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_report_batch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.mixer.v1.config.client.TransportConfig.NetworkFailPolicy network_fail_policy = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_network_fail_policy(static_cast< ::istio::mixer::v1::config::client::TransportConfig_NetworkFailPolicy >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.mixer.v1.config.client.TransportConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.mixer.v1.config.client.TransportConfig)
  return false;
#undef DO_
}

void TransportConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.mixer.v1.config.client.TransportConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool disable_check_cache = 1;
  if (this->disable_check_cache() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->disable_check_cache(), output);
  }

  // bool disable_quota_cache = 2;
  if (this->disable_quota_cache() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->disable_quota_cache(), output);
  }

  // bool disable_report_batch = 3;
  if (this->disable_report_batch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->disable_report_batch(), output);
  }

  // .istio.mixer.v1.config.client.TransportConfig.NetworkFailPolicy network_fail_policy = 4;
  if (this->network_fail_policy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->network_fail_policy(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.mixer.v1.config.client.TransportConfig)
}

::google::protobuf::uint8* TransportConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.mixer.v1.config.client.TransportConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool disable_check_cache = 1;
  if (this->disable_check_cache() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->disable_check_cache(), target);
  }

  // bool disable_quota_cache = 2;
  if (this->disable_quota_cache() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->disable_quota_cache(), target);
  }

  // bool disable_report_batch = 3;
  if (this->disable_report_batch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->disable_report_batch(), target);
  }

  // .istio.mixer.v1.config.client.TransportConfig.NetworkFailPolicy network_fail_policy = 4;
  if (this->network_fail_policy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->network_fail_policy(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.mixer.v1.config.client.TransportConfig)
  return target;
}

size_t TransportConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.mixer.v1.config.client.TransportConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool disable_check_cache = 1;
  if (this->disable_check_cache() != 0) {
    total_size += 1 + 1;
  }

  // bool disable_quota_cache = 2;
  if (this->disable_quota_cache() != 0) {
    total_size += 1 + 1;
  }

  // bool disable_report_batch = 3;
  if (this->disable_report_batch() != 0) {
    total_size += 1 + 1;
  }

  // .istio.mixer.v1.config.client.TransportConfig.NetworkFailPolicy network_fail_policy = 4;
  if (this->network_fail_policy() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->network_fail_policy());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransportConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.mixer.v1.config.client.TransportConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const TransportConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransportConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.mixer.v1.config.client.TransportConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.mixer.v1.config.client.TransportConfig)
    MergeFrom(*source);
  }
}

void TransportConfig::MergeFrom(const TransportConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.mixer.v1.config.client.TransportConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.disable_check_cache() != 0) {
    set_disable_check_cache(from.disable_check_cache());
  }
  if (from.disable_quota_cache() != 0) {
    set_disable_quota_cache(from.disable_quota_cache());
  }
  if (from.disable_report_batch() != 0) {
    set_disable_report_batch(from.disable_report_batch());
  }
  if (from.network_fail_policy() != 0) {
    set_network_fail_policy(from.network_fail_policy());
  }
}

void TransportConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.mixer.v1.config.client.TransportConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransportConfig::CopyFrom(const TransportConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.mixer.v1.config.client.TransportConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransportConfig::IsInitialized() const {
  return true;
}

void TransportConfig::Swap(TransportConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransportConfig::InternalSwap(TransportConfig* other) {
  using std::swap;
  swap(disable_check_cache_, other->disable_check_cache_);
  swap(disable_quota_cache_, other->disable_quota_cache_);
  swap(disable_report_batch_, other->disable_report_batch_);
  swap(network_fail_policy_, other->network_fail_policy_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransportConfig::GetMetadata() const {
  protobuf_mixer_2fv1_2fconfig_2fclient_2fclient_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mixer_2fv1_2fconfig_2fclient_2fclient_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

HttpClientConfig_ServiceConfigsEntry_DoNotUse::HttpClientConfig_ServiceConfigsEntry_DoNotUse() {}
HttpClientConfig_ServiceConfigsEntry_DoNotUse::HttpClientConfig_ServiceConfigsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void HttpClientConfig_ServiceConfigsEntry_DoNotUse::MergeFrom(const HttpClientConfig_ServiceConfigsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata HttpClientConfig_ServiceConfigsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_mixer_2fv1_2fconfig_2fclient_2fclient_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mixer_2fv1_2fconfig_2fclient_2fclient_5fconfig_2eproto::file_level_metadata[2];
}
void HttpClientConfig_ServiceConfigsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void HttpClientConfig::InitAsDefaultInstance() {
  ::istio::mixer::v1::config::client::_HttpClientConfig_default_instance_._instance.get_mutable()->transport_ = const_cast< ::istio::mixer::v1::config::client::TransportConfig*>(
      ::istio::mixer::v1::config::client::TransportConfig::internal_default_instance());
  ::istio::mixer::v1::config::client::_HttpClientConfig_default_instance_._instance.get_mutable()->mixer_attributes_ = const_cast< ::istio::mixer::v1::Attributes*>(
      ::istio::mixer::v1::Attributes::internal_default_instance());
  ::istio::mixer::v1::config::client::_HttpClientConfig_default_instance_._instance.get_mutable()->forward_attributes_ = const_cast< ::istio::mixer::v1::Attributes*>(
      ::istio::mixer::v1::Attributes::internal_default_instance());
}
void HttpClientConfig::clear_mixer_attributes() {
  if (GetArenaNoVirtual() == NULL && mixer_attributes_ != NULL) {
    delete mixer_attributes_;
  }
  mixer_attributes_ = NULL;
}
void HttpClientConfig::clear_forward_attributes() {
  if (GetArenaNoVirtual() == NULL && forward_attributes_ != NULL) {
    delete forward_attributes_;
  }
  forward_attributes_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HttpClientConfig::kTransportFieldNumber;
const int HttpClientConfig::kServiceConfigsFieldNumber;
const int HttpClientConfig::kDefaultDestinationServiceFieldNumber;
const int HttpClientConfig::kMixerAttributesFieldNumber;
const int HttpClientConfig::kForwardAttributesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HttpClientConfig::HttpClientConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_mixer_2fv1_2fconfig_2fclient_2fclient_5fconfig_2eproto::InitDefaultsHttpClientConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.mixer.v1.config.client.HttpClientConfig)
}
HttpClientConfig::HttpClientConfig(const HttpClientConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  service_configs_.MergeFrom(from.service_configs_);
  default_destination_service_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.default_destination_service().size() > 0) {
    default_destination_service_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.default_destination_service_);
  }
  if (from.has_transport()) {
    transport_ = new ::istio::mixer::v1::config::client::TransportConfig(*from.transport_);
  } else {
    transport_ = NULL;
  }
  if (from.has_mixer_attributes()) {
    mixer_attributes_ = new ::istio::mixer::v1::Attributes(*from.mixer_attributes_);
  } else {
    mixer_attributes_ = NULL;
  }
  if (from.has_forward_attributes()) {
    forward_attributes_ = new ::istio::mixer::v1::Attributes(*from.forward_attributes_);
  } else {
    forward_attributes_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:istio.mixer.v1.config.client.HttpClientConfig)
}

void HttpClientConfig::SharedCtor() {
  default_destination_service_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&transport_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&forward_attributes_) -
      reinterpret_cast<char*>(&transport_)) + sizeof(forward_attributes_));
  _cached_size_ = 0;
}

HttpClientConfig::~HttpClientConfig() {
  // @@protoc_insertion_point(destructor:istio.mixer.v1.config.client.HttpClientConfig)
  SharedDtor();
}

void HttpClientConfig::SharedDtor() {
  default_destination_service_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete transport_;
  if (this != internal_default_instance()) delete mixer_attributes_;
  if (this != internal_default_instance()) delete forward_attributes_;
}

void HttpClientConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HttpClientConfig::descriptor() {
  ::protobuf_mixer_2fv1_2fconfig_2fclient_2fclient_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mixer_2fv1_2fconfig_2fclient_2fclient_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HttpClientConfig& HttpClientConfig::default_instance() {
  ::protobuf_mixer_2fv1_2fconfig_2fclient_2fclient_5fconfig_2eproto::InitDefaultsHttpClientConfig();
  return *internal_default_instance();
}

HttpClientConfig* HttpClientConfig::New(::google::protobuf::Arena* arena) const {
  HttpClientConfig* n = new HttpClientConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HttpClientConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.mixer.v1.config.client.HttpClientConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_configs_.Clear();
  default_destination_service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && transport_ != NULL) {
    delete transport_;
  }
  transport_ = NULL;
  if (GetArenaNoVirtual() == NULL && mixer_attributes_ != NULL) {
    delete mixer_attributes_;
  }
  mixer_attributes_ = NULL;
  if (GetArenaNoVirtual() == NULL && forward_attributes_ != NULL) {
    delete forward_attributes_;
  }
  forward_attributes_ = NULL;
  _internal_metadata_.Clear();
}

bool HttpClientConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.mixer.v1.config.client.HttpClientConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .istio.mixer.v1.config.client.TransportConfig transport = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_transport()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .istio.mixer.v1.config.client.ServiceConfig> service_configs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          HttpClientConfig_ServiceConfigsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              HttpClientConfig_ServiceConfigsEntry_DoNotUse,
              ::std::string, ::istio::mixer::v1::config::client::ServiceConfig,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::istio::mixer::v1::config::client::ServiceConfig > > parser(&service_configs_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.mixer.v1.config.client.HttpClientConfig.ServiceConfigsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string default_destination_service = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_default_destination_service()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->default_destination_service().data(), static_cast<int>(this->default_destination_service().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.mixer.v1.config.client.HttpClientConfig.default_destination_service"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.mixer.v1.Attributes mixer_attributes = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mixer_attributes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.mixer.v1.Attributes forward_attributes = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_forward_attributes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.mixer.v1.config.client.HttpClientConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.mixer.v1.config.client.HttpClientConfig)
  return false;
#undef DO_
}

void HttpClientConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.mixer.v1.config.client.HttpClientConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .istio.mixer.v1.config.client.TransportConfig transport = 1;
  if (this->has_transport()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->transport_, output);
  }

  // map<string, .istio.mixer.v1.config.client.ServiceConfig> service_configs = 2;
  if (!this->service_configs().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::istio::mixer::v1::config::client::ServiceConfig >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.mixer.v1.config.client.HttpClientConfig.ServiceConfigsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->service_configs().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->service_configs().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::istio::mixer::v1::config::client::ServiceConfig >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::istio::mixer::v1::config::client::ServiceConfig >::const_iterator
          it = this->service_configs().begin();
          it != this->service_configs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<HttpClientConfig_ServiceConfigsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(service_configs_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<HttpClientConfig_ServiceConfigsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::istio::mixer::v1::config::client::ServiceConfig >::const_iterator
          it = this->service_configs().begin();
          it != this->service_configs().end(); ++it) {
        entry.reset(service_configs_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // string default_destination_service = 3;
  if (this->default_destination_service().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->default_destination_service().data(), static_cast<int>(this->default_destination_service().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.mixer.v1.config.client.HttpClientConfig.default_destination_service");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->default_destination_service(), output);
  }

  // .istio.mixer.v1.Attributes mixer_attributes = 4;
  if (this->has_mixer_attributes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->mixer_attributes_, output);
  }

  // .istio.mixer.v1.Attributes forward_attributes = 5;
  if (this->has_forward_attributes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->forward_attributes_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.mixer.v1.config.client.HttpClientConfig)
}

::google::protobuf::uint8* HttpClientConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.mixer.v1.config.client.HttpClientConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .istio.mixer.v1.config.client.TransportConfig transport = 1;
  if (this->has_transport()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->transport_, deterministic, target);
  }

  // map<string, .istio.mixer.v1.config.client.ServiceConfig> service_configs = 2;
  if (!this->service_configs().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::istio::mixer::v1::config::client::ServiceConfig >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.mixer.v1.config.client.HttpClientConfig.ServiceConfigsEntry.key");
      }
    };

    if (deterministic &&
        this->service_configs().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->service_configs().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::istio::mixer::v1::config::client::ServiceConfig >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::istio::mixer::v1::config::client::ServiceConfig >::const_iterator
          it = this->service_configs().begin();
          it != this->service_configs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<HttpClientConfig_ServiceConfigsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(service_configs_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<HttpClientConfig_ServiceConfigsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::istio::mixer::v1::config::client::ServiceConfig >::const_iterator
          it = this->service_configs().begin();
          it != this->service_configs().end(); ++it) {
        entry.reset(service_configs_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // string default_destination_service = 3;
  if (this->default_destination_service().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->default_destination_service().data(), static_cast<int>(this->default_destination_service().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.mixer.v1.config.client.HttpClientConfig.default_destination_service");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->default_destination_service(), target);
  }

  // .istio.mixer.v1.Attributes mixer_attributes = 4;
  if (this->has_mixer_attributes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->mixer_attributes_, deterministic, target);
  }

  // .istio.mixer.v1.Attributes forward_attributes = 5;
  if (this->has_forward_attributes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->forward_attributes_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.mixer.v1.config.client.HttpClientConfig)
  return target;
}

size_t HttpClientConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.mixer.v1.config.client.HttpClientConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, .istio.mixer.v1.config.client.ServiceConfig> service_configs = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->service_configs_size());
  {
    ::google::protobuf::scoped_ptr<HttpClientConfig_ServiceConfigsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::istio::mixer::v1::config::client::ServiceConfig >::const_iterator
        it = this->service_configs().begin();
        it != this->service_configs().end(); ++it) {
      entry.reset(service_configs_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string default_destination_service = 3;
  if (this->default_destination_service().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->default_destination_service());
  }

  // .istio.mixer.v1.config.client.TransportConfig transport = 1;
  if (this->has_transport()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->transport_);
  }

  // .istio.mixer.v1.Attributes mixer_attributes = 4;
  if (this->has_mixer_attributes()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->mixer_attributes_);
  }

  // .istio.mixer.v1.Attributes forward_attributes = 5;
  if (this->has_forward_attributes()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->forward_attributes_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HttpClientConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.mixer.v1.config.client.HttpClientConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const HttpClientConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HttpClientConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.mixer.v1.config.client.HttpClientConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.mixer.v1.config.client.HttpClientConfig)
    MergeFrom(*source);
  }
}

void HttpClientConfig::MergeFrom(const HttpClientConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.mixer.v1.config.client.HttpClientConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  service_configs_.MergeFrom(from.service_configs_);
  if (from.default_destination_service().size() > 0) {

    default_destination_service_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.default_destination_service_);
  }
  if (from.has_transport()) {
    mutable_transport()->::istio::mixer::v1::config::client::TransportConfig::MergeFrom(from.transport());
  }
  if (from.has_mixer_attributes()) {
    mutable_mixer_attributes()->::istio::mixer::v1::Attributes::MergeFrom(from.mixer_attributes());
  }
  if (from.has_forward_attributes()) {
    mutable_forward_attributes()->::istio::mixer::v1::Attributes::MergeFrom(from.forward_attributes());
  }
}

void HttpClientConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.mixer.v1.config.client.HttpClientConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HttpClientConfig::CopyFrom(const HttpClientConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.mixer.v1.config.client.HttpClientConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HttpClientConfig::IsInitialized() const {
  return true;
}

void HttpClientConfig::Swap(HttpClientConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HttpClientConfig::InternalSwap(HttpClientConfig* other) {
  using std::swap;
  service_configs_.Swap(&other->service_configs_);
  default_destination_service_.Swap(&other->default_destination_service_);
  swap(transport_, other->transport_);
  swap(mixer_attributes_, other->mixer_attributes_);
  swap(forward_attributes_, other->forward_attributes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HttpClientConfig::GetMetadata() const {
  protobuf_mixer_2fv1_2fconfig_2fclient_2fclient_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mixer_2fv1_2fconfig_2fclient_2fclient_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TcpClientConfig::InitAsDefaultInstance() {
  ::istio::mixer::v1::config::client::_TcpClientConfig_default_instance_._instance.get_mutable()->transport_ = const_cast< ::istio::mixer::v1::config::client::TransportConfig*>(
      ::istio::mixer::v1::config::client::TransportConfig::internal_default_instance());
  ::istio::mixer::v1::config::client::_TcpClientConfig_default_instance_._instance.get_mutable()->mixer_attributes_ = const_cast< ::istio::mixer::v1::Attributes*>(
      ::istio::mixer::v1::Attributes::internal_default_instance());
  ::istio::mixer::v1::config::client::_TcpClientConfig_default_instance_._instance.get_mutable()->connection_quota_spec_ = const_cast< ::istio::mixer::v1::config::client::QuotaSpec*>(
      ::istio::mixer::v1::config::client::QuotaSpec::internal_default_instance());
}
void TcpClientConfig::clear_mixer_attributes() {
  if (GetArenaNoVirtual() == NULL && mixer_attributes_ != NULL) {
    delete mixer_attributes_;
  }
  mixer_attributes_ = NULL;
}
void TcpClientConfig::clear_connection_quota_spec() {
  if (GetArenaNoVirtual() == NULL && connection_quota_spec_ != NULL) {
    delete connection_quota_spec_;
  }
  connection_quota_spec_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TcpClientConfig::kTransportFieldNumber;
const int TcpClientConfig::kMixerAttributesFieldNumber;
const int TcpClientConfig::kDisableCheckCallsFieldNumber;
const int TcpClientConfig::kDisableReportCallsFieldNumber;
const int TcpClientConfig::kConnectionQuotaSpecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TcpClientConfig::TcpClientConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_mixer_2fv1_2fconfig_2fclient_2fclient_5fconfig_2eproto::InitDefaultsTcpClientConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.mixer.v1.config.client.TcpClientConfig)
}
TcpClientConfig::TcpClientConfig(const TcpClientConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_transport()) {
    transport_ = new ::istio::mixer::v1::config::client::TransportConfig(*from.transport_);
  } else {
    transport_ = NULL;
  }
  if (from.has_mixer_attributes()) {
    mixer_attributes_ = new ::istio::mixer::v1::Attributes(*from.mixer_attributes_);
  } else {
    mixer_attributes_ = NULL;
  }
  if (from.has_connection_quota_spec()) {
    connection_quota_spec_ = new ::istio::mixer::v1::config::client::QuotaSpec(*from.connection_quota_spec_);
  } else {
    connection_quota_spec_ = NULL;
  }
  ::memcpy(&disable_check_calls_, &from.disable_check_calls_,
    static_cast<size_t>(reinterpret_cast<char*>(&disable_report_calls_) -
    reinterpret_cast<char*>(&disable_check_calls_)) + sizeof(disable_report_calls_));
  // @@protoc_insertion_point(copy_constructor:istio.mixer.v1.config.client.TcpClientConfig)
}

void TcpClientConfig::SharedCtor() {
  ::memset(&transport_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disable_report_calls_) -
      reinterpret_cast<char*>(&transport_)) + sizeof(disable_report_calls_));
  _cached_size_ = 0;
}

TcpClientConfig::~TcpClientConfig() {
  // @@protoc_insertion_point(destructor:istio.mixer.v1.config.client.TcpClientConfig)
  SharedDtor();
}

void TcpClientConfig::SharedDtor() {
  if (this != internal_default_instance()) delete transport_;
  if (this != internal_default_instance()) delete mixer_attributes_;
  if (this != internal_default_instance()) delete connection_quota_spec_;
}

void TcpClientConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TcpClientConfig::descriptor() {
  ::protobuf_mixer_2fv1_2fconfig_2fclient_2fclient_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mixer_2fv1_2fconfig_2fclient_2fclient_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TcpClientConfig& TcpClientConfig::default_instance() {
  ::protobuf_mixer_2fv1_2fconfig_2fclient_2fclient_5fconfig_2eproto::InitDefaultsTcpClientConfig();
  return *internal_default_instance();
}

TcpClientConfig* TcpClientConfig::New(::google::protobuf::Arena* arena) const {
  TcpClientConfig* n = new TcpClientConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TcpClientConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.mixer.v1.config.client.TcpClientConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && transport_ != NULL) {
    delete transport_;
  }
  transport_ = NULL;
  if (GetArenaNoVirtual() == NULL && mixer_attributes_ != NULL) {
    delete mixer_attributes_;
  }
  mixer_attributes_ = NULL;
  if (GetArenaNoVirtual() == NULL && connection_quota_spec_ != NULL) {
    delete connection_quota_spec_;
  }
  connection_quota_spec_ = NULL;
  ::memset(&disable_check_calls_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disable_report_calls_) -
      reinterpret_cast<char*>(&disable_check_calls_)) + sizeof(disable_report_calls_));
  _internal_metadata_.Clear();
}

bool TcpClientConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.mixer.v1.config.client.TcpClientConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .istio.mixer.v1.config.client.TransportConfig transport = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_transport()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.mixer.v1.Attributes mixer_attributes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mixer_attributes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool disable_check_calls = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_check_calls_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool disable_report_calls = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_report_calls_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.mixer.v1.config.client.QuotaSpec connection_quota_spec = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_connection_quota_spec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.mixer.v1.config.client.TcpClientConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.mixer.v1.config.client.TcpClientConfig)
  return false;
#undef DO_
}

void TcpClientConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.mixer.v1.config.client.TcpClientConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .istio.mixer.v1.config.client.TransportConfig transport = 1;
  if (this->has_transport()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->transport_, output);
  }

  // .istio.mixer.v1.Attributes mixer_attributes = 2;
  if (this->has_mixer_attributes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->mixer_attributes_, output);
  }

  // bool disable_check_calls = 3;
  if (this->disable_check_calls() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->disable_check_calls(), output);
  }

  // bool disable_report_calls = 4;
  if (this->disable_report_calls() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->disable_report_calls(), output);
  }

  // .istio.mixer.v1.config.client.QuotaSpec connection_quota_spec = 5;
  if (this->has_connection_quota_spec()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->connection_quota_spec_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.mixer.v1.config.client.TcpClientConfig)
}

::google::protobuf::uint8* TcpClientConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.mixer.v1.config.client.TcpClientConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .istio.mixer.v1.config.client.TransportConfig transport = 1;
  if (this->has_transport()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->transport_, deterministic, target);
  }

  // .istio.mixer.v1.Attributes mixer_attributes = 2;
  if (this->has_mixer_attributes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->mixer_attributes_, deterministic, target);
  }

  // bool disable_check_calls = 3;
  if (this->disable_check_calls() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->disable_check_calls(), target);
  }

  // bool disable_report_calls = 4;
  if (this->disable_report_calls() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->disable_report_calls(), target);
  }

  // .istio.mixer.v1.config.client.QuotaSpec connection_quota_spec = 5;
  if (this->has_connection_quota_spec()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->connection_quota_spec_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.mixer.v1.config.client.TcpClientConfig)
  return target;
}

size_t TcpClientConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.mixer.v1.config.client.TcpClientConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .istio.mixer.v1.config.client.TransportConfig transport = 1;
  if (this->has_transport()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->transport_);
  }

  // .istio.mixer.v1.Attributes mixer_attributes = 2;
  if (this->has_mixer_attributes()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->mixer_attributes_);
  }

  // .istio.mixer.v1.config.client.QuotaSpec connection_quota_spec = 5;
  if (this->has_connection_quota_spec()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->connection_quota_spec_);
  }

  // bool disable_check_calls = 3;
  if (this->disable_check_calls() != 0) {
    total_size += 1 + 1;
  }

  // bool disable_report_calls = 4;
  if (this->disable_report_calls() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TcpClientConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.mixer.v1.config.client.TcpClientConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const TcpClientConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TcpClientConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.mixer.v1.config.client.TcpClientConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.mixer.v1.config.client.TcpClientConfig)
    MergeFrom(*source);
  }
}

void TcpClientConfig::MergeFrom(const TcpClientConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.mixer.v1.config.client.TcpClientConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_transport()) {
    mutable_transport()->::istio::mixer::v1::config::client::TransportConfig::MergeFrom(from.transport());
  }
  if (from.has_mixer_attributes()) {
    mutable_mixer_attributes()->::istio::mixer::v1::Attributes::MergeFrom(from.mixer_attributes());
  }
  if (from.has_connection_quota_spec()) {
    mutable_connection_quota_spec()->::istio::mixer::v1::config::client::QuotaSpec::MergeFrom(from.connection_quota_spec());
  }
  if (from.disable_check_calls() != 0) {
    set_disable_check_calls(from.disable_check_calls());
  }
  if (from.disable_report_calls() != 0) {
    set_disable_report_calls(from.disable_report_calls());
  }
}

void TcpClientConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.mixer.v1.config.client.TcpClientConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TcpClientConfig::CopyFrom(const TcpClientConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.mixer.v1.config.client.TcpClientConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TcpClientConfig::IsInitialized() const {
  return true;
}

void TcpClientConfig::Swap(TcpClientConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TcpClientConfig::InternalSwap(TcpClientConfig* other) {
  using std::swap;
  swap(transport_, other->transport_);
  swap(mixer_attributes_, other->mixer_attributes_);
  swap(connection_quota_spec_, other->connection_quota_spec_);
  swap(disable_check_calls_, other->disable_check_calls_);
  swap(disable_report_calls_, other->disable_report_calls_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TcpClientConfig::GetMetadata() const {
  protobuf_mixer_2fv1_2fconfig_2fclient_2fclient_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mixer_2fv1_2fconfig_2fclient_2fclient_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace client
}  // namespace config
}  // namespace v1
}  // namespace mixer
}  // namespace istio

// @@protoc_insertion_point(global_scope)
