// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mixer/v1/config/client/api_spec.proto

#include "mixer/v1/config/client/api_spec.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
namespace istio {
namespace mixer {
namespace v1 {
namespace config {
namespace client {
class HTTPAPISpecDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HTTPAPISpec>
      _instance;
} _HTTPAPISpec_default_instance_;
class HTTPAPISpecPatternDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HTTPAPISpecPattern>
      _instance;
  ::google::protobuf::internal::ArenaStringPtr uri_template_;
  ::google::protobuf::internal::ArenaStringPtr regex_;
} _HTTPAPISpecPattern_default_instance_;
class APIKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<APIKey>
      _instance;
  ::google::protobuf::internal::ArenaStringPtr query_;
  ::google::protobuf::internal::ArenaStringPtr header_;
  ::google::protobuf::internal::ArenaStringPtr cookie_;
} _APIKey_default_instance_;
class HTTPAPISpecReferenceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HTTPAPISpecReference>
      _instance;
} _HTTPAPISpecReference_default_instance_;
class HTTPAPISpecBindingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HTTPAPISpecBinding>
      _instance;
} _HTTPAPISpecBinding_default_instance_;
}  // namespace client
}  // namespace config
}  // namespace v1
}  // namespace mixer
}  // namespace istio
namespace protobuf_mixer_2fv1_2fconfig_2fclient_2fapi_5fspec_2eproto {
void InitDefaultsHTTPAPISpecImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  protobuf_mixer_2fv1_2fattributes_2eproto::InitDefaultsAttributes();
  protobuf_mixer_2fv1_2fconfig_2fclient_2fapi_5fspec_2eproto::InitDefaultsHTTPAPISpecPattern();
  protobuf_mixer_2fv1_2fconfig_2fclient_2fapi_5fspec_2eproto::InitDefaultsAPIKey();
  {
    void* ptr = &::istio::mixer::v1::config::client::_HTTPAPISpec_default_instance_;
    new (ptr) ::istio::mixer::v1::config::client::HTTPAPISpec();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::mixer::v1::config::client::HTTPAPISpec::InitAsDefaultInstance();
}

void InitDefaultsHTTPAPISpec() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHTTPAPISpecImpl);
}

void InitDefaultsHTTPAPISpecPatternImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  protobuf_mixer_2fv1_2fattributes_2eproto::InitDefaultsAttributes();
  {
    void* ptr = &::istio::mixer::v1::config::client::_HTTPAPISpecPattern_default_instance_;
    new (ptr) ::istio::mixer::v1::config::client::HTTPAPISpecPattern();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::mixer::v1::config::client::HTTPAPISpecPattern::InitAsDefaultInstance();
}

void InitDefaultsHTTPAPISpecPattern() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHTTPAPISpecPatternImpl);
}

void InitDefaultsAPIKeyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  {
    void* ptr = &::istio::mixer::v1::config::client::_APIKey_default_instance_;
    new (ptr) ::istio::mixer::v1::config::client::APIKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::mixer::v1::config::client::APIKey::InitAsDefaultInstance();
}

void InitDefaultsAPIKey() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAPIKeyImpl);
}

void InitDefaultsHTTPAPISpecReferenceImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  {
    void* ptr = &::istio::mixer::v1::config::client::_HTTPAPISpecReference_default_instance_;
    new (ptr) ::istio::mixer::v1::config::client::HTTPAPISpecReference();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::mixer::v1::config::client::HTTPAPISpecReference::InitAsDefaultInstance();
}

void InitDefaultsHTTPAPISpecReference() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHTTPAPISpecReferenceImpl);
}

void InitDefaultsHTTPAPISpecBindingImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  protobuf_mixer_2fv1_2fconfig_2fclient_2fservice_2eproto::InitDefaultsIstioService();
  protobuf_mixer_2fv1_2fconfig_2fclient_2fapi_5fspec_2eproto::InitDefaultsHTTPAPISpecReference();
  {
    void* ptr = &::istio::mixer::v1::config::client::_HTTPAPISpecBinding_default_instance_;
    new (ptr) ::istio::mixer::v1::config::client::HTTPAPISpecBinding();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::mixer::v1::config::client::HTTPAPISpecBinding::InitAsDefaultInstance();
}

void InitDefaultsHTTPAPISpecBinding() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHTTPAPISpecBindingImpl);
}

::google::protobuf::Metadata file_level_metadata[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::mixer::v1::config::client::HTTPAPISpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::mixer::v1::config::client::HTTPAPISpec, attributes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::mixer::v1::config::client::HTTPAPISpec, patterns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::mixer::v1::config::client::HTTPAPISpec, api_keys_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::mixer::v1::config::client::HTTPAPISpecPattern, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::mixer::v1::config::client::HTTPAPISpecPattern, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::mixer::v1::config::client::HTTPAPISpecPattern, attributes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::mixer::v1::config::client::HTTPAPISpecPattern, http_method_),
  offsetof(::istio::mixer::v1::config::client::HTTPAPISpecPatternDefaultTypeInternal, uri_template_),
  offsetof(::istio::mixer::v1::config::client::HTTPAPISpecPatternDefaultTypeInternal, regex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::mixer::v1::config::client::HTTPAPISpecPattern, pattern_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::mixer::v1::config::client::APIKey, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::mixer::v1::config::client::APIKey, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::istio::mixer::v1::config::client::APIKeyDefaultTypeInternal, query_),
  offsetof(::istio::mixer::v1::config::client::APIKeyDefaultTypeInternal, header_),
  offsetof(::istio::mixer::v1::config::client::APIKeyDefaultTypeInternal, cookie_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::mixer::v1::config::client::APIKey, key_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::mixer::v1::config::client::HTTPAPISpecReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::mixer::v1::config::client::HTTPAPISpecReference, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::mixer::v1::config::client::HTTPAPISpecReference, namespace__),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::mixer::v1::config::client::HTTPAPISpecBinding, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::mixer::v1::config::client::HTTPAPISpecBinding, services_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::mixer::v1::config::client::HTTPAPISpecBinding, api_specs_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::istio::mixer::v1::config::client::HTTPAPISpec)},
  { 8, -1, sizeof(::istio::mixer::v1::config::client::HTTPAPISpecPattern)},
  { 18, -1, sizeof(::istio::mixer::v1::config::client::APIKey)},
  { 27, -1, sizeof(::istio::mixer::v1::config::client::HTTPAPISpecReference)},
  { 34, -1, sizeof(::istio::mixer::v1::config::client::HTTPAPISpecBinding)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::mixer::v1::config::client::_HTTPAPISpec_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::mixer::v1::config::client::_HTTPAPISpecPattern_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::mixer::v1::config::client::_APIKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::mixer::v1::config::client::_HTTPAPISpecReference_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::mixer::v1::config::client::_HTTPAPISpecBinding_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "mixer/v1/config/client/api_spec.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n%mixer/v1/config/client/api_spec.proto\022"
      "\034istio.mixer.v1.config.client\032\024gogoproto"
      "/gogo.proto\032\031mixer/v1/attributes.proto\032$"
      "mixer/v1/config/client/service.proto\"\271\001\n"
      "\013HTTPAPISpec\022.\n\nattributes\030\001 \001(\0132\032.istio"
      ".mixer.v1.Attributes\022B\n\010patterns\030\002 \003(\01320"
      ".istio.mixer.v1.config.client.HTTPAPISpe"
      "cPattern\0226\n\010api_keys\030\003 \003(\0132$.istio.mixer"
      ".v1.config.client.APIKey\"\215\001\n\022HTTPAPISpec"
      "Pattern\022.\n\nattributes\030\001 \001(\0132\032.istio.mixe"
      "r.v1.Attributes\022\023\n\013http_method\030\002 \001(\t\022\026\n\014"
      "uri_template\030\003 \001(\tH\000\022\017\n\005regex\030\004 \001(\tH\000B\t\n"
      "\007pattern\"D\n\006APIKey\022\017\n\005query\030\001 \001(\tH\000\022\020\n\006h"
      "eader\030\002 \001(\tH\000\022\020\n\006cookie\030\003 \001(\tH\000B\005\n\003key\"7"
      "\n\024HTTPAPISpecReference\022\014\n\004name\030\001 \001(\t\022\021\n\t"
      "namespace\030\002 \001(\t\"\231\001\n\022HTTPAPISpecBinding\022<"
      "\n\010services\030\001 \003(\0132*.istio.mixer.v1.config"
      ".client.IstioService\022E\n\tapi_specs\030\002 \003(\0132"
      "2.istio.mixer.v1.config.client.HTTPAPISp"
      "ecReferenceB\014\310\341\036\000\250\342\036\000\360\341\036\000b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 793);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mixer/v1/config/client/api_spec.proto", &protobuf_RegisterTypes);
  ::protobuf_gogoproto_2fgogo_2eproto::AddDescriptors();
  ::protobuf_mixer_2fv1_2fattributes_2eproto::AddDescriptors();
  ::protobuf_mixer_2fv1_2fconfig_2fclient_2fservice_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_mixer_2fv1_2fconfig_2fclient_2fapi_5fspec_2eproto
namespace istio {
namespace mixer {
namespace v1 {
namespace config {
namespace client {

// ===================================================================

void HTTPAPISpec::InitAsDefaultInstance() {
  ::istio::mixer::v1::config::client::_HTTPAPISpec_default_instance_._instance.get_mutable()->attributes_ = const_cast< ::istio::mixer::v1::Attributes*>(
      ::istio::mixer::v1::Attributes::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HTTPAPISpec::kAttributesFieldNumber;
const int HTTPAPISpec::kPatternsFieldNumber;
const int HTTPAPISpec::kApiKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HTTPAPISpec::HTTPAPISpec()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_mixer_2fv1_2fconfig_2fclient_2fapi_5fspec_2eproto::InitDefaultsHTTPAPISpec();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.mixer.v1.config.client.HTTPAPISpec)
}
HTTPAPISpec::HTTPAPISpec(const HTTPAPISpec& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      patterns_(from.patterns_),
      api_keys_(from.api_keys_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_attributes()) {
    attributes_ = new ::istio::mixer::v1::Attributes(*from.attributes_);
  } else {
    attributes_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:istio.mixer.v1.config.client.HTTPAPISpec)
}

void HTTPAPISpec::SharedCtor() {
  attributes_ = NULL;
  _cached_size_ = 0;
}

HTTPAPISpec::~HTTPAPISpec() {
  // @@protoc_insertion_point(destructor:istio.mixer.v1.config.client.HTTPAPISpec)
  SharedDtor();
}

void HTTPAPISpec::SharedDtor() {
  if (this != internal_default_instance()) delete attributes_;
}

void HTTPAPISpec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HTTPAPISpec::descriptor() {
  ::protobuf_mixer_2fv1_2fconfig_2fclient_2fapi_5fspec_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mixer_2fv1_2fconfig_2fclient_2fapi_5fspec_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HTTPAPISpec& HTTPAPISpec::default_instance() {
  ::protobuf_mixer_2fv1_2fconfig_2fclient_2fapi_5fspec_2eproto::InitDefaultsHTTPAPISpec();
  return *internal_default_instance();
}

HTTPAPISpec* HTTPAPISpec::New(::google::protobuf::Arena* arena) const {
  HTTPAPISpec* n = new HTTPAPISpec;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HTTPAPISpec::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.mixer.v1.config.client.HTTPAPISpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  patterns_.Clear();
  api_keys_.Clear();
  if (GetArenaNoVirtual() == NULL && attributes_ != NULL) {
    delete attributes_;
  }
  attributes_ = NULL;
  _internal_metadata_.Clear();
}

bool HTTPAPISpec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.mixer.v1.config.client.HTTPAPISpec)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .istio.mixer.v1.Attributes attributes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attributes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .istio.mixer.v1.config.client.HTTPAPISpecPattern patterns = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_patterns()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .istio.mixer.v1.config.client.APIKey api_keys = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_api_keys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.mixer.v1.config.client.HTTPAPISpec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.mixer.v1.config.client.HTTPAPISpec)
  return false;
#undef DO_
}

void HTTPAPISpec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.mixer.v1.config.client.HTTPAPISpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .istio.mixer.v1.Attributes attributes = 1;
  if (this->has_attributes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->attributes_, output);
  }

  // repeated .istio.mixer.v1.config.client.HTTPAPISpecPattern patterns = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->patterns_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->patterns(static_cast<int>(i)), output);
  }

  // repeated .istio.mixer.v1.config.client.APIKey api_keys = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->api_keys_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->api_keys(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.mixer.v1.config.client.HTTPAPISpec)
}

::google::protobuf::uint8* HTTPAPISpec::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.mixer.v1.config.client.HTTPAPISpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .istio.mixer.v1.Attributes attributes = 1;
  if (this->has_attributes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->attributes_, deterministic, target);
  }

  // repeated .istio.mixer.v1.config.client.HTTPAPISpecPattern patterns = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->patterns_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->patterns(static_cast<int>(i)), deterministic, target);
  }

  // repeated .istio.mixer.v1.config.client.APIKey api_keys = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->api_keys_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->api_keys(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.mixer.v1.config.client.HTTPAPISpec)
  return target;
}

size_t HTTPAPISpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.mixer.v1.config.client.HTTPAPISpec)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .istio.mixer.v1.config.client.HTTPAPISpecPattern patterns = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->patterns_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->patterns(static_cast<int>(i)));
    }
  }

  // repeated .istio.mixer.v1.config.client.APIKey api_keys = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->api_keys_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->api_keys(static_cast<int>(i)));
    }
  }

  // .istio.mixer.v1.Attributes attributes = 1;
  if (this->has_attributes()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->attributes_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HTTPAPISpec::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.mixer.v1.config.client.HTTPAPISpec)
  GOOGLE_DCHECK_NE(&from, this);
  const HTTPAPISpec* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HTTPAPISpec>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.mixer.v1.config.client.HTTPAPISpec)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.mixer.v1.config.client.HTTPAPISpec)
    MergeFrom(*source);
  }
}

void HTTPAPISpec::MergeFrom(const HTTPAPISpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.mixer.v1.config.client.HTTPAPISpec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  patterns_.MergeFrom(from.patterns_);
  api_keys_.MergeFrom(from.api_keys_);
  if (from.has_attributes()) {
    mutable_attributes()->::istio::mixer::v1::Attributes::MergeFrom(from.attributes());
  }
}

void HTTPAPISpec::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.mixer.v1.config.client.HTTPAPISpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HTTPAPISpec::CopyFrom(const HTTPAPISpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.mixer.v1.config.client.HTTPAPISpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HTTPAPISpec::IsInitialized() const {
  return true;
}

void HTTPAPISpec::Swap(HTTPAPISpec* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HTTPAPISpec::InternalSwap(HTTPAPISpec* other) {
  using std::swap;
  patterns_.InternalSwap(&other->patterns_);
  api_keys_.InternalSwap(&other->api_keys_);
  swap(attributes_, other->attributes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HTTPAPISpec::GetMetadata() const {
  protobuf_mixer_2fv1_2fconfig_2fclient_2fapi_5fspec_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mixer_2fv1_2fconfig_2fclient_2fapi_5fspec_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HTTPAPISpecPattern::InitAsDefaultInstance() {
  ::istio::mixer::v1::config::client::_HTTPAPISpecPattern_default_instance_._instance.get_mutable()->attributes_ = const_cast< ::istio::mixer::v1::Attributes*>(
      ::istio::mixer::v1::Attributes::internal_default_instance());
  ::istio::mixer::v1::config::client::_HTTPAPISpecPattern_default_instance_.uri_template_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::istio::mixer::v1::config::client::_HTTPAPISpecPattern_default_instance_.regex_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HTTPAPISpecPattern::kAttributesFieldNumber;
const int HTTPAPISpecPattern::kHttpMethodFieldNumber;
const int HTTPAPISpecPattern::kUriTemplateFieldNumber;
const int HTTPAPISpecPattern::kRegexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HTTPAPISpecPattern::HTTPAPISpecPattern()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_mixer_2fv1_2fconfig_2fclient_2fapi_5fspec_2eproto::InitDefaultsHTTPAPISpecPattern();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.mixer.v1.config.client.HTTPAPISpecPattern)
}
HTTPAPISpecPattern::HTTPAPISpecPattern(const HTTPAPISpecPattern& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  http_method_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.http_method().size() > 0) {
    http_method_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.http_method_);
  }
  if (from.has_attributes()) {
    attributes_ = new ::istio::mixer::v1::Attributes(*from.attributes_);
  } else {
    attributes_ = NULL;
  }
  clear_has_pattern();
  switch (from.pattern_case()) {
    case kUriTemplate: {
      set_uri_template(from.uri_template());
      break;
    }
    case kRegex: {
      set_regex(from.regex());
      break;
    }
    case PATTERN_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:istio.mixer.v1.config.client.HTTPAPISpecPattern)
}

void HTTPAPISpecPattern::SharedCtor() {
  http_method_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attributes_ = NULL;
  clear_has_pattern();
  _cached_size_ = 0;
}

HTTPAPISpecPattern::~HTTPAPISpecPattern() {
  // @@protoc_insertion_point(destructor:istio.mixer.v1.config.client.HTTPAPISpecPattern)
  SharedDtor();
}

void HTTPAPISpecPattern::SharedDtor() {
  http_method_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete attributes_;
  if (has_pattern()) {
    clear_pattern();
  }
}

void HTTPAPISpecPattern::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HTTPAPISpecPattern::descriptor() {
  ::protobuf_mixer_2fv1_2fconfig_2fclient_2fapi_5fspec_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mixer_2fv1_2fconfig_2fclient_2fapi_5fspec_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HTTPAPISpecPattern& HTTPAPISpecPattern::default_instance() {
  ::protobuf_mixer_2fv1_2fconfig_2fclient_2fapi_5fspec_2eproto::InitDefaultsHTTPAPISpecPattern();
  return *internal_default_instance();
}

HTTPAPISpecPattern* HTTPAPISpecPattern::New(::google::protobuf::Arena* arena) const {
  HTTPAPISpecPattern* n = new HTTPAPISpecPattern;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HTTPAPISpecPattern::clear_pattern() {
// @@protoc_insertion_point(one_of_clear_start:istio.mixer.v1.config.client.HTTPAPISpecPattern)
  switch (pattern_case()) {
    case kUriTemplate: {
      pattern_.uri_template_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kRegex: {
      pattern_.regex_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case PATTERN_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PATTERN_NOT_SET;
}


void HTTPAPISpecPattern::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.mixer.v1.config.client.HTTPAPISpecPattern)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  http_method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && attributes_ != NULL) {
    delete attributes_;
  }
  attributes_ = NULL;
  clear_pattern();
  _internal_metadata_.Clear();
}

bool HTTPAPISpecPattern::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.mixer.v1.config.client.HTTPAPISpecPattern)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .istio.mixer.v1.Attributes attributes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attributes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string http_method = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_http_method()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->http_method().data(), static_cast<int>(this->http_method().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.mixer.v1.config.client.HTTPAPISpecPattern.http_method"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string uri_template = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri_template()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uri_template().data(), static_cast<int>(this->uri_template().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.mixer.v1.config.client.HTTPAPISpecPattern.uri_template"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string regex = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_regex()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->regex().data(), static_cast<int>(this->regex().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.mixer.v1.config.client.HTTPAPISpecPattern.regex"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.mixer.v1.config.client.HTTPAPISpecPattern)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.mixer.v1.config.client.HTTPAPISpecPattern)
  return false;
#undef DO_
}

void HTTPAPISpecPattern::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.mixer.v1.config.client.HTTPAPISpecPattern)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .istio.mixer.v1.Attributes attributes = 1;
  if (this->has_attributes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->attributes_, output);
  }

  // string http_method = 2;
  if (this->http_method().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->http_method().data(), static_cast<int>(this->http_method().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.mixer.v1.config.client.HTTPAPISpecPattern.http_method");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->http_method(), output);
  }

  // string uri_template = 3;
  if (has_uri_template()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uri_template().data(), static_cast<int>(this->uri_template().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.mixer.v1.config.client.HTTPAPISpecPattern.uri_template");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->uri_template(), output);
  }

  // string regex = 4;
  if (has_regex()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->regex().data(), static_cast<int>(this->regex().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.mixer.v1.config.client.HTTPAPISpecPattern.regex");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->regex(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.mixer.v1.config.client.HTTPAPISpecPattern)
}

::google::protobuf::uint8* HTTPAPISpecPattern::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.mixer.v1.config.client.HTTPAPISpecPattern)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .istio.mixer.v1.Attributes attributes = 1;
  if (this->has_attributes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->attributes_, deterministic, target);
  }

  // string http_method = 2;
  if (this->http_method().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->http_method().data(), static_cast<int>(this->http_method().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.mixer.v1.config.client.HTTPAPISpecPattern.http_method");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->http_method(), target);
  }

  // string uri_template = 3;
  if (has_uri_template()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uri_template().data(), static_cast<int>(this->uri_template().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.mixer.v1.config.client.HTTPAPISpecPattern.uri_template");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->uri_template(), target);
  }

  // string regex = 4;
  if (has_regex()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->regex().data(), static_cast<int>(this->regex().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.mixer.v1.config.client.HTTPAPISpecPattern.regex");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->regex(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.mixer.v1.config.client.HTTPAPISpecPattern)
  return target;
}

size_t HTTPAPISpecPattern::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.mixer.v1.config.client.HTTPAPISpecPattern)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string http_method = 2;
  if (this->http_method().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->http_method());
  }

  // .istio.mixer.v1.Attributes attributes = 1;
  if (this->has_attributes()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->attributes_);
  }

  switch (pattern_case()) {
    // string uri_template = 3;
    case kUriTemplate: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri_template());
      break;
    }
    // string regex = 4;
    case kRegex: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->regex());
      break;
    }
    case PATTERN_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HTTPAPISpecPattern::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.mixer.v1.config.client.HTTPAPISpecPattern)
  GOOGLE_DCHECK_NE(&from, this);
  const HTTPAPISpecPattern* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HTTPAPISpecPattern>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.mixer.v1.config.client.HTTPAPISpecPattern)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.mixer.v1.config.client.HTTPAPISpecPattern)
    MergeFrom(*source);
  }
}

void HTTPAPISpecPattern::MergeFrom(const HTTPAPISpecPattern& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.mixer.v1.config.client.HTTPAPISpecPattern)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.http_method().size() > 0) {

    http_method_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.http_method_);
  }
  if (from.has_attributes()) {
    mutable_attributes()->::istio::mixer::v1::Attributes::MergeFrom(from.attributes());
  }
  switch (from.pattern_case()) {
    case kUriTemplate: {
      set_uri_template(from.uri_template());
      break;
    }
    case kRegex: {
      set_regex(from.regex());
      break;
    }
    case PATTERN_NOT_SET: {
      break;
    }
  }
}

void HTTPAPISpecPattern::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.mixer.v1.config.client.HTTPAPISpecPattern)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HTTPAPISpecPattern::CopyFrom(const HTTPAPISpecPattern& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.mixer.v1.config.client.HTTPAPISpecPattern)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HTTPAPISpecPattern::IsInitialized() const {
  return true;
}

void HTTPAPISpecPattern::Swap(HTTPAPISpecPattern* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HTTPAPISpecPattern::InternalSwap(HTTPAPISpecPattern* other) {
  using std::swap;
  http_method_.Swap(&other->http_method_);
  swap(attributes_, other->attributes_);
  swap(pattern_, other->pattern_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HTTPAPISpecPattern::GetMetadata() const {
  protobuf_mixer_2fv1_2fconfig_2fclient_2fapi_5fspec_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mixer_2fv1_2fconfig_2fclient_2fapi_5fspec_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void APIKey::InitAsDefaultInstance() {
  ::istio::mixer::v1::config::client::_APIKey_default_instance_.query_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::istio::mixer::v1::config::client::_APIKey_default_instance_.header_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::istio::mixer::v1::config::client::_APIKey_default_instance_.cookie_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int APIKey::kQueryFieldNumber;
const int APIKey::kHeaderFieldNumber;
const int APIKey::kCookieFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

APIKey::APIKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_mixer_2fv1_2fconfig_2fclient_2fapi_5fspec_2eproto::InitDefaultsAPIKey();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.mixer.v1.config.client.APIKey)
}
APIKey::APIKey(const APIKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_key();
  switch (from.key_case()) {
    case kQuery: {
      set_query(from.query());
      break;
    }
    case kHeader: {
      set_header(from.header());
      break;
    }
    case kCookie: {
      set_cookie(from.cookie());
      break;
    }
    case KEY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:istio.mixer.v1.config.client.APIKey)
}

void APIKey::SharedCtor() {
  clear_has_key();
  _cached_size_ = 0;
}

APIKey::~APIKey() {
  // @@protoc_insertion_point(destructor:istio.mixer.v1.config.client.APIKey)
  SharedDtor();
}

void APIKey::SharedDtor() {
  if (has_key()) {
    clear_key();
  }
}

void APIKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* APIKey::descriptor() {
  ::protobuf_mixer_2fv1_2fconfig_2fclient_2fapi_5fspec_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mixer_2fv1_2fconfig_2fclient_2fapi_5fspec_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const APIKey& APIKey::default_instance() {
  ::protobuf_mixer_2fv1_2fconfig_2fclient_2fapi_5fspec_2eproto::InitDefaultsAPIKey();
  return *internal_default_instance();
}

APIKey* APIKey::New(::google::protobuf::Arena* arena) const {
  APIKey* n = new APIKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void APIKey::clear_key() {
// @@protoc_insertion_point(one_of_clear_start:istio.mixer.v1.config.client.APIKey)
  switch (key_case()) {
    case kQuery: {
      key_.query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kHeader: {
      key_.header_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kCookie: {
      key_.cookie_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case KEY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = KEY_NOT_SET;
}


void APIKey::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.mixer.v1.config.client.APIKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_key();
  _internal_metadata_.Clear();
}

bool APIKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.mixer.v1.config.client.APIKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string query = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->query().data(), static_cast<int>(this->query().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.mixer.v1.config.client.APIKey.query"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string header = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_header()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->header().data(), static_cast<int>(this->header().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.mixer.v1.config.client.APIKey.header"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cookie = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cookie()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cookie().data(), static_cast<int>(this->cookie().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.mixer.v1.config.client.APIKey.cookie"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.mixer.v1.config.client.APIKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.mixer.v1.config.client.APIKey)
  return false;
#undef DO_
}

void APIKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.mixer.v1.config.client.APIKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string query = 1;
  if (has_query()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.mixer.v1.config.client.APIKey.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->query(), output);
  }

  // string header = 2;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->header().data(), static_cast<int>(this->header().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.mixer.v1.config.client.APIKey.header");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->header(), output);
  }

  // string cookie = 3;
  if (has_cookie()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cookie().data(), static_cast<int>(this->cookie().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.mixer.v1.config.client.APIKey.cookie");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cookie(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.mixer.v1.config.client.APIKey)
}

::google::protobuf::uint8* APIKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.mixer.v1.config.client.APIKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string query = 1;
  if (has_query()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.mixer.v1.config.client.APIKey.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query(), target);
  }

  // string header = 2;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->header().data(), static_cast<int>(this->header().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.mixer.v1.config.client.APIKey.header");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->header(), target);
  }

  // string cookie = 3;
  if (has_cookie()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cookie().data(), static_cast<int>(this->cookie().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.mixer.v1.config.client.APIKey.cookie");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cookie(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.mixer.v1.config.client.APIKey)
  return target;
}

size_t APIKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.mixer.v1.config.client.APIKey)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (key_case()) {
    // string query = 1;
    case kQuery: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->query());
      break;
    }
    // string header = 2;
    case kHeader: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->header());
      break;
    }
    // string cookie = 3;
    case kCookie: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cookie());
      break;
    }
    case KEY_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void APIKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.mixer.v1.config.client.APIKey)
  GOOGLE_DCHECK_NE(&from, this);
  const APIKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const APIKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.mixer.v1.config.client.APIKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.mixer.v1.config.client.APIKey)
    MergeFrom(*source);
  }
}

void APIKey::MergeFrom(const APIKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.mixer.v1.config.client.APIKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.key_case()) {
    case kQuery: {
      set_query(from.query());
      break;
    }
    case kHeader: {
      set_header(from.header());
      break;
    }
    case kCookie: {
      set_cookie(from.cookie());
      break;
    }
    case KEY_NOT_SET: {
      break;
    }
  }
}

void APIKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.mixer.v1.config.client.APIKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void APIKey::CopyFrom(const APIKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.mixer.v1.config.client.APIKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool APIKey::IsInitialized() const {
  return true;
}

void APIKey::Swap(APIKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void APIKey::InternalSwap(APIKey* other) {
  using std::swap;
  swap(key_, other->key_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata APIKey::GetMetadata() const {
  protobuf_mixer_2fv1_2fconfig_2fclient_2fapi_5fspec_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mixer_2fv1_2fconfig_2fclient_2fapi_5fspec_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HTTPAPISpecReference::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HTTPAPISpecReference::kNameFieldNumber;
const int HTTPAPISpecReference::kNamespaceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HTTPAPISpecReference::HTTPAPISpecReference()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_mixer_2fv1_2fconfig_2fclient_2fapi_5fspec_2eproto::InitDefaultsHTTPAPISpecReference();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.mixer.v1.config.client.HTTPAPISpecReference)
}
HTTPAPISpecReference::HTTPAPISpecReference(const HTTPAPISpecReference& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  namespace__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.namespace_().size() > 0) {
    namespace__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.namespace__);
  }
  // @@protoc_insertion_point(copy_constructor:istio.mixer.v1.config.client.HTTPAPISpecReference)
}

void HTTPAPISpecReference::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  namespace__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

HTTPAPISpecReference::~HTTPAPISpecReference() {
  // @@protoc_insertion_point(destructor:istio.mixer.v1.config.client.HTTPAPISpecReference)
  SharedDtor();
}

void HTTPAPISpecReference::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  namespace__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HTTPAPISpecReference::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HTTPAPISpecReference::descriptor() {
  ::protobuf_mixer_2fv1_2fconfig_2fclient_2fapi_5fspec_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mixer_2fv1_2fconfig_2fclient_2fapi_5fspec_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HTTPAPISpecReference& HTTPAPISpecReference::default_instance() {
  ::protobuf_mixer_2fv1_2fconfig_2fclient_2fapi_5fspec_2eproto::InitDefaultsHTTPAPISpecReference();
  return *internal_default_instance();
}

HTTPAPISpecReference* HTTPAPISpecReference::New(::google::protobuf::Arena* arena) const {
  HTTPAPISpecReference* n = new HTTPAPISpecReference;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HTTPAPISpecReference::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.mixer.v1.config.client.HTTPAPISpecReference)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  namespace__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool HTTPAPISpecReference::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.mixer.v1.config.client.HTTPAPISpecReference)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.mixer.v1.config.client.HTTPAPISpecReference.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string namespace = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_namespace_()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->namespace_().data(), static_cast<int>(this->namespace_().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.mixer.v1.config.client.HTTPAPISpecReference.namespace"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.mixer.v1.config.client.HTTPAPISpecReference)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.mixer.v1.config.client.HTTPAPISpecReference)
  return false;
#undef DO_
}

void HTTPAPISpecReference::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.mixer.v1.config.client.HTTPAPISpecReference)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.mixer.v1.config.client.HTTPAPISpecReference.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string namespace = 2;
  if (this->namespace_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->namespace_().data(), static_cast<int>(this->namespace_().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.mixer.v1.config.client.HTTPAPISpecReference.namespace");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->namespace_(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.mixer.v1.config.client.HTTPAPISpecReference)
}

::google::protobuf::uint8* HTTPAPISpecReference::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.mixer.v1.config.client.HTTPAPISpecReference)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.mixer.v1.config.client.HTTPAPISpecReference.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string namespace = 2;
  if (this->namespace_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->namespace_().data(), static_cast<int>(this->namespace_().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.mixer.v1.config.client.HTTPAPISpecReference.namespace");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->namespace_(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.mixer.v1.config.client.HTTPAPISpecReference)
  return target;
}

size_t HTTPAPISpecReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.mixer.v1.config.client.HTTPAPISpecReference)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string namespace = 2;
  if (this->namespace_().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->namespace_());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HTTPAPISpecReference::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.mixer.v1.config.client.HTTPAPISpecReference)
  GOOGLE_DCHECK_NE(&from, this);
  const HTTPAPISpecReference* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HTTPAPISpecReference>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.mixer.v1.config.client.HTTPAPISpecReference)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.mixer.v1.config.client.HTTPAPISpecReference)
    MergeFrom(*source);
  }
}

void HTTPAPISpecReference::MergeFrom(const HTTPAPISpecReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.mixer.v1.config.client.HTTPAPISpecReference)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.namespace_().size() > 0) {

    namespace__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.namespace__);
  }
}

void HTTPAPISpecReference::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.mixer.v1.config.client.HTTPAPISpecReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HTTPAPISpecReference::CopyFrom(const HTTPAPISpecReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.mixer.v1.config.client.HTTPAPISpecReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HTTPAPISpecReference::IsInitialized() const {
  return true;
}

void HTTPAPISpecReference::Swap(HTTPAPISpecReference* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HTTPAPISpecReference::InternalSwap(HTTPAPISpecReference* other) {
  using std::swap;
  name_.Swap(&other->name_);
  namespace__.Swap(&other->namespace__);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HTTPAPISpecReference::GetMetadata() const {
  protobuf_mixer_2fv1_2fconfig_2fclient_2fapi_5fspec_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mixer_2fv1_2fconfig_2fclient_2fapi_5fspec_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HTTPAPISpecBinding::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HTTPAPISpecBinding::kServicesFieldNumber;
const int HTTPAPISpecBinding::kApiSpecsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HTTPAPISpecBinding::HTTPAPISpecBinding()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_mixer_2fv1_2fconfig_2fclient_2fapi_5fspec_2eproto::InitDefaultsHTTPAPISpecBinding();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.mixer.v1.config.client.HTTPAPISpecBinding)
}
HTTPAPISpecBinding::HTTPAPISpecBinding(const HTTPAPISpecBinding& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      services_(from.services_),
      api_specs_(from.api_specs_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:istio.mixer.v1.config.client.HTTPAPISpecBinding)
}

void HTTPAPISpecBinding::SharedCtor() {
  _cached_size_ = 0;
}

HTTPAPISpecBinding::~HTTPAPISpecBinding() {
  // @@protoc_insertion_point(destructor:istio.mixer.v1.config.client.HTTPAPISpecBinding)
  SharedDtor();
}

void HTTPAPISpecBinding::SharedDtor() {
}

void HTTPAPISpecBinding::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HTTPAPISpecBinding::descriptor() {
  ::protobuf_mixer_2fv1_2fconfig_2fclient_2fapi_5fspec_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mixer_2fv1_2fconfig_2fclient_2fapi_5fspec_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HTTPAPISpecBinding& HTTPAPISpecBinding::default_instance() {
  ::protobuf_mixer_2fv1_2fconfig_2fclient_2fapi_5fspec_2eproto::InitDefaultsHTTPAPISpecBinding();
  return *internal_default_instance();
}

HTTPAPISpecBinding* HTTPAPISpecBinding::New(::google::protobuf::Arena* arena) const {
  HTTPAPISpecBinding* n = new HTTPAPISpecBinding;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HTTPAPISpecBinding::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.mixer.v1.config.client.HTTPAPISpecBinding)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  services_.Clear();
  api_specs_.Clear();
  _internal_metadata_.Clear();
}

bool HTTPAPISpecBinding::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.mixer.v1.config.client.HTTPAPISpecBinding)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .istio.mixer.v1.config.client.IstioService services = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_services()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .istio.mixer.v1.config.client.HTTPAPISpecReference api_specs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_api_specs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.mixer.v1.config.client.HTTPAPISpecBinding)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.mixer.v1.config.client.HTTPAPISpecBinding)
  return false;
#undef DO_
}

void HTTPAPISpecBinding::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.mixer.v1.config.client.HTTPAPISpecBinding)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .istio.mixer.v1.config.client.IstioService services = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->services_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->services(static_cast<int>(i)), output);
  }

  // repeated .istio.mixer.v1.config.client.HTTPAPISpecReference api_specs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->api_specs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->api_specs(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.mixer.v1.config.client.HTTPAPISpecBinding)
}

::google::protobuf::uint8* HTTPAPISpecBinding::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.mixer.v1.config.client.HTTPAPISpecBinding)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .istio.mixer.v1.config.client.IstioService services = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->services_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->services(static_cast<int>(i)), deterministic, target);
  }

  // repeated .istio.mixer.v1.config.client.HTTPAPISpecReference api_specs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->api_specs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->api_specs(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.mixer.v1.config.client.HTTPAPISpecBinding)
  return target;
}

size_t HTTPAPISpecBinding::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.mixer.v1.config.client.HTTPAPISpecBinding)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .istio.mixer.v1.config.client.IstioService services = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->services_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->services(static_cast<int>(i)));
    }
  }

  // repeated .istio.mixer.v1.config.client.HTTPAPISpecReference api_specs = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->api_specs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->api_specs(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HTTPAPISpecBinding::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.mixer.v1.config.client.HTTPAPISpecBinding)
  GOOGLE_DCHECK_NE(&from, this);
  const HTTPAPISpecBinding* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HTTPAPISpecBinding>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.mixer.v1.config.client.HTTPAPISpecBinding)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.mixer.v1.config.client.HTTPAPISpecBinding)
    MergeFrom(*source);
  }
}

void HTTPAPISpecBinding::MergeFrom(const HTTPAPISpecBinding& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.mixer.v1.config.client.HTTPAPISpecBinding)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  services_.MergeFrom(from.services_);
  api_specs_.MergeFrom(from.api_specs_);
}

void HTTPAPISpecBinding::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.mixer.v1.config.client.HTTPAPISpecBinding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HTTPAPISpecBinding::CopyFrom(const HTTPAPISpecBinding& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.mixer.v1.config.client.HTTPAPISpecBinding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HTTPAPISpecBinding::IsInitialized() const {
  return true;
}

void HTTPAPISpecBinding::Swap(HTTPAPISpecBinding* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HTTPAPISpecBinding::InternalSwap(HTTPAPISpecBinding* other) {
  using std::swap;
  services_.InternalSwap(&other->services_);
  api_specs_.InternalSwap(&other->api_specs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HTTPAPISpecBinding::GetMetadata() const {
  protobuf_mixer_2fv1_2fconfig_2fclient_2fapi_5fspec_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mixer_2fv1_2fconfig_2fclient_2fapi_5fspec_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace client
}  // namespace config
}  // namespace v1
}  // namespace mixer
}  // namespace istio

// @@protoc_insertion_point(global_scope)
