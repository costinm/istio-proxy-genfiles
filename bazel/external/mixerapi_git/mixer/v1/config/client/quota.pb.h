// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mixer/v1/config/client/quota.proto

#ifndef PROTOBUF_mixer_2fv1_2fconfig_2fclient_2fquota_2eproto__INCLUDED
#define PROTOBUF_mixer_2fv1_2fconfig_2fclient_2fquota_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "gogoproto/gogo.pb.h"
#include "mixer/v1/config/client/service.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_mixer_2fv1_2fconfig_2fclient_2fquota_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsQuotaSpecImpl();
void InitDefaultsQuotaSpec();
void InitDefaultsQuotaRuleImpl();
void InitDefaultsQuotaRule();
void InitDefaultsStringMatchImpl();
void InitDefaultsStringMatch();
void InitDefaultsAttributeMatch_ClauseEntry_DoNotUseImpl();
void InitDefaultsAttributeMatch_ClauseEntry_DoNotUse();
void InitDefaultsAttributeMatchImpl();
void InitDefaultsAttributeMatch();
void InitDefaultsQuotaImpl();
void InitDefaultsQuota();
void InitDefaultsQuotaSpecBinding_QuotaSpecReferenceImpl();
void InitDefaultsQuotaSpecBinding_QuotaSpecReference();
void InitDefaultsQuotaSpecBindingImpl();
void InitDefaultsQuotaSpecBinding();
inline void InitDefaults() {
  InitDefaultsQuotaSpec();
  InitDefaultsQuotaRule();
  InitDefaultsStringMatch();
  InitDefaultsAttributeMatch_ClauseEntry_DoNotUse();
  InitDefaultsAttributeMatch();
  InitDefaultsQuota();
  InitDefaultsQuotaSpecBinding_QuotaSpecReference();
  InitDefaultsQuotaSpecBinding();
}
}  // namespace protobuf_mixer_2fv1_2fconfig_2fclient_2fquota_2eproto
namespace istio {
namespace mixer {
namespace v1 {
namespace config {
namespace client {
class AttributeMatch;
class AttributeMatchDefaultTypeInternal;
extern AttributeMatchDefaultTypeInternal _AttributeMatch_default_instance_;
class AttributeMatch_ClauseEntry_DoNotUse;
class AttributeMatch_ClauseEntry_DoNotUseDefaultTypeInternal;
extern AttributeMatch_ClauseEntry_DoNotUseDefaultTypeInternal _AttributeMatch_ClauseEntry_DoNotUse_default_instance_;
class Quota;
class QuotaDefaultTypeInternal;
extern QuotaDefaultTypeInternal _Quota_default_instance_;
class QuotaRule;
class QuotaRuleDefaultTypeInternal;
extern QuotaRuleDefaultTypeInternal _QuotaRule_default_instance_;
class QuotaSpec;
class QuotaSpecDefaultTypeInternal;
extern QuotaSpecDefaultTypeInternal _QuotaSpec_default_instance_;
class QuotaSpecBinding;
class QuotaSpecBindingDefaultTypeInternal;
extern QuotaSpecBindingDefaultTypeInternal _QuotaSpecBinding_default_instance_;
class QuotaSpecBinding_QuotaSpecReference;
class QuotaSpecBinding_QuotaSpecReferenceDefaultTypeInternal;
extern QuotaSpecBinding_QuotaSpecReferenceDefaultTypeInternal _QuotaSpecBinding_QuotaSpecReference_default_instance_;
class StringMatch;
class StringMatchDefaultTypeInternal;
extern StringMatchDefaultTypeInternal _StringMatch_default_instance_;
}  // namespace client
}  // namespace config
}  // namespace v1
}  // namespace mixer
}  // namespace istio
namespace istio {
namespace mixer {
namespace v1 {
namespace config {
namespace client {

// ===================================================================

class QuotaSpec : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.mixer.v1.config.client.QuotaSpec) */ {
 public:
  QuotaSpec();
  virtual ~QuotaSpec();

  QuotaSpec(const QuotaSpec& from);

  inline QuotaSpec& operator=(const QuotaSpec& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QuotaSpec(QuotaSpec&& from) noexcept
    : QuotaSpec() {
    *this = ::std::move(from);
  }

  inline QuotaSpec& operator=(QuotaSpec&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuotaSpec& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuotaSpec* internal_default_instance() {
    return reinterpret_cast<const QuotaSpec*>(
               &_QuotaSpec_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(QuotaSpec* other);
  friend void swap(QuotaSpec& a, QuotaSpec& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QuotaSpec* New() const PROTOBUF_FINAL { return New(NULL); }

  QuotaSpec* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QuotaSpec& from);
  void MergeFrom(const QuotaSpec& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QuotaSpec* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .istio.mixer.v1.config.client.QuotaRule rules = 1;
  int rules_size() const;
  void clear_rules();
  static const int kRulesFieldNumber = 1;
  const ::istio::mixer::v1::config::client::QuotaRule& rules(int index) const;
  ::istio::mixer::v1::config::client::QuotaRule* mutable_rules(int index);
  ::istio::mixer::v1::config::client::QuotaRule* add_rules();
  ::google::protobuf::RepeatedPtrField< ::istio::mixer::v1::config::client::QuotaRule >*
      mutable_rules();
  const ::google::protobuf::RepeatedPtrField< ::istio::mixer::v1::config::client::QuotaRule >&
      rules() const;

  // @@protoc_insertion_point(class_scope:istio.mixer.v1.config.client.QuotaSpec)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::istio::mixer::v1::config::client::QuotaRule > rules_;
  mutable int _cached_size_;
  friend struct ::protobuf_mixer_2fv1_2fconfig_2fclient_2fquota_2eproto::TableStruct;
  friend void ::protobuf_mixer_2fv1_2fconfig_2fclient_2fquota_2eproto::InitDefaultsQuotaSpecImpl();
};
// -------------------------------------------------------------------

class QuotaRule : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.mixer.v1.config.client.QuotaRule) */ {
 public:
  QuotaRule();
  virtual ~QuotaRule();

  QuotaRule(const QuotaRule& from);

  inline QuotaRule& operator=(const QuotaRule& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QuotaRule(QuotaRule&& from) noexcept
    : QuotaRule() {
    *this = ::std::move(from);
  }

  inline QuotaRule& operator=(QuotaRule&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuotaRule& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuotaRule* internal_default_instance() {
    return reinterpret_cast<const QuotaRule*>(
               &_QuotaRule_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(QuotaRule* other);
  friend void swap(QuotaRule& a, QuotaRule& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QuotaRule* New() const PROTOBUF_FINAL { return New(NULL); }

  QuotaRule* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QuotaRule& from);
  void MergeFrom(const QuotaRule& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QuotaRule* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .istio.mixer.v1.config.client.AttributeMatch match = 1;
  int match_size() const;
  void clear_match();
  static const int kMatchFieldNumber = 1;
  const ::istio::mixer::v1::config::client::AttributeMatch& match(int index) const;
  ::istio::mixer::v1::config::client::AttributeMatch* mutable_match(int index);
  ::istio::mixer::v1::config::client::AttributeMatch* add_match();
  ::google::protobuf::RepeatedPtrField< ::istio::mixer::v1::config::client::AttributeMatch >*
      mutable_match();
  const ::google::protobuf::RepeatedPtrField< ::istio::mixer::v1::config::client::AttributeMatch >&
      match() const;

  // repeated .istio.mixer.v1.config.client.Quota quotas = 2;
  int quotas_size() const;
  void clear_quotas();
  static const int kQuotasFieldNumber = 2;
  const ::istio::mixer::v1::config::client::Quota& quotas(int index) const;
  ::istio::mixer::v1::config::client::Quota* mutable_quotas(int index);
  ::istio::mixer::v1::config::client::Quota* add_quotas();
  ::google::protobuf::RepeatedPtrField< ::istio::mixer::v1::config::client::Quota >*
      mutable_quotas();
  const ::google::protobuf::RepeatedPtrField< ::istio::mixer::v1::config::client::Quota >&
      quotas() const;

  // @@protoc_insertion_point(class_scope:istio.mixer.v1.config.client.QuotaRule)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::istio::mixer::v1::config::client::AttributeMatch > match_;
  ::google::protobuf::RepeatedPtrField< ::istio::mixer::v1::config::client::Quota > quotas_;
  mutable int _cached_size_;
  friend struct ::protobuf_mixer_2fv1_2fconfig_2fclient_2fquota_2eproto::TableStruct;
  friend void ::protobuf_mixer_2fv1_2fconfig_2fclient_2fquota_2eproto::InitDefaultsQuotaRuleImpl();
};
// -------------------------------------------------------------------

class StringMatch : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.mixer.v1.config.client.StringMatch) */ {
 public:
  StringMatch();
  virtual ~StringMatch();

  StringMatch(const StringMatch& from);

  inline StringMatch& operator=(const StringMatch& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StringMatch(StringMatch&& from) noexcept
    : StringMatch() {
    *this = ::std::move(from);
  }

  inline StringMatch& operator=(StringMatch&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StringMatch& default_instance();

  enum MatchTypeCase {
    kExact = 1,
    kPrefix = 2,
    kRegex = 3,
    MATCH_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StringMatch* internal_default_instance() {
    return reinterpret_cast<const StringMatch*>(
               &_StringMatch_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(StringMatch* other);
  friend void swap(StringMatch& a, StringMatch& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StringMatch* New() const PROTOBUF_FINAL { return New(NULL); }

  StringMatch* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StringMatch& from);
  void MergeFrom(const StringMatch& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StringMatch* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string exact = 1;
  private:
  bool has_exact() const;
  public:
  void clear_exact();
  static const int kExactFieldNumber = 1;
  const ::std::string& exact() const;
  void set_exact(const ::std::string& value);
  #if LANG_CXX11
  void set_exact(::std::string&& value);
  #endif
  void set_exact(const char* value);
  void set_exact(const char* value, size_t size);
  ::std::string* mutable_exact();
  ::std::string* release_exact();
  void set_allocated_exact(::std::string* exact);

  // string prefix = 2;
  private:
  bool has_prefix() const;
  public:
  void clear_prefix();
  static const int kPrefixFieldNumber = 2;
  const ::std::string& prefix() const;
  void set_prefix(const ::std::string& value);
  #if LANG_CXX11
  void set_prefix(::std::string&& value);
  #endif
  void set_prefix(const char* value);
  void set_prefix(const char* value, size_t size);
  ::std::string* mutable_prefix();
  ::std::string* release_prefix();
  void set_allocated_prefix(::std::string* prefix);

  // string regex = 3;
  private:
  bool has_regex() const;
  public:
  void clear_regex();
  static const int kRegexFieldNumber = 3;
  const ::std::string& regex() const;
  void set_regex(const ::std::string& value);
  #if LANG_CXX11
  void set_regex(::std::string&& value);
  #endif
  void set_regex(const char* value);
  void set_regex(const char* value, size_t size);
  ::std::string* mutable_regex();
  ::std::string* release_regex();
  void set_allocated_regex(::std::string* regex);

  MatchTypeCase match_type_case() const;
  // @@protoc_insertion_point(class_scope:istio.mixer.v1.config.client.StringMatch)
 private:
  void set_has_exact();
  void set_has_prefix();
  void set_has_regex();

  inline bool has_match_type() const;
  void clear_match_type();
  inline void clear_has_match_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union MatchTypeUnion {
    MatchTypeUnion() {}
    ::google::protobuf::internal::ArenaStringPtr exact_;
    ::google::protobuf::internal::ArenaStringPtr prefix_;
    ::google::protobuf::internal::ArenaStringPtr regex_;
  } match_type_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_mixer_2fv1_2fconfig_2fclient_2fquota_2eproto::TableStruct;
  friend void ::protobuf_mixer_2fv1_2fconfig_2fclient_2fquota_2eproto::InitDefaultsStringMatchImpl();
};
// -------------------------------------------------------------------

class AttributeMatch_ClauseEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<AttributeMatch_ClauseEntry_DoNotUse, 
    ::std::string, ::istio::mixer::v1::config::client::StringMatch,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<AttributeMatch_ClauseEntry_DoNotUse, 
    ::std::string, ::istio::mixer::v1::config::client::StringMatch,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  AttributeMatch_ClauseEntry_DoNotUse();
  AttributeMatch_ClauseEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const AttributeMatch_ClauseEntry_DoNotUse& other);
  static const AttributeMatch_ClauseEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AttributeMatch_ClauseEntry_DoNotUse*>(&_AttributeMatch_ClauseEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class AttributeMatch : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.mixer.v1.config.client.AttributeMatch) */ {
 public:
  AttributeMatch();
  virtual ~AttributeMatch();

  AttributeMatch(const AttributeMatch& from);

  inline AttributeMatch& operator=(const AttributeMatch& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AttributeMatch(AttributeMatch&& from) noexcept
    : AttributeMatch() {
    *this = ::std::move(from);
  }

  inline AttributeMatch& operator=(AttributeMatch&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AttributeMatch& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AttributeMatch* internal_default_instance() {
    return reinterpret_cast<const AttributeMatch*>(
               &_AttributeMatch_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(AttributeMatch* other);
  friend void swap(AttributeMatch& a, AttributeMatch& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AttributeMatch* New() const PROTOBUF_FINAL { return New(NULL); }

  AttributeMatch* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AttributeMatch& from);
  void MergeFrom(const AttributeMatch& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AttributeMatch* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .istio.mixer.v1.config.client.StringMatch> clause = 1;
  int clause_size() const;
  void clear_clause();
  static const int kClauseFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::istio::mixer::v1::config::client::StringMatch >&
      clause() const;
  ::google::protobuf::Map< ::std::string, ::istio::mixer::v1::config::client::StringMatch >*
      mutable_clause();

  // @@protoc_insertion_point(class_scope:istio.mixer.v1.config.client.AttributeMatch)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      AttributeMatch_ClauseEntry_DoNotUse,
      ::std::string, ::istio::mixer::v1::config::client::StringMatch,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > clause_;
  mutable int _cached_size_;
  friend struct ::protobuf_mixer_2fv1_2fconfig_2fclient_2fquota_2eproto::TableStruct;
  friend void ::protobuf_mixer_2fv1_2fconfig_2fclient_2fquota_2eproto::InitDefaultsAttributeMatchImpl();
};
// -------------------------------------------------------------------

class Quota : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.mixer.v1.config.client.Quota) */ {
 public:
  Quota();
  virtual ~Quota();

  Quota(const Quota& from);

  inline Quota& operator=(const Quota& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Quota(Quota&& from) noexcept
    : Quota() {
    *this = ::std::move(from);
  }

  inline Quota& operator=(Quota&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Quota& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Quota* internal_default_instance() {
    return reinterpret_cast<const Quota*>(
               &_Quota_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Quota* other);
  friend void swap(Quota& a, Quota& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Quota* New() const PROTOBUF_FINAL { return New(NULL); }

  Quota* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Quota& from);
  void MergeFrom(const Quota& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Quota* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string quota = 1;
  void clear_quota();
  static const int kQuotaFieldNumber = 1;
  const ::std::string& quota() const;
  void set_quota(const ::std::string& value);
  #if LANG_CXX11
  void set_quota(::std::string&& value);
  #endif
  void set_quota(const char* value);
  void set_quota(const char* value, size_t size);
  ::std::string* mutable_quota();
  ::std::string* release_quota();
  void set_allocated_quota(::std::string* quota);

  // int64 charge = 2;
  void clear_charge();
  static const int kChargeFieldNumber = 2;
  ::google::protobuf::int64 charge() const;
  void set_charge(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:istio.mixer.v1.config.client.Quota)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr quota_;
  ::google::protobuf::int64 charge_;
  mutable int _cached_size_;
  friend struct ::protobuf_mixer_2fv1_2fconfig_2fclient_2fquota_2eproto::TableStruct;
  friend void ::protobuf_mixer_2fv1_2fconfig_2fclient_2fquota_2eproto::InitDefaultsQuotaImpl();
};
// -------------------------------------------------------------------

class QuotaSpecBinding_QuotaSpecReference : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.mixer.v1.config.client.QuotaSpecBinding.QuotaSpecReference) */ {
 public:
  QuotaSpecBinding_QuotaSpecReference();
  virtual ~QuotaSpecBinding_QuotaSpecReference();

  QuotaSpecBinding_QuotaSpecReference(const QuotaSpecBinding_QuotaSpecReference& from);

  inline QuotaSpecBinding_QuotaSpecReference& operator=(const QuotaSpecBinding_QuotaSpecReference& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QuotaSpecBinding_QuotaSpecReference(QuotaSpecBinding_QuotaSpecReference&& from) noexcept
    : QuotaSpecBinding_QuotaSpecReference() {
    *this = ::std::move(from);
  }

  inline QuotaSpecBinding_QuotaSpecReference& operator=(QuotaSpecBinding_QuotaSpecReference&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuotaSpecBinding_QuotaSpecReference& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuotaSpecBinding_QuotaSpecReference* internal_default_instance() {
    return reinterpret_cast<const QuotaSpecBinding_QuotaSpecReference*>(
               &_QuotaSpecBinding_QuotaSpecReference_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(QuotaSpecBinding_QuotaSpecReference* other);
  friend void swap(QuotaSpecBinding_QuotaSpecReference& a, QuotaSpecBinding_QuotaSpecReference& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QuotaSpecBinding_QuotaSpecReference* New() const PROTOBUF_FINAL { return New(NULL); }

  QuotaSpecBinding_QuotaSpecReference* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QuotaSpecBinding_QuotaSpecReference& from);
  void MergeFrom(const QuotaSpecBinding_QuotaSpecReference& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QuotaSpecBinding_QuotaSpecReference* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string namespace = 2;
  void clear_namespace_();
  static const int kNamespaceFieldNumber = 2;
  const ::std::string& namespace_() const;
  void set_namespace_(const ::std::string& value);
  #if LANG_CXX11
  void set_namespace_(::std::string&& value);
  #endif
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  ::std::string* mutable_namespace_();
  ::std::string* release_namespace_();
  void set_allocated_namespace_(::std::string* namespace_);

  // @@protoc_insertion_point(class_scope:istio.mixer.v1.config.client.QuotaSpecBinding.QuotaSpecReference)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr namespace__;
  mutable int _cached_size_;
  friend struct ::protobuf_mixer_2fv1_2fconfig_2fclient_2fquota_2eproto::TableStruct;
  friend void ::protobuf_mixer_2fv1_2fconfig_2fclient_2fquota_2eproto::InitDefaultsQuotaSpecBinding_QuotaSpecReferenceImpl();
};
// -------------------------------------------------------------------

class QuotaSpecBinding : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.mixer.v1.config.client.QuotaSpecBinding) */ {
 public:
  QuotaSpecBinding();
  virtual ~QuotaSpecBinding();

  QuotaSpecBinding(const QuotaSpecBinding& from);

  inline QuotaSpecBinding& operator=(const QuotaSpecBinding& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QuotaSpecBinding(QuotaSpecBinding&& from) noexcept
    : QuotaSpecBinding() {
    *this = ::std::move(from);
  }

  inline QuotaSpecBinding& operator=(QuotaSpecBinding&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuotaSpecBinding& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuotaSpecBinding* internal_default_instance() {
    return reinterpret_cast<const QuotaSpecBinding*>(
               &_QuotaSpecBinding_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(QuotaSpecBinding* other);
  friend void swap(QuotaSpecBinding& a, QuotaSpecBinding& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QuotaSpecBinding* New() const PROTOBUF_FINAL { return New(NULL); }

  QuotaSpecBinding* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QuotaSpecBinding& from);
  void MergeFrom(const QuotaSpecBinding& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QuotaSpecBinding* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef QuotaSpecBinding_QuotaSpecReference QuotaSpecReference;

  // accessors -------------------------------------------------------

  // repeated .istio.mixer.v1.config.client.IstioService services = 1;
  int services_size() const;
  void clear_services();
  static const int kServicesFieldNumber = 1;
  const ::istio::mixer::v1::config::client::IstioService& services(int index) const;
  ::istio::mixer::v1::config::client::IstioService* mutable_services(int index);
  ::istio::mixer::v1::config::client::IstioService* add_services();
  ::google::protobuf::RepeatedPtrField< ::istio::mixer::v1::config::client::IstioService >*
      mutable_services();
  const ::google::protobuf::RepeatedPtrField< ::istio::mixer::v1::config::client::IstioService >&
      services() const;

  // repeated .istio.mixer.v1.config.client.QuotaSpecBinding.QuotaSpecReference quota_specs = 2;
  int quota_specs_size() const;
  void clear_quota_specs();
  static const int kQuotaSpecsFieldNumber = 2;
  const ::istio::mixer::v1::config::client::QuotaSpecBinding_QuotaSpecReference& quota_specs(int index) const;
  ::istio::mixer::v1::config::client::QuotaSpecBinding_QuotaSpecReference* mutable_quota_specs(int index);
  ::istio::mixer::v1::config::client::QuotaSpecBinding_QuotaSpecReference* add_quota_specs();
  ::google::protobuf::RepeatedPtrField< ::istio::mixer::v1::config::client::QuotaSpecBinding_QuotaSpecReference >*
      mutable_quota_specs();
  const ::google::protobuf::RepeatedPtrField< ::istio::mixer::v1::config::client::QuotaSpecBinding_QuotaSpecReference >&
      quota_specs() const;

  // @@protoc_insertion_point(class_scope:istio.mixer.v1.config.client.QuotaSpecBinding)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::istio::mixer::v1::config::client::IstioService > services_;
  ::google::protobuf::RepeatedPtrField< ::istio::mixer::v1::config::client::QuotaSpecBinding_QuotaSpecReference > quota_specs_;
  mutable int _cached_size_;
  friend struct ::protobuf_mixer_2fv1_2fconfig_2fclient_2fquota_2eproto::TableStruct;
  friend void ::protobuf_mixer_2fv1_2fconfig_2fclient_2fquota_2eproto::InitDefaultsQuotaSpecBindingImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// QuotaSpec

// repeated .istio.mixer.v1.config.client.QuotaRule rules = 1;
inline int QuotaSpec::rules_size() const {
  return rules_.size();
}
inline void QuotaSpec::clear_rules() {
  rules_.Clear();
}
inline const ::istio::mixer::v1::config::client::QuotaRule& QuotaSpec::rules(int index) const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.config.client.QuotaSpec.rules)
  return rules_.Get(index);
}
inline ::istio::mixer::v1::config::client::QuotaRule* QuotaSpec::mutable_rules(int index) {
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.config.client.QuotaSpec.rules)
  return rules_.Mutable(index);
}
inline ::istio::mixer::v1::config::client::QuotaRule* QuotaSpec::add_rules() {
  // @@protoc_insertion_point(field_add:istio.mixer.v1.config.client.QuotaSpec.rules)
  return rules_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::istio::mixer::v1::config::client::QuotaRule >*
QuotaSpec::mutable_rules() {
  // @@protoc_insertion_point(field_mutable_list:istio.mixer.v1.config.client.QuotaSpec.rules)
  return &rules_;
}
inline const ::google::protobuf::RepeatedPtrField< ::istio::mixer::v1::config::client::QuotaRule >&
QuotaSpec::rules() const {
  // @@protoc_insertion_point(field_list:istio.mixer.v1.config.client.QuotaSpec.rules)
  return rules_;
}

// -------------------------------------------------------------------

// QuotaRule

// repeated .istio.mixer.v1.config.client.AttributeMatch match = 1;
inline int QuotaRule::match_size() const {
  return match_.size();
}
inline void QuotaRule::clear_match() {
  match_.Clear();
}
inline const ::istio::mixer::v1::config::client::AttributeMatch& QuotaRule::match(int index) const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.config.client.QuotaRule.match)
  return match_.Get(index);
}
inline ::istio::mixer::v1::config::client::AttributeMatch* QuotaRule::mutable_match(int index) {
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.config.client.QuotaRule.match)
  return match_.Mutable(index);
}
inline ::istio::mixer::v1::config::client::AttributeMatch* QuotaRule::add_match() {
  // @@protoc_insertion_point(field_add:istio.mixer.v1.config.client.QuotaRule.match)
  return match_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::istio::mixer::v1::config::client::AttributeMatch >*
QuotaRule::mutable_match() {
  // @@protoc_insertion_point(field_mutable_list:istio.mixer.v1.config.client.QuotaRule.match)
  return &match_;
}
inline const ::google::protobuf::RepeatedPtrField< ::istio::mixer::v1::config::client::AttributeMatch >&
QuotaRule::match() const {
  // @@protoc_insertion_point(field_list:istio.mixer.v1.config.client.QuotaRule.match)
  return match_;
}

// repeated .istio.mixer.v1.config.client.Quota quotas = 2;
inline int QuotaRule::quotas_size() const {
  return quotas_.size();
}
inline void QuotaRule::clear_quotas() {
  quotas_.Clear();
}
inline const ::istio::mixer::v1::config::client::Quota& QuotaRule::quotas(int index) const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.config.client.QuotaRule.quotas)
  return quotas_.Get(index);
}
inline ::istio::mixer::v1::config::client::Quota* QuotaRule::mutable_quotas(int index) {
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.config.client.QuotaRule.quotas)
  return quotas_.Mutable(index);
}
inline ::istio::mixer::v1::config::client::Quota* QuotaRule::add_quotas() {
  // @@protoc_insertion_point(field_add:istio.mixer.v1.config.client.QuotaRule.quotas)
  return quotas_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::istio::mixer::v1::config::client::Quota >*
QuotaRule::mutable_quotas() {
  // @@protoc_insertion_point(field_mutable_list:istio.mixer.v1.config.client.QuotaRule.quotas)
  return &quotas_;
}
inline const ::google::protobuf::RepeatedPtrField< ::istio::mixer::v1::config::client::Quota >&
QuotaRule::quotas() const {
  // @@protoc_insertion_point(field_list:istio.mixer.v1.config.client.QuotaRule.quotas)
  return quotas_;
}

// -------------------------------------------------------------------

// StringMatch

// string exact = 1;
inline bool StringMatch::has_exact() const {
  return match_type_case() == kExact;
}
inline void StringMatch::set_has_exact() {
  _oneof_case_[0] = kExact;
}
inline void StringMatch::clear_exact() {
  if (has_exact()) {
    match_type_.exact_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_match_type();
  }
}
inline const ::std::string& StringMatch::exact() const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.config.client.StringMatch.exact)
  if (has_exact()) {
    return match_type_.exact_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void StringMatch::set_exact(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:istio.mixer.v1.config.client.StringMatch.exact)
  if (!has_exact()) {
    clear_match_type();
    set_has_exact();
    match_type_.exact_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  match_type_.exact_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.mixer.v1.config.client.StringMatch.exact)
}
#if LANG_CXX11
inline void StringMatch::set_exact(::std::string&& value) {
  // @@protoc_insertion_point(field_set:istio.mixer.v1.config.client.StringMatch.exact)
  if (!has_exact()) {
    clear_match_type();
    set_has_exact();
    match_type_.exact_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  match_type_.exact_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.mixer.v1.config.client.StringMatch.exact)
}
#endif
inline void StringMatch::set_exact(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_exact()) {
    clear_match_type();
    set_has_exact();
    match_type_.exact_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  match_type_.exact_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.mixer.v1.config.client.StringMatch.exact)
}
inline void StringMatch::set_exact(const char* value, size_t size) {
  if (!has_exact()) {
    clear_match_type();
    set_has_exact();
    match_type_.exact_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  match_type_.exact_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.mixer.v1.config.client.StringMatch.exact)
}
inline ::std::string* StringMatch::mutable_exact() {
  if (!has_exact()) {
    clear_match_type();
    set_has_exact();
    match_type_.exact_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.config.client.StringMatch.exact)
  return match_type_.exact_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StringMatch::release_exact() {
  // @@protoc_insertion_point(field_release:istio.mixer.v1.config.client.StringMatch.exact)
  if (has_exact()) {
    clear_has_match_type();
    return match_type_.exact_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void StringMatch::set_allocated_exact(::std::string* exact) {
  if (!has_exact()) {
    match_type_.exact_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_match_type();
  if (exact != NULL) {
    set_has_exact();
    match_type_.exact_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        exact);
  }
  // @@protoc_insertion_point(field_set_allocated:istio.mixer.v1.config.client.StringMatch.exact)
}

// string prefix = 2;
inline bool StringMatch::has_prefix() const {
  return match_type_case() == kPrefix;
}
inline void StringMatch::set_has_prefix() {
  _oneof_case_[0] = kPrefix;
}
inline void StringMatch::clear_prefix() {
  if (has_prefix()) {
    match_type_.prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_match_type();
  }
}
inline const ::std::string& StringMatch::prefix() const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.config.client.StringMatch.prefix)
  if (has_prefix()) {
    return match_type_.prefix_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void StringMatch::set_prefix(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:istio.mixer.v1.config.client.StringMatch.prefix)
  if (!has_prefix()) {
    clear_match_type();
    set_has_prefix();
    match_type_.prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  match_type_.prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.mixer.v1.config.client.StringMatch.prefix)
}
#if LANG_CXX11
inline void StringMatch::set_prefix(::std::string&& value) {
  // @@protoc_insertion_point(field_set:istio.mixer.v1.config.client.StringMatch.prefix)
  if (!has_prefix()) {
    clear_match_type();
    set_has_prefix();
    match_type_.prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  match_type_.prefix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.mixer.v1.config.client.StringMatch.prefix)
}
#endif
inline void StringMatch::set_prefix(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_prefix()) {
    clear_match_type();
    set_has_prefix();
    match_type_.prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  match_type_.prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.mixer.v1.config.client.StringMatch.prefix)
}
inline void StringMatch::set_prefix(const char* value, size_t size) {
  if (!has_prefix()) {
    clear_match_type();
    set_has_prefix();
    match_type_.prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  match_type_.prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.mixer.v1.config.client.StringMatch.prefix)
}
inline ::std::string* StringMatch::mutable_prefix() {
  if (!has_prefix()) {
    clear_match_type();
    set_has_prefix();
    match_type_.prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.config.client.StringMatch.prefix)
  return match_type_.prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StringMatch::release_prefix() {
  // @@protoc_insertion_point(field_release:istio.mixer.v1.config.client.StringMatch.prefix)
  if (has_prefix()) {
    clear_has_match_type();
    return match_type_.prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void StringMatch::set_allocated_prefix(::std::string* prefix) {
  if (!has_prefix()) {
    match_type_.prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_match_type();
  if (prefix != NULL) {
    set_has_prefix();
    match_type_.prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        prefix);
  }
  // @@protoc_insertion_point(field_set_allocated:istio.mixer.v1.config.client.StringMatch.prefix)
}

// string regex = 3;
inline bool StringMatch::has_regex() const {
  return match_type_case() == kRegex;
}
inline void StringMatch::set_has_regex() {
  _oneof_case_[0] = kRegex;
}
inline void StringMatch::clear_regex() {
  if (has_regex()) {
    match_type_.regex_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_match_type();
  }
}
inline const ::std::string& StringMatch::regex() const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.config.client.StringMatch.regex)
  if (has_regex()) {
    return match_type_.regex_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void StringMatch::set_regex(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:istio.mixer.v1.config.client.StringMatch.regex)
  if (!has_regex()) {
    clear_match_type();
    set_has_regex();
    match_type_.regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  match_type_.regex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.mixer.v1.config.client.StringMatch.regex)
}
#if LANG_CXX11
inline void StringMatch::set_regex(::std::string&& value) {
  // @@protoc_insertion_point(field_set:istio.mixer.v1.config.client.StringMatch.regex)
  if (!has_regex()) {
    clear_match_type();
    set_has_regex();
    match_type_.regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  match_type_.regex_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.mixer.v1.config.client.StringMatch.regex)
}
#endif
inline void StringMatch::set_regex(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_regex()) {
    clear_match_type();
    set_has_regex();
    match_type_.regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  match_type_.regex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.mixer.v1.config.client.StringMatch.regex)
}
inline void StringMatch::set_regex(const char* value, size_t size) {
  if (!has_regex()) {
    clear_match_type();
    set_has_regex();
    match_type_.regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  match_type_.regex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.mixer.v1.config.client.StringMatch.regex)
}
inline ::std::string* StringMatch::mutable_regex() {
  if (!has_regex()) {
    clear_match_type();
    set_has_regex();
    match_type_.regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.config.client.StringMatch.regex)
  return match_type_.regex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StringMatch::release_regex() {
  // @@protoc_insertion_point(field_release:istio.mixer.v1.config.client.StringMatch.regex)
  if (has_regex()) {
    clear_has_match_type();
    return match_type_.regex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void StringMatch::set_allocated_regex(::std::string* regex) {
  if (!has_regex()) {
    match_type_.regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_match_type();
  if (regex != NULL) {
    set_has_regex();
    match_type_.regex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        regex);
  }
  // @@protoc_insertion_point(field_set_allocated:istio.mixer.v1.config.client.StringMatch.regex)
}

inline bool StringMatch::has_match_type() const {
  return match_type_case() != MATCH_TYPE_NOT_SET;
}
inline void StringMatch::clear_has_match_type() {
  _oneof_case_[0] = MATCH_TYPE_NOT_SET;
}
inline StringMatch::MatchTypeCase StringMatch::match_type_case() const {
  return StringMatch::MatchTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AttributeMatch

// map<string, .istio.mixer.v1.config.client.StringMatch> clause = 1;
inline int AttributeMatch::clause_size() const {
  return clause_.size();
}
inline void AttributeMatch::clear_clause() {
  clause_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::istio::mixer::v1::config::client::StringMatch >&
AttributeMatch::clause() const {
  // @@protoc_insertion_point(field_map:istio.mixer.v1.config.client.AttributeMatch.clause)
  return clause_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::istio::mixer::v1::config::client::StringMatch >*
AttributeMatch::mutable_clause() {
  // @@protoc_insertion_point(field_mutable_map:istio.mixer.v1.config.client.AttributeMatch.clause)
  return clause_.MutableMap();
}

// -------------------------------------------------------------------

// Quota

// string quota = 1;
inline void Quota::clear_quota() {
  quota_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Quota::quota() const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.config.client.Quota.quota)
  return quota_.GetNoArena();
}
inline void Quota::set_quota(const ::std::string& value) {
  
  quota_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.mixer.v1.config.client.Quota.quota)
}
#if LANG_CXX11
inline void Quota::set_quota(::std::string&& value) {
  
  quota_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.mixer.v1.config.client.Quota.quota)
}
#endif
inline void Quota::set_quota(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  quota_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.mixer.v1.config.client.Quota.quota)
}
inline void Quota::set_quota(const char* value, size_t size) {
  
  quota_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.mixer.v1.config.client.Quota.quota)
}
inline ::std::string* Quota::mutable_quota() {
  
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.config.client.Quota.quota)
  return quota_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Quota::release_quota() {
  // @@protoc_insertion_point(field_release:istio.mixer.v1.config.client.Quota.quota)
  
  return quota_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Quota::set_allocated_quota(::std::string* quota) {
  if (quota != NULL) {
    
  } else {
    
  }
  quota_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), quota);
  // @@protoc_insertion_point(field_set_allocated:istio.mixer.v1.config.client.Quota.quota)
}

// int64 charge = 2;
inline void Quota::clear_charge() {
  charge_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Quota::charge() const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.config.client.Quota.charge)
  return charge_;
}
inline void Quota::set_charge(::google::protobuf::int64 value) {
  
  charge_ = value;
  // @@protoc_insertion_point(field_set:istio.mixer.v1.config.client.Quota.charge)
}

// -------------------------------------------------------------------

// QuotaSpecBinding_QuotaSpecReference

// string name = 1;
inline void QuotaSpecBinding_QuotaSpecReference::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QuotaSpecBinding_QuotaSpecReference::name() const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.config.client.QuotaSpecBinding.QuotaSpecReference.name)
  return name_.GetNoArena();
}
inline void QuotaSpecBinding_QuotaSpecReference::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.mixer.v1.config.client.QuotaSpecBinding.QuotaSpecReference.name)
}
#if LANG_CXX11
inline void QuotaSpecBinding_QuotaSpecReference::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.mixer.v1.config.client.QuotaSpecBinding.QuotaSpecReference.name)
}
#endif
inline void QuotaSpecBinding_QuotaSpecReference::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.mixer.v1.config.client.QuotaSpecBinding.QuotaSpecReference.name)
}
inline void QuotaSpecBinding_QuotaSpecReference::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.mixer.v1.config.client.QuotaSpecBinding.QuotaSpecReference.name)
}
inline ::std::string* QuotaSpecBinding_QuotaSpecReference::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.config.client.QuotaSpecBinding.QuotaSpecReference.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QuotaSpecBinding_QuotaSpecReference::release_name() {
  // @@protoc_insertion_point(field_release:istio.mixer.v1.config.client.QuotaSpecBinding.QuotaSpecReference.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QuotaSpecBinding_QuotaSpecReference::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:istio.mixer.v1.config.client.QuotaSpecBinding.QuotaSpecReference.name)
}

// string namespace = 2;
inline void QuotaSpecBinding_QuotaSpecReference::clear_namespace_() {
  namespace__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QuotaSpecBinding_QuotaSpecReference::namespace_() const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.config.client.QuotaSpecBinding.QuotaSpecReference.namespace)
  return namespace__.GetNoArena();
}
inline void QuotaSpecBinding_QuotaSpecReference::set_namespace_(const ::std::string& value) {
  
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.mixer.v1.config.client.QuotaSpecBinding.QuotaSpecReference.namespace)
}
#if LANG_CXX11
inline void QuotaSpecBinding_QuotaSpecReference::set_namespace_(::std::string&& value) {
  
  namespace__.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.mixer.v1.config.client.QuotaSpecBinding.QuotaSpecReference.namespace)
}
#endif
inline void QuotaSpecBinding_QuotaSpecReference::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.mixer.v1.config.client.QuotaSpecBinding.QuotaSpecReference.namespace)
}
inline void QuotaSpecBinding_QuotaSpecReference::set_namespace_(const char* value, size_t size) {
  
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.mixer.v1.config.client.QuotaSpecBinding.QuotaSpecReference.namespace)
}
inline ::std::string* QuotaSpecBinding_QuotaSpecReference::mutable_namespace_() {
  
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.config.client.QuotaSpecBinding.QuotaSpecReference.namespace)
  return namespace__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QuotaSpecBinding_QuotaSpecReference::release_namespace_() {
  // @@protoc_insertion_point(field_release:istio.mixer.v1.config.client.QuotaSpecBinding.QuotaSpecReference.namespace)
  
  return namespace__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QuotaSpecBinding_QuotaSpecReference::set_allocated_namespace_(::std::string* namespace_) {
  if (namespace_ != NULL) {
    
  } else {
    
  }
  namespace__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), namespace_);
  // @@protoc_insertion_point(field_set_allocated:istio.mixer.v1.config.client.QuotaSpecBinding.QuotaSpecReference.namespace)
}

// -------------------------------------------------------------------

// QuotaSpecBinding

// repeated .istio.mixer.v1.config.client.IstioService services = 1;
inline int QuotaSpecBinding::services_size() const {
  return services_.size();
}
inline void QuotaSpecBinding::clear_services() {
  services_.Clear();
}
inline const ::istio::mixer::v1::config::client::IstioService& QuotaSpecBinding::services(int index) const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.config.client.QuotaSpecBinding.services)
  return services_.Get(index);
}
inline ::istio::mixer::v1::config::client::IstioService* QuotaSpecBinding::mutable_services(int index) {
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.config.client.QuotaSpecBinding.services)
  return services_.Mutable(index);
}
inline ::istio::mixer::v1::config::client::IstioService* QuotaSpecBinding::add_services() {
  // @@protoc_insertion_point(field_add:istio.mixer.v1.config.client.QuotaSpecBinding.services)
  return services_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::istio::mixer::v1::config::client::IstioService >*
QuotaSpecBinding::mutable_services() {
  // @@protoc_insertion_point(field_mutable_list:istio.mixer.v1.config.client.QuotaSpecBinding.services)
  return &services_;
}
inline const ::google::protobuf::RepeatedPtrField< ::istio::mixer::v1::config::client::IstioService >&
QuotaSpecBinding::services() const {
  // @@protoc_insertion_point(field_list:istio.mixer.v1.config.client.QuotaSpecBinding.services)
  return services_;
}

// repeated .istio.mixer.v1.config.client.QuotaSpecBinding.QuotaSpecReference quota_specs = 2;
inline int QuotaSpecBinding::quota_specs_size() const {
  return quota_specs_.size();
}
inline void QuotaSpecBinding::clear_quota_specs() {
  quota_specs_.Clear();
}
inline const ::istio::mixer::v1::config::client::QuotaSpecBinding_QuotaSpecReference& QuotaSpecBinding::quota_specs(int index) const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.config.client.QuotaSpecBinding.quota_specs)
  return quota_specs_.Get(index);
}
inline ::istio::mixer::v1::config::client::QuotaSpecBinding_QuotaSpecReference* QuotaSpecBinding::mutable_quota_specs(int index) {
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.config.client.QuotaSpecBinding.quota_specs)
  return quota_specs_.Mutable(index);
}
inline ::istio::mixer::v1::config::client::QuotaSpecBinding_QuotaSpecReference* QuotaSpecBinding::add_quota_specs() {
  // @@protoc_insertion_point(field_add:istio.mixer.v1.config.client.QuotaSpecBinding.quota_specs)
  return quota_specs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::istio::mixer::v1::config::client::QuotaSpecBinding_QuotaSpecReference >*
QuotaSpecBinding::mutable_quota_specs() {
  // @@protoc_insertion_point(field_mutable_list:istio.mixer.v1.config.client.QuotaSpecBinding.quota_specs)
  return &quota_specs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::istio::mixer::v1::config::client::QuotaSpecBinding_QuotaSpecReference >&
QuotaSpecBinding::quota_specs() const {
  // @@protoc_insertion_point(field_list:istio.mixer.v1.config.client.QuotaSpecBinding.quota_specs)
  return quota_specs_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace client
}  // namespace config
}  // namespace v1
}  // namespace mixer
}  // namespace istio

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mixer_2fv1_2fconfig_2fclient_2fquota_2eproto__INCLUDED
