// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mixer/v1/config/client/client_config.proto

#ifndef PROTOBUF_mixer_2fv1_2fconfig_2fclient_2fclient_5fconfig_2eproto__INCLUDED
#define PROTOBUF_mixer_2fv1_2fconfig_2fclient_2fclient_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "gogoproto/gogo.pb.h"
#include "mixer/v1/attributes.pb.h"
#include "mixer/v1/config/client/api_spec.pb.h"
#include "mixer/v1/config/client/quota.pb.h"
#include "mixer/v1/config/client/auth.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_mixer_2fv1_2fconfig_2fclient_2fclient_5fconfig_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsServiceConfigImpl();
void InitDefaultsServiceConfig();
void InitDefaultsTransportConfigImpl();
void InitDefaultsTransportConfig();
void InitDefaultsHttpClientConfig_ServiceConfigsEntry_DoNotUseImpl();
void InitDefaultsHttpClientConfig_ServiceConfigsEntry_DoNotUse();
void InitDefaultsHttpClientConfigImpl();
void InitDefaultsHttpClientConfig();
void InitDefaultsTcpClientConfigImpl();
void InitDefaultsTcpClientConfig();
inline void InitDefaults() {
  InitDefaultsServiceConfig();
  InitDefaultsTransportConfig();
  InitDefaultsHttpClientConfig_ServiceConfigsEntry_DoNotUse();
  InitDefaultsHttpClientConfig();
  InitDefaultsTcpClientConfig();
}
}  // namespace protobuf_mixer_2fv1_2fconfig_2fclient_2fclient_5fconfig_2eproto
namespace istio {
namespace mixer {
namespace v1 {
namespace config {
namespace client {
class HttpClientConfig;
class HttpClientConfigDefaultTypeInternal;
extern HttpClientConfigDefaultTypeInternal _HttpClientConfig_default_instance_;
class HttpClientConfig_ServiceConfigsEntry_DoNotUse;
class HttpClientConfig_ServiceConfigsEntry_DoNotUseDefaultTypeInternal;
extern HttpClientConfig_ServiceConfigsEntry_DoNotUseDefaultTypeInternal _HttpClientConfig_ServiceConfigsEntry_DoNotUse_default_instance_;
class ServiceConfig;
class ServiceConfigDefaultTypeInternal;
extern ServiceConfigDefaultTypeInternal _ServiceConfig_default_instance_;
class TcpClientConfig;
class TcpClientConfigDefaultTypeInternal;
extern TcpClientConfigDefaultTypeInternal _TcpClientConfig_default_instance_;
class TransportConfig;
class TransportConfigDefaultTypeInternal;
extern TransportConfigDefaultTypeInternal _TransportConfig_default_instance_;
}  // namespace client
}  // namespace config
}  // namespace v1
}  // namespace mixer
}  // namespace istio
namespace istio {
namespace mixer {
namespace v1 {
namespace config {
namespace client {

enum TransportConfig_NetworkFailPolicy {
  TransportConfig_NetworkFailPolicy_FAIL_OPEN = 0,
  TransportConfig_NetworkFailPolicy_FAIL_CLOSE = 1,
  TransportConfig_NetworkFailPolicy_TransportConfig_NetworkFailPolicy_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TransportConfig_NetworkFailPolicy_TransportConfig_NetworkFailPolicy_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TransportConfig_NetworkFailPolicy_IsValid(int value);
const TransportConfig_NetworkFailPolicy TransportConfig_NetworkFailPolicy_NetworkFailPolicy_MIN = TransportConfig_NetworkFailPolicy_FAIL_OPEN;
const TransportConfig_NetworkFailPolicy TransportConfig_NetworkFailPolicy_NetworkFailPolicy_MAX = TransportConfig_NetworkFailPolicy_FAIL_CLOSE;
const int TransportConfig_NetworkFailPolicy_NetworkFailPolicy_ARRAYSIZE = TransportConfig_NetworkFailPolicy_NetworkFailPolicy_MAX + 1;

const ::google::protobuf::EnumDescriptor* TransportConfig_NetworkFailPolicy_descriptor();
inline const ::std::string& TransportConfig_NetworkFailPolicy_Name(TransportConfig_NetworkFailPolicy value) {
  return ::google::protobuf::internal::NameOfEnum(
    TransportConfig_NetworkFailPolicy_descriptor(), value);
}
inline bool TransportConfig_NetworkFailPolicy_Parse(
    const ::std::string& name, TransportConfig_NetworkFailPolicy* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TransportConfig_NetworkFailPolicy>(
    TransportConfig_NetworkFailPolicy_descriptor(), name, value);
}
// ===================================================================

class ServiceConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.mixer.v1.config.client.ServiceConfig) */ {
 public:
  ServiceConfig();
  virtual ~ServiceConfig();

  ServiceConfig(const ServiceConfig& from);

  inline ServiceConfig& operator=(const ServiceConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServiceConfig(ServiceConfig&& from) noexcept
    : ServiceConfig() {
    *this = ::std::move(from);
  }

  inline ServiceConfig& operator=(ServiceConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceConfig* internal_default_instance() {
    return reinterpret_cast<const ServiceConfig*>(
               &_ServiceConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ServiceConfig* other);
  friend void swap(ServiceConfig& a, ServiceConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServiceConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  ServiceConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ServiceConfig& from);
  void MergeFrom(const ServiceConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServiceConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .istio.mixer.v1.config.client.HTTPAPISpec http_api_spec = 4;
  int http_api_spec_size() const;
  void clear_http_api_spec();
  static const int kHttpApiSpecFieldNumber = 4;
  const ::istio::mixer::v1::config::client::HTTPAPISpec& http_api_spec(int index) const;
  ::istio::mixer::v1::config::client::HTTPAPISpec* mutable_http_api_spec(int index);
  ::istio::mixer::v1::config::client::HTTPAPISpec* add_http_api_spec();
  ::google::protobuf::RepeatedPtrField< ::istio::mixer::v1::config::client::HTTPAPISpec >*
      mutable_http_api_spec();
  const ::google::protobuf::RepeatedPtrField< ::istio::mixer::v1::config::client::HTTPAPISpec >&
      http_api_spec() const;

  // repeated .istio.mixer.v1.config.client.QuotaSpec quota_spec = 5;
  int quota_spec_size() const;
  void clear_quota_spec();
  static const int kQuotaSpecFieldNumber = 5;
  const ::istio::mixer::v1::config::client::QuotaSpec& quota_spec(int index) const;
  ::istio::mixer::v1::config::client::QuotaSpec* mutable_quota_spec(int index);
  ::istio::mixer::v1::config::client::QuotaSpec* add_quota_spec();
  ::google::protobuf::RepeatedPtrField< ::istio::mixer::v1::config::client::QuotaSpec >*
      mutable_quota_spec();
  const ::google::protobuf::RepeatedPtrField< ::istio::mixer::v1::config::client::QuotaSpec >&
      quota_spec() const;

  // .istio.mixer.v1.Attributes mixer_attributes = 3;
  bool has_mixer_attributes() const;
  void clear_mixer_attributes();
  static const int kMixerAttributesFieldNumber = 3;
  const ::istio::mixer::v1::Attributes& mixer_attributes() const;
  ::istio::mixer::v1::Attributes* mutable_mixer_attributes();
  ::istio::mixer::v1::Attributes* release_mixer_attributes();
  void set_allocated_mixer_attributes(::istio::mixer::v1::Attributes* mixer_attributes);

  // .istio.mixer.v1.config.client.EndUserAuthenticationPolicySpec end_user_authn_spec = 6;
  bool has_end_user_authn_spec() const;
  void clear_end_user_authn_spec();
  static const int kEndUserAuthnSpecFieldNumber = 6;
  const ::istio::mixer::v1::config::client::EndUserAuthenticationPolicySpec& end_user_authn_spec() const;
  ::istio::mixer::v1::config::client::EndUserAuthenticationPolicySpec* mutable_end_user_authn_spec();
  ::istio::mixer::v1::config::client::EndUserAuthenticationPolicySpec* release_end_user_authn_spec();
  void set_allocated_end_user_authn_spec(::istio::mixer::v1::config::client::EndUserAuthenticationPolicySpec* end_user_authn_spec);

  // bool disable_check_calls = 1;
  void clear_disable_check_calls();
  static const int kDisableCheckCallsFieldNumber = 1;
  bool disable_check_calls() const;
  void set_disable_check_calls(bool value);

  // bool disable_report_calls = 2;
  void clear_disable_report_calls();
  static const int kDisableReportCallsFieldNumber = 2;
  bool disable_report_calls() const;
  void set_disable_report_calls(bool value);

  // @@protoc_insertion_point(class_scope:istio.mixer.v1.config.client.ServiceConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::istio::mixer::v1::config::client::HTTPAPISpec > http_api_spec_;
  ::google::protobuf::RepeatedPtrField< ::istio::mixer::v1::config::client::QuotaSpec > quota_spec_;
  ::istio::mixer::v1::Attributes* mixer_attributes_;
  ::istio::mixer::v1::config::client::EndUserAuthenticationPolicySpec* end_user_authn_spec_;
  bool disable_check_calls_;
  bool disable_report_calls_;
  mutable int _cached_size_;
  friend struct ::protobuf_mixer_2fv1_2fconfig_2fclient_2fclient_5fconfig_2eproto::TableStruct;
  friend void ::protobuf_mixer_2fv1_2fconfig_2fclient_2fclient_5fconfig_2eproto::InitDefaultsServiceConfigImpl();
};
// -------------------------------------------------------------------

class TransportConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.mixer.v1.config.client.TransportConfig) */ {
 public:
  TransportConfig();
  virtual ~TransportConfig();

  TransportConfig(const TransportConfig& from);

  inline TransportConfig& operator=(const TransportConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransportConfig(TransportConfig&& from) noexcept
    : TransportConfig() {
    *this = ::std::move(from);
  }

  inline TransportConfig& operator=(TransportConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TransportConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransportConfig* internal_default_instance() {
    return reinterpret_cast<const TransportConfig*>(
               &_TransportConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(TransportConfig* other);
  friend void swap(TransportConfig& a, TransportConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransportConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  TransportConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TransportConfig& from);
  void MergeFrom(const TransportConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TransportConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef TransportConfig_NetworkFailPolicy NetworkFailPolicy;
  static const NetworkFailPolicy FAIL_OPEN =
    TransportConfig_NetworkFailPolicy_FAIL_OPEN;
  static const NetworkFailPolicy FAIL_CLOSE =
    TransportConfig_NetworkFailPolicy_FAIL_CLOSE;
  static inline bool NetworkFailPolicy_IsValid(int value) {
    return TransportConfig_NetworkFailPolicy_IsValid(value);
  }
  static const NetworkFailPolicy NetworkFailPolicy_MIN =
    TransportConfig_NetworkFailPolicy_NetworkFailPolicy_MIN;
  static const NetworkFailPolicy NetworkFailPolicy_MAX =
    TransportConfig_NetworkFailPolicy_NetworkFailPolicy_MAX;
  static const int NetworkFailPolicy_ARRAYSIZE =
    TransportConfig_NetworkFailPolicy_NetworkFailPolicy_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NetworkFailPolicy_descriptor() {
    return TransportConfig_NetworkFailPolicy_descriptor();
  }
  static inline const ::std::string& NetworkFailPolicy_Name(NetworkFailPolicy value) {
    return TransportConfig_NetworkFailPolicy_Name(value);
  }
  static inline bool NetworkFailPolicy_Parse(const ::std::string& name,
      NetworkFailPolicy* value) {
    return TransportConfig_NetworkFailPolicy_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bool disable_check_cache = 1;
  void clear_disable_check_cache();
  static const int kDisableCheckCacheFieldNumber = 1;
  bool disable_check_cache() const;
  void set_disable_check_cache(bool value);

  // bool disable_quota_cache = 2;
  void clear_disable_quota_cache();
  static const int kDisableQuotaCacheFieldNumber = 2;
  bool disable_quota_cache() const;
  void set_disable_quota_cache(bool value);

  // bool disable_report_batch = 3;
  void clear_disable_report_batch();
  static const int kDisableReportBatchFieldNumber = 3;
  bool disable_report_batch() const;
  void set_disable_report_batch(bool value);

  // .istio.mixer.v1.config.client.TransportConfig.NetworkFailPolicy network_fail_policy = 4;
  void clear_network_fail_policy();
  static const int kNetworkFailPolicyFieldNumber = 4;
  ::istio::mixer::v1::config::client::TransportConfig_NetworkFailPolicy network_fail_policy() const;
  void set_network_fail_policy(::istio::mixer::v1::config::client::TransportConfig_NetworkFailPolicy value);

  // @@protoc_insertion_point(class_scope:istio.mixer.v1.config.client.TransportConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool disable_check_cache_;
  bool disable_quota_cache_;
  bool disable_report_batch_;
  int network_fail_policy_;
  mutable int _cached_size_;
  friend struct ::protobuf_mixer_2fv1_2fconfig_2fclient_2fclient_5fconfig_2eproto::TableStruct;
  friend void ::protobuf_mixer_2fv1_2fconfig_2fclient_2fclient_5fconfig_2eproto::InitDefaultsTransportConfigImpl();
};
// -------------------------------------------------------------------

class HttpClientConfig_ServiceConfigsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<HttpClientConfig_ServiceConfigsEntry_DoNotUse, 
    ::std::string, ::istio::mixer::v1::config::client::ServiceConfig,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<HttpClientConfig_ServiceConfigsEntry_DoNotUse, 
    ::std::string, ::istio::mixer::v1::config::client::ServiceConfig,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  HttpClientConfig_ServiceConfigsEntry_DoNotUse();
  HttpClientConfig_ServiceConfigsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const HttpClientConfig_ServiceConfigsEntry_DoNotUse& other);
  static const HttpClientConfig_ServiceConfigsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const HttpClientConfig_ServiceConfigsEntry_DoNotUse*>(&_HttpClientConfig_ServiceConfigsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class HttpClientConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.mixer.v1.config.client.HttpClientConfig) */ {
 public:
  HttpClientConfig();
  virtual ~HttpClientConfig();

  HttpClientConfig(const HttpClientConfig& from);

  inline HttpClientConfig& operator=(const HttpClientConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HttpClientConfig(HttpClientConfig&& from) noexcept
    : HttpClientConfig() {
    *this = ::std::move(from);
  }

  inline HttpClientConfig& operator=(HttpClientConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HttpClientConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HttpClientConfig* internal_default_instance() {
    return reinterpret_cast<const HttpClientConfig*>(
               &_HttpClientConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(HttpClientConfig* other);
  friend void swap(HttpClientConfig& a, HttpClientConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HttpClientConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  HttpClientConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HttpClientConfig& from);
  void MergeFrom(const HttpClientConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HttpClientConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .istio.mixer.v1.config.client.ServiceConfig> service_configs = 2;
  int service_configs_size() const;
  void clear_service_configs();
  static const int kServiceConfigsFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::istio::mixer::v1::config::client::ServiceConfig >&
      service_configs() const;
  ::google::protobuf::Map< ::std::string, ::istio::mixer::v1::config::client::ServiceConfig >*
      mutable_service_configs();

  // string default_destination_service = 3;
  void clear_default_destination_service();
  static const int kDefaultDestinationServiceFieldNumber = 3;
  const ::std::string& default_destination_service() const;
  void set_default_destination_service(const ::std::string& value);
  #if LANG_CXX11
  void set_default_destination_service(::std::string&& value);
  #endif
  void set_default_destination_service(const char* value);
  void set_default_destination_service(const char* value, size_t size);
  ::std::string* mutable_default_destination_service();
  ::std::string* release_default_destination_service();
  void set_allocated_default_destination_service(::std::string* default_destination_service);

  // .istio.mixer.v1.config.client.TransportConfig transport = 1;
  bool has_transport() const;
  void clear_transport();
  static const int kTransportFieldNumber = 1;
  const ::istio::mixer::v1::config::client::TransportConfig& transport() const;
  ::istio::mixer::v1::config::client::TransportConfig* mutable_transport();
  ::istio::mixer::v1::config::client::TransportConfig* release_transport();
  void set_allocated_transport(::istio::mixer::v1::config::client::TransportConfig* transport);

  // .istio.mixer.v1.Attributes mixer_attributes = 4;
  bool has_mixer_attributes() const;
  void clear_mixer_attributes();
  static const int kMixerAttributesFieldNumber = 4;
  const ::istio::mixer::v1::Attributes& mixer_attributes() const;
  ::istio::mixer::v1::Attributes* mutable_mixer_attributes();
  ::istio::mixer::v1::Attributes* release_mixer_attributes();
  void set_allocated_mixer_attributes(::istio::mixer::v1::Attributes* mixer_attributes);

  // .istio.mixer.v1.Attributes forward_attributes = 5;
  bool has_forward_attributes() const;
  void clear_forward_attributes();
  static const int kForwardAttributesFieldNumber = 5;
  const ::istio::mixer::v1::Attributes& forward_attributes() const;
  ::istio::mixer::v1::Attributes* mutable_forward_attributes();
  ::istio::mixer::v1::Attributes* release_forward_attributes();
  void set_allocated_forward_attributes(::istio::mixer::v1::Attributes* forward_attributes);

  // @@protoc_insertion_point(class_scope:istio.mixer.v1.config.client.HttpClientConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      HttpClientConfig_ServiceConfigsEntry_DoNotUse,
      ::std::string, ::istio::mixer::v1::config::client::ServiceConfig,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > service_configs_;
  ::google::protobuf::internal::ArenaStringPtr default_destination_service_;
  ::istio::mixer::v1::config::client::TransportConfig* transport_;
  ::istio::mixer::v1::Attributes* mixer_attributes_;
  ::istio::mixer::v1::Attributes* forward_attributes_;
  mutable int _cached_size_;
  friend struct ::protobuf_mixer_2fv1_2fconfig_2fclient_2fclient_5fconfig_2eproto::TableStruct;
  friend void ::protobuf_mixer_2fv1_2fconfig_2fclient_2fclient_5fconfig_2eproto::InitDefaultsHttpClientConfigImpl();
};
// -------------------------------------------------------------------

class TcpClientConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.mixer.v1.config.client.TcpClientConfig) */ {
 public:
  TcpClientConfig();
  virtual ~TcpClientConfig();

  TcpClientConfig(const TcpClientConfig& from);

  inline TcpClientConfig& operator=(const TcpClientConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TcpClientConfig(TcpClientConfig&& from) noexcept
    : TcpClientConfig() {
    *this = ::std::move(from);
  }

  inline TcpClientConfig& operator=(TcpClientConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TcpClientConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TcpClientConfig* internal_default_instance() {
    return reinterpret_cast<const TcpClientConfig*>(
               &_TcpClientConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(TcpClientConfig* other);
  friend void swap(TcpClientConfig& a, TcpClientConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TcpClientConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  TcpClientConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TcpClientConfig& from);
  void MergeFrom(const TcpClientConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TcpClientConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .istio.mixer.v1.config.client.TransportConfig transport = 1;
  bool has_transport() const;
  void clear_transport();
  static const int kTransportFieldNumber = 1;
  const ::istio::mixer::v1::config::client::TransportConfig& transport() const;
  ::istio::mixer::v1::config::client::TransportConfig* mutable_transport();
  ::istio::mixer::v1::config::client::TransportConfig* release_transport();
  void set_allocated_transport(::istio::mixer::v1::config::client::TransportConfig* transport);

  // .istio.mixer.v1.Attributes mixer_attributes = 2;
  bool has_mixer_attributes() const;
  void clear_mixer_attributes();
  static const int kMixerAttributesFieldNumber = 2;
  const ::istio::mixer::v1::Attributes& mixer_attributes() const;
  ::istio::mixer::v1::Attributes* mutable_mixer_attributes();
  ::istio::mixer::v1::Attributes* release_mixer_attributes();
  void set_allocated_mixer_attributes(::istio::mixer::v1::Attributes* mixer_attributes);

  // .istio.mixer.v1.config.client.QuotaSpec connection_quota_spec = 5;
  bool has_connection_quota_spec() const;
  void clear_connection_quota_spec();
  static const int kConnectionQuotaSpecFieldNumber = 5;
  const ::istio::mixer::v1::config::client::QuotaSpec& connection_quota_spec() const;
  ::istio::mixer::v1::config::client::QuotaSpec* mutable_connection_quota_spec();
  ::istio::mixer::v1::config::client::QuotaSpec* release_connection_quota_spec();
  void set_allocated_connection_quota_spec(::istio::mixer::v1::config::client::QuotaSpec* connection_quota_spec);

  // bool disable_check_calls = 3;
  void clear_disable_check_calls();
  static const int kDisableCheckCallsFieldNumber = 3;
  bool disable_check_calls() const;
  void set_disable_check_calls(bool value);

  // bool disable_report_calls = 4;
  void clear_disable_report_calls();
  static const int kDisableReportCallsFieldNumber = 4;
  bool disable_report_calls() const;
  void set_disable_report_calls(bool value);

  // @@protoc_insertion_point(class_scope:istio.mixer.v1.config.client.TcpClientConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::istio::mixer::v1::config::client::TransportConfig* transport_;
  ::istio::mixer::v1::Attributes* mixer_attributes_;
  ::istio::mixer::v1::config::client::QuotaSpec* connection_quota_spec_;
  bool disable_check_calls_;
  bool disable_report_calls_;
  mutable int _cached_size_;
  friend struct ::protobuf_mixer_2fv1_2fconfig_2fclient_2fclient_5fconfig_2eproto::TableStruct;
  friend void ::protobuf_mixer_2fv1_2fconfig_2fclient_2fclient_5fconfig_2eproto::InitDefaultsTcpClientConfigImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServiceConfig

// bool disable_check_calls = 1;
inline void ServiceConfig::clear_disable_check_calls() {
  disable_check_calls_ = false;
}
inline bool ServiceConfig::disable_check_calls() const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.config.client.ServiceConfig.disable_check_calls)
  return disable_check_calls_;
}
inline void ServiceConfig::set_disable_check_calls(bool value) {
  
  disable_check_calls_ = value;
  // @@protoc_insertion_point(field_set:istio.mixer.v1.config.client.ServiceConfig.disable_check_calls)
}

// bool disable_report_calls = 2;
inline void ServiceConfig::clear_disable_report_calls() {
  disable_report_calls_ = false;
}
inline bool ServiceConfig::disable_report_calls() const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.config.client.ServiceConfig.disable_report_calls)
  return disable_report_calls_;
}
inline void ServiceConfig::set_disable_report_calls(bool value) {
  
  disable_report_calls_ = value;
  // @@protoc_insertion_point(field_set:istio.mixer.v1.config.client.ServiceConfig.disable_report_calls)
}

// .istio.mixer.v1.Attributes mixer_attributes = 3;
inline bool ServiceConfig::has_mixer_attributes() const {
  return this != internal_default_instance() && mixer_attributes_ != NULL;
}
inline void ServiceConfig::clear_mixer_attributes() {
  if (GetArenaNoVirtual() == NULL && mixer_attributes_ != NULL) delete mixer_attributes_;
  mixer_attributes_ = NULL;
}
inline const ::istio::mixer::v1::Attributes& ServiceConfig::mixer_attributes() const {
  const ::istio::mixer::v1::Attributes* p = mixer_attributes_;
  // @@protoc_insertion_point(field_get:istio.mixer.v1.config.client.ServiceConfig.mixer_attributes)
  return p != NULL ? *p : *reinterpret_cast<const ::istio::mixer::v1::Attributes*>(
      &::istio::mixer::v1::_Attributes_default_instance_);
}
inline ::istio::mixer::v1::Attributes* ServiceConfig::mutable_mixer_attributes() {
  
  if (mixer_attributes_ == NULL) {
    mixer_attributes_ = new ::istio::mixer::v1::Attributes;
  }
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.config.client.ServiceConfig.mixer_attributes)
  return mixer_attributes_;
}
inline ::istio::mixer::v1::Attributes* ServiceConfig::release_mixer_attributes() {
  // @@protoc_insertion_point(field_release:istio.mixer.v1.config.client.ServiceConfig.mixer_attributes)
  
  ::istio::mixer::v1::Attributes* temp = mixer_attributes_;
  mixer_attributes_ = NULL;
  return temp;
}
inline void ServiceConfig::set_allocated_mixer_attributes(::istio::mixer::v1::Attributes* mixer_attributes) {
  delete mixer_attributes_;
  mixer_attributes_ = mixer_attributes;
  if (mixer_attributes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:istio.mixer.v1.config.client.ServiceConfig.mixer_attributes)
}

// repeated .istio.mixer.v1.config.client.HTTPAPISpec http_api_spec = 4;
inline int ServiceConfig::http_api_spec_size() const {
  return http_api_spec_.size();
}
inline void ServiceConfig::clear_http_api_spec() {
  http_api_spec_.Clear();
}
inline const ::istio::mixer::v1::config::client::HTTPAPISpec& ServiceConfig::http_api_spec(int index) const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.config.client.ServiceConfig.http_api_spec)
  return http_api_spec_.Get(index);
}
inline ::istio::mixer::v1::config::client::HTTPAPISpec* ServiceConfig::mutable_http_api_spec(int index) {
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.config.client.ServiceConfig.http_api_spec)
  return http_api_spec_.Mutable(index);
}
inline ::istio::mixer::v1::config::client::HTTPAPISpec* ServiceConfig::add_http_api_spec() {
  // @@protoc_insertion_point(field_add:istio.mixer.v1.config.client.ServiceConfig.http_api_spec)
  return http_api_spec_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::istio::mixer::v1::config::client::HTTPAPISpec >*
ServiceConfig::mutable_http_api_spec() {
  // @@protoc_insertion_point(field_mutable_list:istio.mixer.v1.config.client.ServiceConfig.http_api_spec)
  return &http_api_spec_;
}
inline const ::google::protobuf::RepeatedPtrField< ::istio::mixer::v1::config::client::HTTPAPISpec >&
ServiceConfig::http_api_spec() const {
  // @@protoc_insertion_point(field_list:istio.mixer.v1.config.client.ServiceConfig.http_api_spec)
  return http_api_spec_;
}

// repeated .istio.mixer.v1.config.client.QuotaSpec quota_spec = 5;
inline int ServiceConfig::quota_spec_size() const {
  return quota_spec_.size();
}
inline void ServiceConfig::clear_quota_spec() {
  quota_spec_.Clear();
}
inline const ::istio::mixer::v1::config::client::QuotaSpec& ServiceConfig::quota_spec(int index) const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.config.client.ServiceConfig.quota_spec)
  return quota_spec_.Get(index);
}
inline ::istio::mixer::v1::config::client::QuotaSpec* ServiceConfig::mutable_quota_spec(int index) {
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.config.client.ServiceConfig.quota_spec)
  return quota_spec_.Mutable(index);
}
inline ::istio::mixer::v1::config::client::QuotaSpec* ServiceConfig::add_quota_spec() {
  // @@protoc_insertion_point(field_add:istio.mixer.v1.config.client.ServiceConfig.quota_spec)
  return quota_spec_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::istio::mixer::v1::config::client::QuotaSpec >*
ServiceConfig::mutable_quota_spec() {
  // @@protoc_insertion_point(field_mutable_list:istio.mixer.v1.config.client.ServiceConfig.quota_spec)
  return &quota_spec_;
}
inline const ::google::protobuf::RepeatedPtrField< ::istio::mixer::v1::config::client::QuotaSpec >&
ServiceConfig::quota_spec() const {
  // @@protoc_insertion_point(field_list:istio.mixer.v1.config.client.ServiceConfig.quota_spec)
  return quota_spec_;
}

// .istio.mixer.v1.config.client.EndUserAuthenticationPolicySpec end_user_authn_spec = 6;
inline bool ServiceConfig::has_end_user_authn_spec() const {
  return this != internal_default_instance() && end_user_authn_spec_ != NULL;
}
inline void ServiceConfig::clear_end_user_authn_spec() {
  if (GetArenaNoVirtual() == NULL && end_user_authn_spec_ != NULL) delete end_user_authn_spec_;
  end_user_authn_spec_ = NULL;
}
inline const ::istio::mixer::v1::config::client::EndUserAuthenticationPolicySpec& ServiceConfig::end_user_authn_spec() const {
  const ::istio::mixer::v1::config::client::EndUserAuthenticationPolicySpec* p = end_user_authn_spec_;
  // @@protoc_insertion_point(field_get:istio.mixer.v1.config.client.ServiceConfig.end_user_authn_spec)
  return p != NULL ? *p : *reinterpret_cast<const ::istio::mixer::v1::config::client::EndUserAuthenticationPolicySpec*>(
      &::istio::mixer::v1::config::client::_EndUserAuthenticationPolicySpec_default_instance_);
}
inline ::istio::mixer::v1::config::client::EndUserAuthenticationPolicySpec* ServiceConfig::mutable_end_user_authn_spec() {
  
  if (end_user_authn_spec_ == NULL) {
    end_user_authn_spec_ = new ::istio::mixer::v1::config::client::EndUserAuthenticationPolicySpec;
  }
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.config.client.ServiceConfig.end_user_authn_spec)
  return end_user_authn_spec_;
}
inline ::istio::mixer::v1::config::client::EndUserAuthenticationPolicySpec* ServiceConfig::release_end_user_authn_spec() {
  // @@protoc_insertion_point(field_release:istio.mixer.v1.config.client.ServiceConfig.end_user_authn_spec)
  
  ::istio::mixer::v1::config::client::EndUserAuthenticationPolicySpec* temp = end_user_authn_spec_;
  end_user_authn_spec_ = NULL;
  return temp;
}
inline void ServiceConfig::set_allocated_end_user_authn_spec(::istio::mixer::v1::config::client::EndUserAuthenticationPolicySpec* end_user_authn_spec) {
  delete end_user_authn_spec_;
  end_user_authn_spec_ = end_user_authn_spec;
  if (end_user_authn_spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:istio.mixer.v1.config.client.ServiceConfig.end_user_authn_spec)
}

// -------------------------------------------------------------------

// TransportConfig

// bool disable_check_cache = 1;
inline void TransportConfig::clear_disable_check_cache() {
  disable_check_cache_ = false;
}
inline bool TransportConfig::disable_check_cache() const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.config.client.TransportConfig.disable_check_cache)
  return disable_check_cache_;
}
inline void TransportConfig::set_disable_check_cache(bool value) {
  
  disable_check_cache_ = value;
  // @@protoc_insertion_point(field_set:istio.mixer.v1.config.client.TransportConfig.disable_check_cache)
}

// bool disable_quota_cache = 2;
inline void TransportConfig::clear_disable_quota_cache() {
  disable_quota_cache_ = false;
}
inline bool TransportConfig::disable_quota_cache() const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.config.client.TransportConfig.disable_quota_cache)
  return disable_quota_cache_;
}
inline void TransportConfig::set_disable_quota_cache(bool value) {
  
  disable_quota_cache_ = value;
  // @@protoc_insertion_point(field_set:istio.mixer.v1.config.client.TransportConfig.disable_quota_cache)
}

// bool disable_report_batch = 3;
inline void TransportConfig::clear_disable_report_batch() {
  disable_report_batch_ = false;
}
inline bool TransportConfig::disable_report_batch() const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.config.client.TransportConfig.disable_report_batch)
  return disable_report_batch_;
}
inline void TransportConfig::set_disable_report_batch(bool value) {
  
  disable_report_batch_ = value;
  // @@protoc_insertion_point(field_set:istio.mixer.v1.config.client.TransportConfig.disable_report_batch)
}

// .istio.mixer.v1.config.client.TransportConfig.NetworkFailPolicy network_fail_policy = 4;
inline void TransportConfig::clear_network_fail_policy() {
  network_fail_policy_ = 0;
}
inline ::istio::mixer::v1::config::client::TransportConfig_NetworkFailPolicy TransportConfig::network_fail_policy() const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.config.client.TransportConfig.network_fail_policy)
  return static_cast< ::istio::mixer::v1::config::client::TransportConfig_NetworkFailPolicy >(network_fail_policy_);
}
inline void TransportConfig::set_network_fail_policy(::istio::mixer::v1::config::client::TransportConfig_NetworkFailPolicy value) {
  
  network_fail_policy_ = value;
  // @@protoc_insertion_point(field_set:istio.mixer.v1.config.client.TransportConfig.network_fail_policy)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// HttpClientConfig

// .istio.mixer.v1.config.client.TransportConfig transport = 1;
inline bool HttpClientConfig::has_transport() const {
  return this != internal_default_instance() && transport_ != NULL;
}
inline void HttpClientConfig::clear_transport() {
  if (GetArenaNoVirtual() == NULL && transport_ != NULL) delete transport_;
  transport_ = NULL;
}
inline const ::istio::mixer::v1::config::client::TransportConfig& HttpClientConfig::transport() const {
  const ::istio::mixer::v1::config::client::TransportConfig* p = transport_;
  // @@protoc_insertion_point(field_get:istio.mixer.v1.config.client.HttpClientConfig.transport)
  return p != NULL ? *p : *reinterpret_cast<const ::istio::mixer::v1::config::client::TransportConfig*>(
      &::istio::mixer::v1::config::client::_TransportConfig_default_instance_);
}
inline ::istio::mixer::v1::config::client::TransportConfig* HttpClientConfig::mutable_transport() {
  
  if (transport_ == NULL) {
    transport_ = new ::istio::mixer::v1::config::client::TransportConfig;
  }
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.config.client.HttpClientConfig.transport)
  return transport_;
}
inline ::istio::mixer::v1::config::client::TransportConfig* HttpClientConfig::release_transport() {
  // @@protoc_insertion_point(field_release:istio.mixer.v1.config.client.HttpClientConfig.transport)
  
  ::istio::mixer::v1::config::client::TransportConfig* temp = transport_;
  transport_ = NULL;
  return temp;
}
inline void HttpClientConfig::set_allocated_transport(::istio::mixer::v1::config::client::TransportConfig* transport) {
  delete transport_;
  transport_ = transport;
  if (transport) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:istio.mixer.v1.config.client.HttpClientConfig.transport)
}

// map<string, .istio.mixer.v1.config.client.ServiceConfig> service_configs = 2;
inline int HttpClientConfig::service_configs_size() const {
  return service_configs_.size();
}
inline void HttpClientConfig::clear_service_configs() {
  service_configs_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::istio::mixer::v1::config::client::ServiceConfig >&
HttpClientConfig::service_configs() const {
  // @@protoc_insertion_point(field_map:istio.mixer.v1.config.client.HttpClientConfig.service_configs)
  return service_configs_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::istio::mixer::v1::config::client::ServiceConfig >*
HttpClientConfig::mutable_service_configs() {
  // @@protoc_insertion_point(field_mutable_map:istio.mixer.v1.config.client.HttpClientConfig.service_configs)
  return service_configs_.MutableMap();
}

// string default_destination_service = 3;
inline void HttpClientConfig::clear_default_destination_service() {
  default_destination_service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HttpClientConfig::default_destination_service() const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.config.client.HttpClientConfig.default_destination_service)
  return default_destination_service_.GetNoArena();
}
inline void HttpClientConfig::set_default_destination_service(const ::std::string& value) {
  
  default_destination_service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.mixer.v1.config.client.HttpClientConfig.default_destination_service)
}
#if LANG_CXX11
inline void HttpClientConfig::set_default_destination_service(::std::string&& value) {
  
  default_destination_service_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.mixer.v1.config.client.HttpClientConfig.default_destination_service)
}
#endif
inline void HttpClientConfig::set_default_destination_service(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  default_destination_service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.mixer.v1.config.client.HttpClientConfig.default_destination_service)
}
inline void HttpClientConfig::set_default_destination_service(const char* value, size_t size) {
  
  default_destination_service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.mixer.v1.config.client.HttpClientConfig.default_destination_service)
}
inline ::std::string* HttpClientConfig::mutable_default_destination_service() {
  
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.config.client.HttpClientConfig.default_destination_service)
  return default_destination_service_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HttpClientConfig::release_default_destination_service() {
  // @@protoc_insertion_point(field_release:istio.mixer.v1.config.client.HttpClientConfig.default_destination_service)
  
  return default_destination_service_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HttpClientConfig::set_allocated_default_destination_service(::std::string* default_destination_service) {
  if (default_destination_service != NULL) {
    
  } else {
    
  }
  default_destination_service_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), default_destination_service);
  // @@protoc_insertion_point(field_set_allocated:istio.mixer.v1.config.client.HttpClientConfig.default_destination_service)
}

// .istio.mixer.v1.Attributes mixer_attributes = 4;
inline bool HttpClientConfig::has_mixer_attributes() const {
  return this != internal_default_instance() && mixer_attributes_ != NULL;
}
inline void HttpClientConfig::clear_mixer_attributes() {
  if (GetArenaNoVirtual() == NULL && mixer_attributes_ != NULL) delete mixer_attributes_;
  mixer_attributes_ = NULL;
}
inline const ::istio::mixer::v1::Attributes& HttpClientConfig::mixer_attributes() const {
  const ::istio::mixer::v1::Attributes* p = mixer_attributes_;
  // @@protoc_insertion_point(field_get:istio.mixer.v1.config.client.HttpClientConfig.mixer_attributes)
  return p != NULL ? *p : *reinterpret_cast<const ::istio::mixer::v1::Attributes*>(
      &::istio::mixer::v1::_Attributes_default_instance_);
}
inline ::istio::mixer::v1::Attributes* HttpClientConfig::mutable_mixer_attributes() {
  
  if (mixer_attributes_ == NULL) {
    mixer_attributes_ = new ::istio::mixer::v1::Attributes;
  }
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.config.client.HttpClientConfig.mixer_attributes)
  return mixer_attributes_;
}
inline ::istio::mixer::v1::Attributes* HttpClientConfig::release_mixer_attributes() {
  // @@protoc_insertion_point(field_release:istio.mixer.v1.config.client.HttpClientConfig.mixer_attributes)
  
  ::istio::mixer::v1::Attributes* temp = mixer_attributes_;
  mixer_attributes_ = NULL;
  return temp;
}
inline void HttpClientConfig::set_allocated_mixer_attributes(::istio::mixer::v1::Attributes* mixer_attributes) {
  delete mixer_attributes_;
  mixer_attributes_ = mixer_attributes;
  if (mixer_attributes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:istio.mixer.v1.config.client.HttpClientConfig.mixer_attributes)
}

// .istio.mixer.v1.Attributes forward_attributes = 5;
inline bool HttpClientConfig::has_forward_attributes() const {
  return this != internal_default_instance() && forward_attributes_ != NULL;
}
inline void HttpClientConfig::clear_forward_attributes() {
  if (GetArenaNoVirtual() == NULL && forward_attributes_ != NULL) delete forward_attributes_;
  forward_attributes_ = NULL;
}
inline const ::istio::mixer::v1::Attributes& HttpClientConfig::forward_attributes() const {
  const ::istio::mixer::v1::Attributes* p = forward_attributes_;
  // @@protoc_insertion_point(field_get:istio.mixer.v1.config.client.HttpClientConfig.forward_attributes)
  return p != NULL ? *p : *reinterpret_cast<const ::istio::mixer::v1::Attributes*>(
      &::istio::mixer::v1::_Attributes_default_instance_);
}
inline ::istio::mixer::v1::Attributes* HttpClientConfig::mutable_forward_attributes() {
  
  if (forward_attributes_ == NULL) {
    forward_attributes_ = new ::istio::mixer::v1::Attributes;
  }
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.config.client.HttpClientConfig.forward_attributes)
  return forward_attributes_;
}
inline ::istio::mixer::v1::Attributes* HttpClientConfig::release_forward_attributes() {
  // @@protoc_insertion_point(field_release:istio.mixer.v1.config.client.HttpClientConfig.forward_attributes)
  
  ::istio::mixer::v1::Attributes* temp = forward_attributes_;
  forward_attributes_ = NULL;
  return temp;
}
inline void HttpClientConfig::set_allocated_forward_attributes(::istio::mixer::v1::Attributes* forward_attributes) {
  delete forward_attributes_;
  forward_attributes_ = forward_attributes;
  if (forward_attributes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:istio.mixer.v1.config.client.HttpClientConfig.forward_attributes)
}

// -------------------------------------------------------------------

// TcpClientConfig

// .istio.mixer.v1.config.client.TransportConfig transport = 1;
inline bool TcpClientConfig::has_transport() const {
  return this != internal_default_instance() && transport_ != NULL;
}
inline void TcpClientConfig::clear_transport() {
  if (GetArenaNoVirtual() == NULL && transport_ != NULL) delete transport_;
  transport_ = NULL;
}
inline const ::istio::mixer::v1::config::client::TransportConfig& TcpClientConfig::transport() const {
  const ::istio::mixer::v1::config::client::TransportConfig* p = transport_;
  // @@protoc_insertion_point(field_get:istio.mixer.v1.config.client.TcpClientConfig.transport)
  return p != NULL ? *p : *reinterpret_cast<const ::istio::mixer::v1::config::client::TransportConfig*>(
      &::istio::mixer::v1::config::client::_TransportConfig_default_instance_);
}
inline ::istio::mixer::v1::config::client::TransportConfig* TcpClientConfig::mutable_transport() {
  
  if (transport_ == NULL) {
    transport_ = new ::istio::mixer::v1::config::client::TransportConfig;
  }
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.config.client.TcpClientConfig.transport)
  return transport_;
}
inline ::istio::mixer::v1::config::client::TransportConfig* TcpClientConfig::release_transport() {
  // @@protoc_insertion_point(field_release:istio.mixer.v1.config.client.TcpClientConfig.transport)
  
  ::istio::mixer::v1::config::client::TransportConfig* temp = transport_;
  transport_ = NULL;
  return temp;
}
inline void TcpClientConfig::set_allocated_transport(::istio::mixer::v1::config::client::TransportConfig* transport) {
  delete transport_;
  transport_ = transport;
  if (transport) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:istio.mixer.v1.config.client.TcpClientConfig.transport)
}

// .istio.mixer.v1.Attributes mixer_attributes = 2;
inline bool TcpClientConfig::has_mixer_attributes() const {
  return this != internal_default_instance() && mixer_attributes_ != NULL;
}
inline void TcpClientConfig::clear_mixer_attributes() {
  if (GetArenaNoVirtual() == NULL && mixer_attributes_ != NULL) delete mixer_attributes_;
  mixer_attributes_ = NULL;
}
inline const ::istio::mixer::v1::Attributes& TcpClientConfig::mixer_attributes() const {
  const ::istio::mixer::v1::Attributes* p = mixer_attributes_;
  // @@protoc_insertion_point(field_get:istio.mixer.v1.config.client.TcpClientConfig.mixer_attributes)
  return p != NULL ? *p : *reinterpret_cast<const ::istio::mixer::v1::Attributes*>(
      &::istio::mixer::v1::_Attributes_default_instance_);
}
inline ::istio::mixer::v1::Attributes* TcpClientConfig::mutable_mixer_attributes() {
  
  if (mixer_attributes_ == NULL) {
    mixer_attributes_ = new ::istio::mixer::v1::Attributes;
  }
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.config.client.TcpClientConfig.mixer_attributes)
  return mixer_attributes_;
}
inline ::istio::mixer::v1::Attributes* TcpClientConfig::release_mixer_attributes() {
  // @@protoc_insertion_point(field_release:istio.mixer.v1.config.client.TcpClientConfig.mixer_attributes)
  
  ::istio::mixer::v1::Attributes* temp = mixer_attributes_;
  mixer_attributes_ = NULL;
  return temp;
}
inline void TcpClientConfig::set_allocated_mixer_attributes(::istio::mixer::v1::Attributes* mixer_attributes) {
  delete mixer_attributes_;
  mixer_attributes_ = mixer_attributes;
  if (mixer_attributes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:istio.mixer.v1.config.client.TcpClientConfig.mixer_attributes)
}

// bool disable_check_calls = 3;
inline void TcpClientConfig::clear_disable_check_calls() {
  disable_check_calls_ = false;
}
inline bool TcpClientConfig::disable_check_calls() const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.config.client.TcpClientConfig.disable_check_calls)
  return disable_check_calls_;
}
inline void TcpClientConfig::set_disable_check_calls(bool value) {
  
  disable_check_calls_ = value;
  // @@protoc_insertion_point(field_set:istio.mixer.v1.config.client.TcpClientConfig.disable_check_calls)
}

// bool disable_report_calls = 4;
inline void TcpClientConfig::clear_disable_report_calls() {
  disable_report_calls_ = false;
}
inline bool TcpClientConfig::disable_report_calls() const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.config.client.TcpClientConfig.disable_report_calls)
  return disable_report_calls_;
}
inline void TcpClientConfig::set_disable_report_calls(bool value) {
  
  disable_report_calls_ = value;
  // @@protoc_insertion_point(field_set:istio.mixer.v1.config.client.TcpClientConfig.disable_report_calls)
}

// .istio.mixer.v1.config.client.QuotaSpec connection_quota_spec = 5;
inline bool TcpClientConfig::has_connection_quota_spec() const {
  return this != internal_default_instance() && connection_quota_spec_ != NULL;
}
inline void TcpClientConfig::clear_connection_quota_spec() {
  if (GetArenaNoVirtual() == NULL && connection_quota_spec_ != NULL) delete connection_quota_spec_;
  connection_quota_spec_ = NULL;
}
inline const ::istio::mixer::v1::config::client::QuotaSpec& TcpClientConfig::connection_quota_spec() const {
  const ::istio::mixer::v1::config::client::QuotaSpec* p = connection_quota_spec_;
  // @@protoc_insertion_point(field_get:istio.mixer.v1.config.client.TcpClientConfig.connection_quota_spec)
  return p != NULL ? *p : *reinterpret_cast<const ::istio::mixer::v1::config::client::QuotaSpec*>(
      &::istio::mixer::v1::config::client::_QuotaSpec_default_instance_);
}
inline ::istio::mixer::v1::config::client::QuotaSpec* TcpClientConfig::mutable_connection_quota_spec() {
  
  if (connection_quota_spec_ == NULL) {
    connection_quota_spec_ = new ::istio::mixer::v1::config::client::QuotaSpec;
  }
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.config.client.TcpClientConfig.connection_quota_spec)
  return connection_quota_spec_;
}
inline ::istio::mixer::v1::config::client::QuotaSpec* TcpClientConfig::release_connection_quota_spec() {
  // @@protoc_insertion_point(field_release:istio.mixer.v1.config.client.TcpClientConfig.connection_quota_spec)
  
  ::istio::mixer::v1::config::client::QuotaSpec* temp = connection_quota_spec_;
  connection_quota_spec_ = NULL;
  return temp;
}
inline void TcpClientConfig::set_allocated_connection_quota_spec(::istio::mixer::v1::config::client::QuotaSpec* connection_quota_spec) {
  delete connection_quota_spec_;
  connection_quota_spec_ = connection_quota_spec;
  if (connection_quota_spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:istio.mixer.v1.config.client.TcpClientConfig.connection_quota_spec)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace client
}  // namespace config
}  // namespace v1
}  // namespace mixer
}  // namespace istio

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::istio::mixer::v1::config::client::TransportConfig_NetworkFailPolicy> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::istio::mixer::v1::config::client::TransportConfig_NetworkFailPolicy>() {
  return ::istio::mixer::v1::config::client::TransportConfig_NetworkFailPolicy_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mixer_2fv1_2fconfig_2fclient_2fclient_5fconfig_2eproto__INCLUDED
