// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mixer/v1/config/client/service.proto

#ifndef PROTOBUF_mixer_2fv1_2fconfig_2fclient_2fservice_2eproto__INCLUDED
#define PROTOBUF_mixer_2fv1_2fconfig_2fclient_2fservice_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "gogoproto/gogo.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_mixer_2fv1_2fconfig_2fclient_2fservice_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsIstioService_LabelsEntry_DoNotUseImpl();
void InitDefaultsIstioService_LabelsEntry_DoNotUse();
void InitDefaultsIstioServiceImpl();
void InitDefaultsIstioService();
inline void InitDefaults() {
  InitDefaultsIstioService_LabelsEntry_DoNotUse();
  InitDefaultsIstioService();
}
}  // namespace protobuf_mixer_2fv1_2fconfig_2fclient_2fservice_2eproto
namespace istio {
namespace mixer {
namespace v1 {
namespace config {
namespace client {
class IstioService;
class IstioServiceDefaultTypeInternal;
extern IstioServiceDefaultTypeInternal _IstioService_default_instance_;
class IstioService_LabelsEntry_DoNotUse;
class IstioService_LabelsEntry_DoNotUseDefaultTypeInternal;
extern IstioService_LabelsEntry_DoNotUseDefaultTypeInternal _IstioService_LabelsEntry_DoNotUse_default_instance_;
}  // namespace client
}  // namespace config
}  // namespace v1
}  // namespace mixer
}  // namespace istio
namespace istio {
namespace mixer {
namespace v1 {
namespace config {
namespace client {

// ===================================================================

class IstioService_LabelsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<IstioService_LabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<IstioService_LabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  IstioService_LabelsEntry_DoNotUse();
  IstioService_LabelsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const IstioService_LabelsEntry_DoNotUse& other);
  static const IstioService_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const IstioService_LabelsEntry_DoNotUse*>(&_IstioService_LabelsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class IstioService : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.mixer.v1.config.client.IstioService) */ {
 public:
  IstioService();
  virtual ~IstioService();

  IstioService(const IstioService& from);

  inline IstioService& operator=(const IstioService& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IstioService(IstioService&& from) noexcept
    : IstioService() {
    *this = ::std::move(from);
  }

  inline IstioService& operator=(IstioService&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IstioService& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IstioService* internal_default_instance() {
    return reinterpret_cast<const IstioService*>(
               &_IstioService_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(IstioService* other);
  friend void swap(IstioService& a, IstioService& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IstioService* New() const PROTOBUF_FINAL { return New(NULL); }

  IstioService* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IstioService& from);
  void MergeFrom(const IstioService& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IstioService* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> labels = 5;
  int labels_size() const;
  void clear_labels();
  static const int kLabelsFieldNumber = 5;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      labels() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_labels();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string namespace = 2;
  void clear_namespace_();
  static const int kNamespaceFieldNumber = 2;
  const ::std::string& namespace_() const;
  void set_namespace_(const ::std::string& value);
  #if LANG_CXX11
  void set_namespace_(::std::string&& value);
  #endif
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  ::std::string* mutable_namespace_();
  ::std::string* release_namespace_();
  void set_allocated_namespace_(::std::string* namespace_);

  // string domain = 3;
  void clear_domain();
  static const int kDomainFieldNumber = 3;
  const ::std::string& domain() const;
  void set_domain(const ::std::string& value);
  #if LANG_CXX11
  void set_domain(::std::string&& value);
  #endif
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  ::std::string* mutable_domain();
  ::std::string* release_domain();
  void set_allocated_domain(::std::string* domain);

  // string service = 4;
  void clear_service();
  static const int kServiceFieldNumber = 4;
  const ::std::string& service() const;
  void set_service(const ::std::string& value);
  #if LANG_CXX11
  void set_service(::std::string&& value);
  #endif
  void set_service(const char* value);
  void set_service(const char* value, size_t size);
  ::std::string* mutable_service();
  ::std::string* release_service();
  void set_allocated_service(::std::string* service);

  // @@protoc_insertion_point(class_scope:istio.mixer.v1.config.client.IstioService)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      IstioService_LabelsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > labels_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr namespace__;
  ::google::protobuf::internal::ArenaStringPtr domain_;
  ::google::protobuf::internal::ArenaStringPtr service_;
  mutable int _cached_size_;
  friend struct ::protobuf_mixer_2fv1_2fconfig_2fclient_2fservice_2eproto::TableStruct;
  friend void ::protobuf_mixer_2fv1_2fconfig_2fclient_2fservice_2eproto::InitDefaultsIstioServiceImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// IstioService

// string name = 1;
inline void IstioService::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IstioService::name() const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.config.client.IstioService.name)
  return name_.GetNoArena();
}
inline void IstioService::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.mixer.v1.config.client.IstioService.name)
}
#if LANG_CXX11
inline void IstioService::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.mixer.v1.config.client.IstioService.name)
}
#endif
inline void IstioService::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.mixer.v1.config.client.IstioService.name)
}
inline void IstioService::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.mixer.v1.config.client.IstioService.name)
}
inline ::std::string* IstioService::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.config.client.IstioService.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IstioService::release_name() {
  // @@protoc_insertion_point(field_release:istio.mixer.v1.config.client.IstioService.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IstioService::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:istio.mixer.v1.config.client.IstioService.name)
}

// string namespace = 2;
inline void IstioService::clear_namespace_() {
  namespace__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IstioService::namespace_() const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.config.client.IstioService.namespace)
  return namespace__.GetNoArena();
}
inline void IstioService::set_namespace_(const ::std::string& value) {
  
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.mixer.v1.config.client.IstioService.namespace)
}
#if LANG_CXX11
inline void IstioService::set_namespace_(::std::string&& value) {
  
  namespace__.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.mixer.v1.config.client.IstioService.namespace)
}
#endif
inline void IstioService::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.mixer.v1.config.client.IstioService.namespace)
}
inline void IstioService::set_namespace_(const char* value, size_t size) {
  
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.mixer.v1.config.client.IstioService.namespace)
}
inline ::std::string* IstioService::mutable_namespace_() {
  
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.config.client.IstioService.namespace)
  return namespace__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IstioService::release_namespace_() {
  // @@protoc_insertion_point(field_release:istio.mixer.v1.config.client.IstioService.namespace)
  
  return namespace__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IstioService::set_allocated_namespace_(::std::string* namespace_) {
  if (namespace_ != NULL) {
    
  } else {
    
  }
  namespace__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), namespace_);
  // @@protoc_insertion_point(field_set_allocated:istio.mixer.v1.config.client.IstioService.namespace)
}

// string domain = 3;
inline void IstioService::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IstioService::domain() const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.config.client.IstioService.domain)
  return domain_.GetNoArena();
}
inline void IstioService::set_domain(const ::std::string& value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.mixer.v1.config.client.IstioService.domain)
}
#if LANG_CXX11
inline void IstioService::set_domain(::std::string&& value) {
  
  domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.mixer.v1.config.client.IstioService.domain)
}
#endif
inline void IstioService::set_domain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.mixer.v1.config.client.IstioService.domain)
}
inline void IstioService::set_domain(const char* value, size_t size) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.mixer.v1.config.client.IstioService.domain)
}
inline ::std::string* IstioService::mutable_domain() {
  
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.config.client.IstioService.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IstioService::release_domain() {
  // @@protoc_insertion_point(field_release:istio.mixer.v1.config.client.IstioService.domain)
  
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IstioService::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    
  } else {
    
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:istio.mixer.v1.config.client.IstioService.domain)
}

// string service = 4;
inline void IstioService::clear_service() {
  service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IstioService::service() const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.config.client.IstioService.service)
  return service_.GetNoArena();
}
inline void IstioService::set_service(const ::std::string& value) {
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.mixer.v1.config.client.IstioService.service)
}
#if LANG_CXX11
inline void IstioService::set_service(::std::string&& value) {
  
  service_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.mixer.v1.config.client.IstioService.service)
}
#endif
inline void IstioService::set_service(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.mixer.v1.config.client.IstioService.service)
}
inline void IstioService::set_service(const char* value, size_t size) {
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.mixer.v1.config.client.IstioService.service)
}
inline ::std::string* IstioService::mutable_service() {
  
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.config.client.IstioService.service)
  return service_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IstioService::release_service() {
  // @@protoc_insertion_point(field_release:istio.mixer.v1.config.client.IstioService.service)
  
  return service_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IstioService::set_allocated_service(::std::string* service) {
  if (service != NULL) {
    
  } else {
    
  }
  service_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service);
  // @@protoc_insertion_point(field_set_allocated:istio.mixer.v1.config.client.IstioService.service)
}

// map<string, string> labels = 5;
inline int IstioService::labels_size() const {
  return labels_.size();
}
inline void IstioService::clear_labels() {
  labels_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
IstioService::labels() const {
  // @@protoc_insertion_point(field_map:istio.mixer.v1.config.client.IstioService.labels)
  return labels_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
IstioService::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:istio.mixer.v1.config.client.IstioService.labels)
  return labels_.MutableMap();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace client
}  // namespace config
}  // namespace v1
}  // namespace mixer
}  // namespace istio

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mixer_2fv1_2fconfig_2fclient_2fservice_2eproto__INCLUDED
